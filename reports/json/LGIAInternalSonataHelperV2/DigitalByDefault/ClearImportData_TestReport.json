{
  "collection": {
    "_": {
      "postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01"
    },
    "item": [
      {
        "id": "caea0a5c-df72-4d71-b8df-29ebc328968a",
        "name": "CCM",
        "item": [
          {
            "id": "bde18f7a-b6d9-4065-acaf-82d2885df94b",
            "name": "SwiftEvents",
            "item": [
              {
                "id": "bdf1b768-f179-4177-af74-c2032b78e25d",
                "name": "PullDataFromCsvFiles",
                "item": [
                  {
                    "id": "8a160cf0-0495-4866-863f-79937f34682e",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61b075a-8072-4898-a81b-db27f7da371a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac84138-0ea6-48ea-8ac0-8f32b6d22c9f",
                    "name": "Username and Pasword incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b52b9d8-6222-4eb1-aa7d-560a32452bbd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe747e8-c39c-4fe0-a2da-d2010fdc322d",
                    "name": "Username and Pasword locked ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b5b211-dd77-46cc-801e-350ccb53611c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Account Locked\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c6401c-5607-48a9-a06a-5ef6a1db4ec0",
                    "name": "Username and Pasword new account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a4edda-57b0-4547-a0fb-831ccd2ca9f0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e6e46f-90c0-46d7-9383-2d612d9be60c",
                    "name": "Username and Pasword insufficient privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3feaa16-a49e-4141-b339-08f5655a4bca",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f19069-a429-46b4-9b61-6cfc7dd6bdfb",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb3c298-213a-4120-b2ab-86f37dddf195",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('PullDataFromCsvFiles[SUCCESS]');",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "203728d3-1dec-4206-957c-e5e5f1caffce",
                "name": "SyncSwiftEventsToSfCampaigns",
                "item": [
                  {
                    "id": "99153f0b-0f5b-4624-acd9-0fe810901db4",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cd4f44-a180-43b3-a421-f552371e2b55",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5be0928-3ca2-4a7c-ba01-cbca2413a863",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83676c08-d454-4fe7-aa88-110c999f6f12",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "649ffa6f-8dfd-43b6-b846-cd1871853413",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b6c965-9fb5-4a90-94e9-0cd4bb57db2a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a911a4d4-8fcf-43a7-9ebb-b525a9dfb57a",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c205660d-0a96-42d3-aa72-82e80bb3a532",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "28508301-48db-461e-86a6-1b600df20ef5",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3ff24b-f662-4be5-9c13-62f5e1690f43",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b885c9a-50f9-4706-b169-2fc4495cddf2",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d1d77c-653d-44b0-a4c4-9d11a8e6db95",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncSwiftEventsToSfCampaigns[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2f186ea9-62c5-425c-8730-04c1d22cfa36",
                "name": "SyncOpportunitiesOrLeads",
                "item": [
                  {
                    "id": "52f03ae6-9136-4de5-8c83-d244081f7c2e",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c702a64d-525c-420f-810b-21608397a9d8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4cf55cf-a620-4a0b-be73-f3f49d37df4c",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb1c1cf-3d2a-4318-b798-50234d027e02",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07f448f-9add-4a86-8fd3-11a898ee941d",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9eb8074-e66f-4836-8b46-ef0593b414d4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16cd9a6-926a-4e24-aea0-f1e81be2d5ae",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d1bfa6-2732-4eb5-ab91-93d9071fbab0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e9d0f8-95b3-4b66-b3f5-4b7ead98f2e7",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d384f9-f405-4e90-900b-bbe93ecad514",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec4c73e-8ab8-4a61-b12e-5cc528b5550e",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37922022-eaa8-49e6-93e7-255ab5c0aeea",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncOpportunitiesOrLeads[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf1394ed-de24-4ba3-8b96-88f897357258",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "643d2c3a-8b28-44fd-869d-1ca8cf6f8a75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "8ae233ba-39cd-4993-8f81-9a15e82347a4",
                "name": "SyncRegistrantStatuses",
                "item": [
                  {
                    "id": "9426677c-9236-441f-b99e-4def2802be0e",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b9616b-c82d-40da-b869-90e7ee62259a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da38c19-2117-47af-b4f1-9c166eacbf14",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a79c0c-6336-47cb-8d4c-0a3e75b35204",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "19de2192-477a-48ac-b2bc-e432fb779028",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a7a852-614a-4ba3-ab67-876a5f2016e3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e26f5f-be9b-4094-b796-45eb749f5af4",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6631f3e5-f6be-40bc-8ee6-0e860f7a40f7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a14716e-5933-450b-9065-5728b381305e",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce7a70f-65a3-4b76-9ebe-cc3225235aab",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "35177607-620f-44bb-9d95-f03cf736b2e3",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a467400-6fd0-4e3d-8975-5144e77c614b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncRegistrantStatuses[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7320e0af-3ad2-4a75-8cee-ad829dca2af7",
                "name": "AddConfirmationInteractions",
                "item": [
                  {
                    "id": "944b0146-01e3-4244-8b60-7598d194d671",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e68f6b3-5ba1-4eb6-94c9-b9c45d6490ac",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f8ec94-e13a-4e66-8389-2da538f1f95e",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb861345-f305-4e39-890a-7478965b6dd2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f061e08-245f-444b-bc99-1194cfc9f687",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd5f707-c873-4fc6-8324-8ddc0a6c8c7e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ab8760-60db-46e5-9d90-25b3a0069d31",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1750354e-855c-4e03-b680-ed878d172498",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "772f8f5a-463c-4ade-ad3b-44d5707927b9",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efcc7cd-3c7b-41e8-861f-44e65002d6c0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab03f12-36bd-473b-ab90-cb57310b6dc1",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "352be751-9ee8-4ac7-aa78-64fba121638b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e2478305-7419-4e3d-8b31-ed9a348b5c91",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c41a2b9e-3a82-4412-805d-837ff8bc2ee8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "67e8bd20-4bc2-4904-a9b3-faf67cccd47d",
            "name": "Corresspondence",
            "item": [
              {
                "id": "f40ee1d4-0b3d-4135-ac5b-84f46e15d669",
                "name": "SyncInteractionsFromEngageOne",
                "item": [
                  {
                    "id": "3f343f1f-76ee-411c-baf0-59c6773a4590",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab7adfe-553f-46c1-a510-caf03f62882f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdf7aaa-e39f-4afb-8924-b92d876603f4",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1dc66a-8646-42a5-8d7c-8ce503af9217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fdd750c-ae78-406f-bc77-53c4ea3bb8f2",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccae637a-8341-438d-b164-2997c53e1a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ca502c-82d1-46fe-b0d3-4da27c863dbd",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6e2817-f2b1-4125-b181-f6346a4c7183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No roles assigned user Test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61da86f-35d3-406b-94fd-77660680f695",
                    "name": "No Body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c12940-1bee-44d6-a2a4-c08460e59bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Body Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"A non-empty request body is required.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e69cae-7056-4775-b392-e5bd4e468e67",
                    "name": "Blank date",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\":\"\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82e4b72-4c94-4de6-8f60-8a7d96174e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Blank date Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"String '' was not recognized as a valid DateTime.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa48ee0-fd21-4e47-8db6-dca0a2846667",
                    "name": "Date not found",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49457e16-9d1c-4db8-8f6c-802decc245bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f21657d-fdfa-45a8-a170-a34d3bacfe29",
                    "name": "Invalid file format",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1043903d-d0b7-40b6-b5ef-4a1f307f5372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "string",
                      "value": "{{TestAutomation}}",
                      "key": "password"
                    },
                    {
                      "type": "string",
                      "value": "TestAutomation",
                      "key": "username"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ba55f99-d60d-4d82-b6e2-d5faa6588c20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee0a5c77-b766-478c-9f8e-4ac075efb722",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fdea5f12-78b3-4fc4-b169-4411dfc7214a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1123058a-ce88-49d0-8c91-ce138b2bcfcb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "78fb8751-45a1-43ef-9769-531a40d440fb",
            "name": "Actions",
            "item": [
              {
                "id": "b19f58cb-7f54-43eb-bf8a-988e99f50e79",
                "name": "AddAction",
                "item": [
                  {
                    "id": "23ae0378-3eb5-4fba-9f35-7bb28fc1144f",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104940d3-bac7-4fb1-8185-dc658a4d3d48",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "21dace60-20e7-4ae5-b522-f2b6a530b843",
                    "name": "Incorrect account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d5ae3e-fe78-43d9-897b-f531a45cdeb6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec134aba-95be-4584-9fd9-773f9a66c5d9",
                    "name": "Locked account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee803cfa-52c5-4ddb-955d-2a1427a639a0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83ec50d-798e-4c54-856d-f4854106c688",
                    "name": "New User account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789b658c-0203-43b5-a3c5-a8f7f4049309",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New User account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "444f4cfd-abee-4333-856b-13687b743270",
                    "name": "Empty Strings  test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"\",\r\n  \"action\": \"\",\r\n  \"actionDate\": \"\",\r\n  \"status\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e524531-cdab-4349-a283-19bd4b456e00",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action is required\");",
                            "    pm.expect(jsonData.messages[1]).to.include(\"Status is required\");",
                            "    pm.expect(jsonData.messages[2]).to.include(\"Action date is required\");",
                            "    pm.expect(jsonData.messages[3]).to.include(\"Source system is required\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "91776cf4-2891-4eb3-a52b-4aa34038e70f",
                    "name": "Incorrect source system test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"Ring Central\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99d8553-29a9-44ba-b179-28a953d7949e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect source system test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value Ring Central is not allowed for field Source System\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8fc2ae8-9060-4dc9-b4c2-8de7e42f0ded",
                    "name": "Incorrect action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"$%#$%#$^%#\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "780630bc-df02-46f3-bc34-85ac77c98858",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "102f8cda-4bfe-4b43-bee7-7dfe71a354e1",
                    "name": "Incorrect action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{incorrectDate}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e455c85c-1411-4c0c-8d90-cd41bde4c1d9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Date \" + requestBody.actionDate + \" is not a valid date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42401bad-a526-4c12-8f37-fa2d4658e94a",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "incorrectDate = moment().format('DD-MM-YYYY');",
                            "pm.variables.set('incorrectDate', incorrectDate);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d7621e-1ed3-4483-804f-1affeaa5e0cb",
                    "name": "Future action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{futureDate}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b966859-b4dc-4702-bf54-b1785fb97166",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Future action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action date \" + requestBody.actionDate + \" cannot be future date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68efddff-ea0b-4042-a5ab-0f88c7897c1c",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "future = moment().add(5,'days').format('YYYY-MM-DD');",
                            "pm.variables.set('future', future);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1ba865-e72b-4ea5-847f-90d64196de71",
                    "name": "Current action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45dcf9ec-fcfa-47b6-931a-fb13b2f68e80",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006dfece-0dd4-44e7-b6db-5c0b63ad136a",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0db168d-aa04-4f73-80d5-fb6a153b2ffa",
                    "name": "Incorrect status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393c5193-777d-4c77-be23-ab6153f610e7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value \" + requestBody.status + \" is not allowed for field Status\");",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450217b3-b927-42ad-9e63-4db8f45987d2",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a8ba5b-d58b-4d6b-a02b-a4b6f904fd62",
                    "name": "Valid status action started test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bfac9e-4705-4cac-8d02-62285eca61f5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756cd089-8dc9-4bc2-b9cd-b682d010bc8c",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b54db3c-12ea-4a2d-9dd9-f8cb380d777b",
                    "name": "Valid status action completed test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action Completed\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06402ef9-e2eb-43fa-bbd7-736268b0d0a6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88beed6-19e2-4e5b-bebb-b338752ac05e",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1458e96a-f845-45cf-89ea-f61c77dd2a69",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"SwiftDigital\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c880d970-103f-4d62-86c7-b7a7c345bce2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232af9bb-eb94-4717-ad0b-649b02c55b03",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8d0112b4-c79e-4ef0-85f6-5d698e207fbb",
                "name": "AddActionV2",
                "item": [
                  {
                    "id": "817b6f11-d87c-4fb2-bdc3-afa2c320ed79",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0491bf80-c988-40e7-a97b-0e0d93855603",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c8372a-0f39-40f7-9b86-ae8d3c80e0f8",
                    "name": "Incorrect account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b21c58b-ebce-4e85-8207-e6075ff25178",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b1b0af-de63-4da3-890d-75a2cffb5773",
                    "name": "Locked account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebadff5-8fa8-4c31-9840-4d4c53293b8e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "11accf28-e99b-4a42-8ba2-65b83f00df61",
                    "name": "New User account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6a2660-8aeb-4bcd-9c17-0b3ba93557e9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New User account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "acce5892-7e08-450f-b8b6-a1c09979b037",
                    "name": "Empty Strings  test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"\",\r\n  \"action\": \"\",\r\n   \"actionDateTime\": \"\",\r\n  \"status\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc22aba9-0795-4ec8-bee2-5512e5984bb0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action is required\");",
                            "    pm.expect(jsonData.messages[1]).to.include(\"Status is required\");",
                            "   // pm.expect(jsonData.messages[2]).to.include(\"Action date is required\");",
                            "    pm.expect(jsonData.messages[2]).to.include(\"Source system is required\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "30aba534-7996-45be-8579-8a9e05057a15",
                    "name": "Incorrect source system test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"Ring Central\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07314d2-46cc-4ea2-8141-09903bae45db",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect source system test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value Ring Central is not allowed for field Source System\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69d3a03-0e7f-43fb-beaf-af8fbe72322c",
                    "name": "Incorrect action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"$%#$%#$^%#\",\r\n \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef168f77-04e8-42e0-b981-a823da8d6e6d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d56191-3450-43c9-a3da-0d0019679ee5",
                    "name": "Incorrect action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{incorrectDateTime}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e6ce55-8ee5-4ea0-8e90-9a965064ab52",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Date \" + requestBody.actionDateTime + \" is not a valid datetime\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d09c919-17bd-4e64-b6d8-dc758144fc03",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "incorrectDateTime = moment().format('DD-MM-YYYY HH:MM:SS');",
                            "pm.variables.set('incorrectDateTime', incorrectDateTime);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4428bbb4-0d47-4260-b3b5-acb8d38e5eb8",
                    "name": "Future action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "V2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n   \"actionDateTime\": \"{{futureDateTime}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b89f70-6423-41ed-8f44-fc82588907bf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Future action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"ActionDateTime \" + requestBody.actionDateTime + \" cannot be future date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117edb3a-62b5-460d-9c72-c93d418adac2",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "var futureDateTime = moment().add(5,'days').format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('futureDateTime', futureDateTime);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03dddf4-e3c0-4e92-938e-a808b4ce6d24",
                    "name": "Current action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43366c8d-01ab-434e-a0af-ec18edd8cee6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a99a984-57fc-4e39-b778-1cbd71179044",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5271ce53-1ba1-48e5-9650-ad8e68a1499c",
                    "name": "Incorrect status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f5e7a5-32b4-4097-a2c5-ec432ea9858a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value \" + requestBody.status + \" is not allowed for field Status\");",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26fb17c-725c-47c7-bb25-0fd34e0b7212",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD HH:MM:SS');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2529c61-2231-4637-b3b0-06035548365b",
                    "name": "Valid status action started test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af05574c-54f9-4d18-9d5b-ae97175b92a6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d04831-7f3b-4b53-9b3a-4a18ccc7251c",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35e7df0-5676-4836-8fad-bc8861577624",
                    "name": "Valid status action completed test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action Completed\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "333366db-5468-4e43-b7e7-12e9aa14a22e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7d8b1f-7e8f-44a7-af9f-73f58c215751",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a84629-5f7e-4812-8579-65380ecbd730",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"SwiftDigital\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f87db5-da48-48b4-b6cb-38d960c494de",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac26f5f3-0e3e-46b9-832d-eee204d8fe13",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3775411-223d-4e62-b32f-d2bf95db7ca5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "754cc995-cc18-4210-afaa-11357be49d71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "e5fbc48e-1ce4-42aa-8058-511080fa1733",
                "name": "SearchActions",
                "item": [
                  {
                    "id": "7bc15364-1d23-434e-a5e9-d3d4315b6015",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4b1c04-7964-4c5c-819a-9714857b54b8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1807dfaa-d2b8-47e1-b263-d64b906ff3be",
                    "name": "Incorrect account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43c3f04-ea1f-484e-9a6a-574461b2dad4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "798752b3-9adc-4e1f-b4ca-e6c0e7c144bf",
                    "name": "Locked account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2a32c5-d267-4717-ad17-e6715e87f3a5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca78354-8786-495e-86b0-498a97c195f8",
                    "name": "New account test ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "592b2d00-9a34-4a6b-a53c-dbdb9b8b7405",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa6e9ef-b890-4b87-9bc3-e6edd737bfc4",
                    "name": "Only client Id test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501\r\n}\r\n\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180664da-6f2e-482c-92f5-42a59ce69a69",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only client Id test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf69a31-c339-447f-9275-b6f6b07d8be1",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3799f0d2-78d0-4121-a69d-8545e3917b8b",
                    "name": "Only action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \r\n  \"action\": \"{{action}}\"\r\n\r\n}\r\n\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7414c6f4-9e10-4412-8b7a-bfc61ae9f0a3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438a73cc-6ad0-4bae-8d6b-32bd4556af6b",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a822334f-79c7-46d5-b486-79f75a16aa2f",
                    "name": "Only status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\r\n  \"status\": \"Action started\"\r\n\r\n}\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fcb4768-1c18-43d6-a522-88a24ce31ed0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebb637a-d07f-4cb7-97b6-019c49801798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eedf080-d7e9-4420-b7ae-315568497b9f",
                    "name": "Only page size test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\r\n  \"pageSize\": 2\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1031d348-83d4-41a4-b7da-fdbed621e820",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only page size test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e726b3-7f4d-4074-b312-a377e310b114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b1a4bb-10fd-44d8-b5f8-c00bb9854379",
                    "name": "No body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a73a6d-5e36-406c-a7e2-89973bc5d711",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.false;",
                            "pm.expect(jsonData.messages).to.include(\"The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true. Path: $ | LineNumber: 1 | BytePositionInLine: 0.\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a3c036-3244-4353-a74a-cc289370da4d",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05100b6-c2c0-4952-9cbc-97ec0d11dcf9",
                    "name": "Blank body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\t\r\n}\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "852cbea4-297a-43ac-ab84-21ba86c94d22",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Blank body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e5d292-584b-45f9-a163-18429ef84887",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "42c87eab-22de-4d1e-a341-ae10d3ada559",
                "name": "SyncActionsToSalesforce",
                "item": [
                  {
                    "id": "e846d5c5-a916-4d28-80a2-a5a4b35b30b3",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3ff88e-f509-4ca0-b667-d5331ca95b86",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a124ed5b-f636-4520-b219-698fb1fb27c2",
                    "name": "Incorrect account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa719f0b-4524-4a78-b2d6-8e513ee1e730",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "069a613f-a79e-4f9e-805d-184451964185",
                    "name": "New User account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457930a9-b4c7-430a-9f43-bb3aa773547f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6fe81ba-ba56-4477-a84b-c1b80aa12675",
                    "name": "Locked account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a070b0-d756-4db7-aba6-e4b54ac272e4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac1e764-d850-4cfc-842f-7d7718326fc3",
                    "name": "No access test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5eb792d-80b9-40ee-9032-10a8a1293f84",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No access test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b276d0bd-86b8-4b1f-90de-915952bebe90",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9531a298-8182-47ac-a8fa-a8a222991c41",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No access test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.include(\"SyncActionsToSalesforce[INF] Sync complete.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d7e5fac1-c040-46c1-927e-a3ab982458b4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ae95525-955d-4ae7-a03d-9141029cf737",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d5971523-93e5-42e4-944a-be1971cc880a",
        "name": "EinsteinAnalyticsData",
        "item": [
          {
            "id": "9a31464f-5a00-4673-bf00-3e5c845bee14",
            "name": "Einstein",
            "item": [
              {
                "id": "2f0e5244-706f-4d5f-a2eb-599de1e3149b",
                "name": "ExecuteSPEDWHerokuMembers",
                "item": [
                  {
                    "id": "57df09d3-fab1-44bd-ac46-1815bb29fdc5",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98e1dc0-72bf-4aa5-9b41-210c513cf7d2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f63baf-e840-43f2-a4b6-af39f53dca2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d864096-f3c0-45ae-98b4-e5ac6d2cc05f",
                    "name": "Blank stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b513acab-5572-41fa-bb66-a9a4454ad270",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Blank stored proc test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07a5aed-9d77-426c-84dd-f99c3aaa2878",
                    "name": "Invalid stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[usptionSFMemberAnalyticsFlat]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fc2eda-1a79-44a3-bedb-c6248a2c4574",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Invalid stored proc test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"Could not find stored procedure 'wrk.usptionSFMemberAnalyticsFlat'. [wrk].[usptionSFMemberAnalyticsFlat]\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cb287b-2219-4582-882f-d7a9149a954e",
                    "name": "Unauthorised access test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5b8b42-9f36-45f4-9f28-cbcc20a00193",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"Unauthorised access test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d69dca8-3a5c-4292-9fe6-81ee30d6e79b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"test\");"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f63e40b-fa00-4445-92ce-113e8eef5122",
                    "name": "Blank body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0e7874-7d02-40d7-80df-cad8c9812b54",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Blank body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "770187af-b11b-45b6-bf12-776f2b3435bb",
                    "name": "Another valid stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAccountTransaction]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8dcc8a5-bda3-454e-b9cb-6f5df97696e1",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Another valid stored proc test\", () => {",
                            "    pm.response.to.have.status(500);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"Procedure or function 'uspIntegrationSFMemberAccountTransaction' expects parameter '@startDate', which was not supplied.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "51264257-4daa-450e-9041-e5e9e320537a",
                    "name": "Valid ExecuteSPEDWHerokuMembers test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAnalyticsFlat]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12835a25-c09d-4bcb-8ada-2a1677a94f1c",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Valid ExecuteSPEDWHerokuMembers request\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5576ec2b-c257-4fcb-b8da-6f7731a6e122",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "31199ff4-bb3d-4ee9-9b15-fec3a9162797",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17cd22a9-be2c-432c-bb16-e60a5cdf3155",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48cd4f17-191c-4e78-80ad-1f91f5359256",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6bb0616d-1aef-48d9-9beb-52ef152321c6",
        "name": "FileConversion",
        "item": [
          {
            "id": "bff0d11b-0b13-4760-83c9-7bed087a3f78",
            "name": "NasFile",
            "item": [
              {
                "id": "e8f386d9-f50d-43ef-86e6-778e332b06c6",
                "name": "ListInFile",
                "item": [
                  {
                    "id": "bb184a57-2a6f-45f2-b9a3-d2edb51e4ab7",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856d3084-2c32-4941-b3f8-af0ec6f0f1ae",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625126c5-0635-44c5-8c1b-3a74b5d66167",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d829ce1-d8ea-4efc-a849-57a65abbe950",
                    "name": "Username and Password not provided ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbcc564-58c7-4928-88a1-c9cd6f515aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e567d6aa-df3a-45c9-88ed-644ceebd3184",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1cae4e8-4bc4-47d3-bb69-8626b45806b9",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30628b73-6cc6-434f-9f67-8cc038023451",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5443d8-31d5-460a-a8f1-ed9f67ba4f36",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "06fc7174-9602-4fd8-b34c-ef4524d9718d",
                    "name": "valid list in files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": ""
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f1b944-e9b9-4b54-9a34-34cb21195183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\in\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName+ \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc237fd7-4bfa-4794-818a-53969eaa6cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "a7aad261-cc3c-4a89-99c4-fb5295712889",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fb0a9a-3343-40b3-923d-77605ac71c31",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55437898-5064-464f-9ac5-a8b1e4e2c2ec",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5c965c-1fcd-4c7c-9c7e-a80c59e05ea0",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca899e4-4e9b-442c-bcfd-6e7b5133a0fb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e4619a-0203-4a6b-91f6-a3f2bd4f41d4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "913507a4-4992-41c9-b78a-66dae8fde978",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d5b4286-7b47-4d82-a1b4-d25ed8204075",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "34746f5c-0a66-4534-be1d-db2bc6204905",
                "name": "ListOutFiles",
                "item": [
                  {
                    "id": "f2bffcdd-e9e3-4a86-a02b-b8639c2e53d6",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25ccb4e-7e1a-4555-b952-8c43801862c0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1342de17-0c02-41eb-92c6-1b7a17aeada1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "325e0d2f-6068-4cd6-b299-383a3f812c20",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6bce8d-d844-4df2-8fb4-a321a9f1df32",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ac5375-3ffe-4026-aba2-d2fff0f7b358",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cd5b60-2e82-4595-9d7f-6cd715d2f0ae",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a448d9b5-b514-4f4b-930c-6142847d8314",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa96997-b7e2-40e7-803b-e9d6c266342f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "799757a5-0d04-4c39-8b4f-12f00f0cbb82",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8642a3-d69f-446d-a8af-b006116f732a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7282eec-73e1-4105-ac08-ae5a968ab83d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9221484a-c01b-4853-9eda-68da63073733",
                    "name": "Username and Password not provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a8c247-9d03-4032-93bb-c4d00ae31b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "412804de-6784-4e11-8d6d-dbd7ba209cc8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6120d0-0c18-475f-bb75-eb949dc86e29",
                    "name": "valid list out files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFIles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": ""
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d68965-6e13-43df-8302-042d70446e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3275fa-ef93-4fca-aef7-60855d338fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list OUT files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\nas_staging\\\\out_staging\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "189c216a-6b76-4644-b363-10b551dcddc2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32b7556c-e53e-417f-926a-f547569b67b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "bcf9276a-de7b-43f2-a48b-c55968a4e525",
                "name": "AddInvestmentOption",
                "item": [
                  {
                    "id": "a3998bc4-84c6-4e83-a783-5b89b42c799c",
                    "name": "Only Fund Name is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundName\": \"ABCD\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a56018-ab0f-4b0a-ab0a-d36986f6141a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Fund Name is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f043a526-7d1c-4c3d-bc4c-36aa6f6298a1",
                    "name": " Only Nas Fund Id is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"nasFundId\": \"QL81\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297dcd77-cde9-4801-a3d7-1e2d3f3d6d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Nas Fund Id is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ce8acd-fd17-47fd-a691-b29e77f424fb",
                    "name": "Only Fund ID provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"fundId\": \"QL81C1\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ea548d-a566-42b5-aef2-7f25b79000c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When only Fund ID provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Name should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb4994e-31e7-4a5b-924e-0a8d7826cd8c",
                    "name": "Duplicate Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL82C1\",\r\n  \"fundName\": \"New CITY DB OPRTIONAL RISK RESRVE\",\r\n  \"nasFundId\": \"QL81C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19880374-f6f6-4de3-bd7e-cab548cbbe4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Nas Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "20076e55-b602-42c9-9b5e-a66e58ebe7b4",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "user",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "user",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4774b808-1d97-4f29-a2ce-60fc06f80045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0592ca9-121f-461b-8f5d-a1a95c2b1340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Username and Password test\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1691d4fc-cc88-4ea5-9f15-2c9352f6a7d0",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea17ec5a-2bf1-479b-a23e-5966ce991fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d21bf5-f4c0-43c0-87b8-8f78fe89a653",
                    "name": "Invalid characters in Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"@#@{{randomId}}@#@#\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2492c672-6fae-4bf2-ab4c-c26fdbd9d7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38fe8e44-2bf9-4c4d-93e9-233923bc4696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2538679-5671-4f71-bb96-1bd1c055ff9f",
                    "name": "Duplicate Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"QL81\",\r\n  \"excludeFromUPFile\":false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898f9d50-4944-42bd-81cd-5c50f5d9dca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c093ac-19bd-425f-a878-bea382b27f68",
                    "name": "User with no access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040c5444-2b13-4978-a344-b305404dd97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a7d2ac-ca6b-4592-a8d7-b0ae81842fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"User with no access\", ()=>{",
                            "    pm.response.to.have.status(403);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb569f44-ef65-4a80-b883-33d0cecb5c6d",
                    "name": "User locked",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8713c06-d28f-477c-b889-bd5f23600f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ddc634-4ae8-4176-b68a-ff9278784575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked user\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6d9927-2c91-44ae-9abb-50d7cb5d87d0",
                    "name": "Invalid characters in Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"$@#${{FundName}}#$#$#\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78796e14-39bc-460c-bfc6-a9354df42e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund Name test\", () => {",
                            "   console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        ",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3621cc3b-28b4-444f-a21f-c556c8f7f726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ad3f29-c2a6-42d2-bf3b-7cf4095b8062",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d923328-1046-4e31-aa92-14a232474ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2005c55a-7a15-4b99-b1a5-3d3ec9b239ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "183fb9e6-59da-413b-923a-02fe63aea7bf",
                    "name": "Empty Request body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d3f723-9f1c-423e-8271-22df9a65bcc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty Request body test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae045ed2-555f-471a-9ac5-0b6bb91814fd",
                    "name": "Empty input fields",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"\",\r\n  \"fundName\": \"\",\r\n  \"nasFundId\": \"\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ccc38c4-7b7b-4cd4-9446-d119a2f27760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty input fields test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "98cc584a-8d35-45a8-bda2-6808a6f867b8",
                    "name": "Invalid characters in Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"%%{{randomId}}#$\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa706f8-6ddd-48ed-8de9-60ec16ba261c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71369076-7d0e-4e6a-a2b0-c545d10ed36d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8579f2-2bf2-4194-bdba-83967ae6a0f4",
                    "name": "Valid all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25f5613-a755-4750-9aba-5891d270b8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All valid parameters test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a91c50e-39a6-4519-af9a-107e138fe90f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c798774-2968-4609-b59b-b9a50cc9d553",
                    "name": "Duplicate all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"LG AGGRESSIVE ACCUM OPTION\",\r\n  \"nasFundId\": \"LG18C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7a7030-30fa-4b76-9b81-7e4e2e16357b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All parameters Duplicate test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    ",
                            "    pm.expect(jsonData.response[0]).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Correct message validated: \" + jsonData.response[0]);",
                            "    ",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Test completed\");",
                            "",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67329b45-da3e-482e-94b2-688ce0611e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddff8a17-bc74-4b19-a441-6ada34c33539",
                    "name": "Duplciate Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n   \"excludeFromUpFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35d1547-dc35-4f74-8204-e43b25f66452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "  ",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd35dd2f-8d8b-4783-b356-756594d2acd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4423d467-5a80-466e-8a34-1c6cf8d196ff",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4c3c03a-06ab-4380-ad38-7c2c4012e872",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "adbf04e3-32e8-4b47-bb8b-717f80412b0d",
                "name": "DisplayInvestmentOption",
                "item": [
                  {
                    "id": "d892da39-957d-4508-b783-2dbc5e1685ca",
                    "name": "End  to end test - exclude from up file true",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635880b6-e3b0-41a5-bf4c-34737f713a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(true)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444b685f-606d-4a1c-af0e-02084637a662",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: true",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0042cf94-8fe3-4c0c-8c0a-e170da7f7530",
                    "name": "Valid  FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51921a0f-f0ba-4238-8d1b-dfb1f5359d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Nas Fund Id displayed is: \" + jsonData.response.investmentOptions[0].nasFundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bd154e-7c3f-48c2-8bbc-353d0bdf1621",
                    "name": "Valid NasFundID and FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundId",
                            "value": "LGGBCY"
                          },
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184f6405-84e9-4087-9958-e928739dafd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundId\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundId\")) + \" matched.\");",
                            "    }",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "577c40c0-fe27-46c4-b07b-41771017ccf2",
                    "name": "Non-existing FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e40f1c-1c78-4e48-9398-213a5a8eb9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28ae3ff-a28c-4435-a6f6-b7721f630e3d",
                    "name": "User with No Roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6441131-b4da-48e3-8acb-1c29d8fe19db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "db95cb62-ed23-406e-a786-2379d05d6268",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e9b50b-c25e-41c3-a1ae-7197a72f49c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a9dfc0-6170-48bc-b068-2151b2259294",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "GBCYC1"
                          },
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21e82f1-d259-47d1-be66-4ec554083d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efc39c2-2296-4c88-9462-497303b0585b",
                    "name": "Incorrect username and password ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "incorrecty",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "incorrect",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d49f96b-4f88-4715-9233-4fe2ebca12ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d822bf51-2d23-46df-aa97-30588ba490f3",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481978ef-c07a-4832-be0e-41dc59fea7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd96538-c80e-4a33-a740-4bc976d08330",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbec18b-82e0-4825-a27b-888e9a0aa15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5284c74e-bdbb-4882-b19c-4fd7e054317f",
                    "name": "End  to end test - exclude from up file false",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19daa154-ed1f-4cff-bd09-95c71af8a69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b758f4d-968e-453d-a379-b1bb73f86248",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: false",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb73af2-b129-4978-9e0d-afd27f8db082",
                    "name": "Blank Parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1440473-7b16-4317-bdc7-7fb5950f9c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const length = pm.response.json().response.investmentOptions.length;",
                            "    console.log(\"No of Investments options records:\" + length);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "43123020-7627-4b1c-aa42-e98992e874d5",
                    "name": "Non-existing NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4814712-64e9-4589-ad19-708e7588b927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec14148-d101-4f43-960f-4041b649caae",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bc631d-8fab-4eea-bad3-24cc20990179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a22c3fe-53e0-48ab-9e39-4ecabe911a0e",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b10a3d4-478d-4c36-8f0a-0d10f675afb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "71756caa-8b60-4101-a090-12df188f5a8a",
                    "name": "Valid  NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "LGGBCY"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b43fc5f-097e-45eb-a0d7-926940118738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c78c89b9-5f46-42ee-b2a8-8d04d6f702c5",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0a7d80b-4924-4256-bbc9-fc847b93a84c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "0d1d8732-4d2f-4ff9-b56e-c2500579d9aa",
                "name": "RemoveInvestmentOption",
                "item": [
                  {
                    "id": "a7fa6eb3-73a8-4b9d-b175-8074f74a80ed",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08be3ec-f8c1-4089-b617-23985efaf5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92978ed-4ff9-40c3-b073-8501d133cc5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b18f0d3-7255-49db-865a-7c73fa0d27d5",
                    "name": "Incorrect username and password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db43665c-21eb-4a1b-8cc0-867712085f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812c827f-790e-473b-9470-9f7291fa9cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f44e51-8895-4471-b56f-7e865a9ca476",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea41d87-bde5-428a-85fe-08128716dfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77d7a85-d071-4a8f-9fd3-078fdf2a9d1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "33354aa1-340a-4048-84fd-775331315f79",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355c2ef5-7e53-43a9-afa8-86045751f5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c78f99-a8b9-4569-998e-59183d8275c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2aa28d-3df0-4c15-bb5c-37a903eccb53",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932530c7-4915-4d3a-8652-5facecefd321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94dd2781-f569-4970-be0f-313680a3c371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9d52a8-75ae-4359-8fe9-8d9de9b87416",
                    "name": "Blank parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": null
                          },
                          {
                            "key": "nasFundID",
                            "value": null
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4a4c08-acd9-44a5-a441-a9c677899dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response[0]).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "    pm.expect(jsonData.response[1]).to.include(\"FundId should be provided if NasFundId is empty\");",
                            "    pm.expect(jsonData.response[2]).to.include(\"NasFundId should be provided if FundId is empty\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ae2717-5a0d-4011-b21a-9a78a088ee58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2bd1d8d-0cf1-4d44-833f-904993b56d28",
                    "name": "Non-existing FundID ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d84d9f-3a09-4a95-af03-70eaddccb64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ad3ef3-ccf9-4abf-a3f1-0a1059075973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb871e8c-9f58-459d-b86f-663f423156e0",
                    "name": "Non-existing Nas FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3272a5e-4ea8-4206-83f2-f9f887ac7579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c2ecd4-e25b-4588-864b-b25dff5f6310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "677bea79-ab06-4192-9d72-4516a6db64b4",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c773742d-f299-47e8-8b0d-bca321d52c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d62a88d-7261-43a8-b529-de59d96d93f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "62698225-7d71-4e86-ad3c-bfd2573241d8",
                    "name": "Valid FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4539361-48b7-47ad-9e05-e1cad24f7c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId =  successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf5aabe-f36b-4e5f-aea2-ae60d7b97357",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5df3df1-0e6b-40d5-9b9b-70cbccae6653",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd59e547-71cf-40e6-937b-d06f800fbc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89d49aa-02ff-4617-8cb6-d507a58188d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b8c06a-8ad9-41c1-812d-ffbd1159aa0e",
                    "name": "Valid FundId and NasFundId",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0646a4e0-68a5-4dd9-9acd-a2fccc62a6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f64c09-b8df-404b-873d-c561ff662d29",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b956132d-60cd-4f45-983d-1c1972eae053",
                    "name": "Valid NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f354450e-36ab-4d82-aff1-3f07269ef3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = , nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c19524-32bb-4357-a985-36097152ba8f",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0349066-23af-4da8-9ffa-6c9134743f05",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e5f383-801c-46ca-b330-3f2dc091bdbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8afbbf-5db1-4ae9-9117-d7050eedc2b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12db7bb4-285f-4a9a-ba97-9028cadf8c0d",
                      "type": "text/javascript",
                      "exec": [
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6aa47f4e-f59f-4202-9043-d55f5c1c74a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6338c402-c972-4f96-bfe4-2e5503e89733",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d29ebbaa-e2d3-4e60-a190-1f5a660dba72",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8f421178-8758-4b7c-980e-1b8edcebb970",
        "name": "Swift",
        "item": [
          {
            "id": "83dcb57e-eb73-4231-80b3-2799ce2d3dc6",
            "name": "SwiftFolderConfiguration",
            "item": [
              {
                "id": "682ea818-eff3-4ed5-8efd-3bc7720502d1",
                "name": "Addfolder",
                "item": [
                  {
                    "id": "81f07199-b677-40e9-8364-414fa7e23b44",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a651c6ad-9da2-47b4-83b4-0959aad3d8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "f27ab229-0d3d-449a-8f29-87049d00fad9",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff88ac75-3f26-418a-a760-a464fa7a1395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "73fde188-57cb-464f-b046-453e0a5af5b4",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e78a928-9bae-4923-9039-cbd853fe3c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "4255cc07-e598-4977-97c5-15f12dd0498f",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90027f6-b428-429a-8330-74c7af91b4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "0143e31a-8785-4c17-bd6a-77486d884e99",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e311de3a-5980-4f79-88d9-5733a8cfa3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(405);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": []
              },
              {
                "id": "bce1bdc7-e617-4c30-9768-336a78f67de6",
                "name": "Listfolders",
                "item": [
                  {
                    "id": "c058673a-327d-4abc-b161-0246b71b863b",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011bf9ac-0703-49de-b3f5-c281ca30de04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b932127-1106-414c-b85c-ce8a30479967",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95f30aa-7963-41ec-8583-29303240e676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff88c8d-373e-45f7-b0b9-357108e2b1a9",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "649cc9c7-04fb-48bf-b219-0ebfea71244c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9970559a-330c-4bce-9ff3-ce6d47e27cc8",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5589362a-00bf-4042-a5c5-26da45a83c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "576492cd-fde0-43b6-8721-43b269cedbc1",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1016415a-790b-48d2-86e8-9782f2bef315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0ee0c6-c16b-491d-98f6-38f0be18d0ee",
                    "name": "Valid list",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482b2e41-903d-45b4-90de-bd6d501d86f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    ",
                            "    const numberOfRecords = jsonData.response.swiftFolderConfigurations.length;",
                            "    ",
                            "    console.log(\"Number of Records:\", numberOfRecords);",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d20cee25-06d0-48c1-aa0e-3a7ffaef35ab",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "753e53ee-04ba-4d5a-9ac9-d009dd4fc118",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e16c180a-fcfd-432d-93f7-db58d922cbf8",
        "name": "RingCentral",
        "item": [
          {
            "id": "8e9e8e18-f33c-4859-81b4-15925bf1d302",
            "name": "SyncCompanyCallLogs",
            "item": [
              {
                "id": "9fad50fe-8f1f-41dc-b402-6a6eee52d9fb",
                "name": "Date time exact value with time zone ",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-07-12T14:10:26.2410000+10:00\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b3a5c2b-14ec-41d1-a2e1-552053eb5dd8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Date time exact value with time zone Test \", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f518d20e-2d4a-443b-bff7-93a59088e082",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "8997e16e-32fa-45ba-9c47-103d4d1717e8",
                "name": "Delta sync",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d95efbd8-6fb7-4076-9186-1b43ee0cf7aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Delta sync Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + pm.collectionVariables.get(\"todaysDate\") +\"T00:00:00.0000000\");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9523189-d96c-423f-b06c-d5cc884e8c3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "0650c641-8b1c-4218-b5bb-385f9d31b063",
                "name": "No auth",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "adeedf38-8f5a-4071-a96a-b73c5ecd66e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No Auth test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "c7e3e9d5-8216-4f3a-8fc1-82721fe72159",
                "name": "Incorrect account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68f2b3bb-faca-4b0e-aba8-b75bf4b63fc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1790bad6-8760-41fb-871f-66429abbecb2",
                "name": "Hours ago",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65cadf36-3e06-4cda-8204-74cd51960a56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Hours ago Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7af1eecb-3304-4620-a38b-eb0bd96d88a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "4b7e2099-ecf9-44f1-a52a-52325ecd7392",
                "name": "Locked account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f93f017-f278-4525-959c-a246778536e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1cc30dab-dc79-488b-b6d1-9b2836851d29",
                "name": "New account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c1e485f-bc0a-4e0b-a6ce-f6afc910f493",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "5787daf9-3c02-4148-b195-fe7b2e9c14db",
                "name": "Sync all logs",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2dfcb348-d382-4748-a9a3-157ba4c6631a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Sync All logs Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a47d9d1-f1e0-4579-bbb9-8da6367190a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1f0aee0f-bde8-4180-b1f4-61c01c5e307d",
                "name": "No access account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f15fd6c9-8d2d-45a7-a10c-5584b1e55bff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No access account test\", () => {",
                        "    pm.response.to.have.status(403);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "216bd11c-5e18-433f-9f59-e1b66ab1178c",
                "name": "Blank body",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a9b956e-e9aa-4d38-927e-1b7d0f1fbbc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank body test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"A non-empty request body is required.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "d9d82ea0-c5ff-4e5b-bfe7-d49ba7f0f3ac",
                "name": "Negative pagelimit",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": -100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d32e812-46df-472b-905b-4b6842e344f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"negative page limit Test\", () => {",
                        "    pm.response.to.have.status(500);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"An unknown error occurred. Please contact support with the trace identifier included in this response\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.not.be.empty;",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a6c658e-923c-4c50-b6ae-b5af530b274c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "86ad3ab0-8b15-4a30-b523-dfcd1cebed27",
                "name": "Blank date from",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "105a87cc-b41e-46af-ad38-800a0446b133",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank date field test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 16.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "2ca34dd7-ea82-4514-bfed-962acf4f448a",
                "name": "Blank date hour",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": ,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f6f4ed2-d0ae-4b82-b4dc-1ebdaccc0ed1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank hours test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"',' is an invalid start of a value. Path: $.hours | LineNumber: 2 | BytePositionInLine: 11.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "cd508d88-d81a-4d0d-9bed-15b85c04de78",
                "name": "Negative hours",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": -24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f772684d-f499-4105-907b-4c9c57b1a7bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Negative Hours Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "   const requestBody  = JSON.parse(pm.request.body);",
                        "   const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e8a0926-0be8-42e1-8426-01c0042856c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "080a5229-6f1b-4db8-9267-d11700c87fad",
                "name": "Blank date pagesize",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": \r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5cc58761-633a-422d-af9b-a918c5ba07b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank pagesize field Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"'}' is an invalid start of a value. Path: $.pageSize | LineNumber: 4 | BytePositionInLine: 0.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "901a4547-e6d0-476a-b29f-b6c7de616317",
                "name": "Invalid Date From",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"12-07-2021\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25928c0c-7ccd-48a0-8914-744f1dc402e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Invalid Date from Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 26.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "780ff229-c384-4de7-8501-bf83c4049f60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5e70566b-cd83-4d05-b300-b7fefe091498",
                  "type": "text/javascript",
                  "exec": [
                    "const moment = require('moment');",
                    "pm.collectionVariables.set(\"todaysDate\", moment().format(\"YYYY-MM-DD\"));",
                    "",
                    "pm.collectionVariables.set(\"todayiso\", moment().format(\"YYYY-MM-DDTHH:MM:SSZ\"));"
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89ee3522-ec61-4523-a56d-045a2bba7d53",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "064f387c-8122-4cdc-8e36-c54fbb693a1b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "47c77487-1e5f-4eba-b358-b7f90e07003a",
        "name": "LGIA.Internal.Sonata.Helper.V2",
        "item": [
          {
            "id": "0c447c6d-3fb0-4691-bcd2-16495f526d57",
            "name": "DigitalByDefault",
            "item": [
              {
                "id": "b7955828-d85e-4f09-ae67-d27c1fa9871c",
                "name": "SubmitCurrentImportDataToSonata",
                "item": [
                  {
                    "id": "5921fccd-9c90-4996-8496-a32e71af92f9",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c4250b-57e9-4b85-aff9-4f75f625ba4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f87020-dcfa-43fd-acbb-6191bea6dc33",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdcdec7-d3cb-44db-a71d-e2fd695fdf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3502357-8caf-4a19-85b7-08e27caa76ef",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c95823-c261-4818-97f3-8310f5f12bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "",
                            "    const responsedata = pm.response.json();",
                            "    ",
                            "    pm.expect(responsedata).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a5a7db18-ca8f-45a2-b857-26795ce8831f",
                "name": "ReduceCurrentImportDataRows",
                "item": [
                  {
                    "id": "6a0778cc-22fe-4aa6-a7b6-b495a80eb156",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4734e368-75e4-4ebc-a811-bed592be77d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c715890-1ad4-43dd-82ad-ae7096e4ec3f",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "10"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac4a5bd-78e4-4467-a99f-0c108e666e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb632252-09b7-4797-96a0-48ca1a20e4ba",
                    "name": "Incorrect rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "wewetwetwt"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750a08e9-c26c-4bad-86b0-11ebbc4331af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect rows to keep test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"The request is invalid.\")",
                            "    ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ecb92c5-035d-4ab6-b429-67e6c8436c5b",
                    "name": "Negative rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "-10"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e4af4a-833b-4332-a486-d2a83f527e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Negative rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.false;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed65fe5c-1d53-4f3f-b770-c6bc908a351d",
                    "name": "Big rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100000000"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be47ad8-8442-4dca-b545-cba1f2b017f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Big rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.true;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "976b2192-1dd8-4ef6-91a1-f09a54dd3a8e",
                    "name": "Zero rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100000000"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "811797b7-2552-460a-a883-dd82e1557f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Zero rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.true;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f9bc16-c7b4-493f-9aa9-cff6151b0a67",
                    "name": "Blank rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0756e5-263f-4284-abc9-e933125ec990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Blank rows to keep test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"The request is invalid.\");",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d775ef2-4b50-4800-ad73-3c767059bde5",
                    "name": "No rows to keep test Copy",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8075493c-c9ee-43b3-aa45-c93d089fca2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No rows to keep test\", () => {",
                            "    pm.response.to.have.status(404);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"No HTTP resource was found that matches the request URI 'https://intg-mcro.internal.lgsuper.org/sonatahelper/ReduceCurrentImportDataRows'.\");",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed1d733-a14d-4a89-a428-4628d88c5e49",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a547e802-61f3-4262-b897-2610e2d24845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    pm.expect(jsonData).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7c138af3-a1b8-4ee1-823e-802918bfae29",
                "name": "ExecuteSPBulkImportData",
                "item": [
                  {
                    "id": "201e6585-fdba-48ca-9db8-54263e04097d",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "311c98bd-1fb2-43f7-a180-f3ca1be1fb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf7f84e-8fde-4231-95f8-8414d7867ca8",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f889a63-bfe8-46fa-b1e4-1e8367a95f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "571a4d74-4f50-424a-8533-6d5109fc7e50",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041b92fe-29c8-4cdb-a45a-a9d930ae708b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4e54743-9e12-4f95-b278-0d074c2ff49b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf72d287-9b32-4121-a4fb-5c82ddcbe4b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "6be059ee-95a1-4932-8d20-1ee6988c27f0",
                "name": "ExecuteSPDailyImportData",
                "item": [
                  {
                    "id": "69d973cb-5e6c-4e2c-b420-86097986c4b4",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPDailyImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2caea25-e858-494f-92a9-86d56f80fc8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b72821d-76b6-47c5-b076-3d3e6df330d4",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd20ba1-d57e-4e63-9462-7375ed27337c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "586697a2-4ddc-440b-a828-d122a8482733",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPDailyImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bce385-f329-4fb6-915f-b81fac5f5599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6010e111-36e6-4223-99b2-7eda218c3b42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66450d55-5fff-46b0-8bc7-2cdb454b83a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "093f8071-82eb-4ef5-ba69-a0b952dbbc32",
                "name": "SubmitBulkImportDataToSonata",
                "item": [
                  {
                    "id": "dca55a2f-0396-4c2e-99fc-d3a826200abf",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be94c4b9-bf8e-4e53-8f24-8939c8c37667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "534802dd-b3f2-45e8-9858-64c32d9e17f8",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "259c7afd-5305-43b5-ae86-0c14fe563f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff87c8a-c4b9-4900-a599-52b9c14194f6",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64d60ed-191f-44ac-9e47-bc8e2455783b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c380c095-026a-40c4-b309-fb67001ea6b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2d37d75-2aef-45a6-bb07-d4918491873b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "df704a44-7cb8-4190-924b-fbb3671bac79",
                "name": "SubmitDailyImportDataToSonata",
                "item": [
                  {
                    "id": "0ede9a33-8e43-42a9-8d42-ebfe933d2763",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb3f202-bcc6-4611-9307-7346a5cf3ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "35860b6d-2fc0-4f0d-849b-a6723e088212",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7023c895-0957-491a-85e2-3fab11fa12ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e7f3fa-dced-4b92-9f52-fcf7f3791ef2",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ce5737-d655-4c72-9999-4e01f43429c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    pm.expect(jsonData).to.be.true;\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93c1d37c-a474-433c-953d-e73fb007a4e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e151e54-e87e-4251-b0f7-63c6cd39ad1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1f981780-e4b7-4f2e-8d33-8e4c72e51bad",
                "name": "GetCurrentImportData",
                "item": [
                  {
                    "id": "d7addd17-8a76-4083-81c1-15b84887671f",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1079c7d9-dfe1-45ef-a5d9-6949569f98e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1a212c-a969-4f79-854a-3e21e69aafe9",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4607843c-eeb0-4c3e-a0bb-4bdfa59223bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5e0d07-d223-4cc7-9879-70b3658c446e",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd76e763-30c3-4dd2-9982-7682192a8829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "164777aa-c3ee-41b6-b8df-ef73970d312f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9245c55-a525-4e53-b4ab-006c1490b52b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "2d6214f6-ff4a-4ed2-9906-6d4b40918ba6",
                "name": "ClearImportData",
                "item": [
                  {
                    "id": "bcff11e3-669e-4d0f-b043-0ff8f0fb25b5",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1de45b-e3f3-4359-9b7e-80966a0aa5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ],
                          "_lastExecutionId": "e3e07c3a-781b-40e2-bfbb-72c1d2b90139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37da9b98-3d14-4e59-a07d-589a36308b7b",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "585babb0-7191-44c4-93cb-9877a4998d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ],
                          "_lastExecutionId": "95275983-8274-4a07-9379-fd99f12623df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa1f7d58-98b7-4890-adaf-abe949938522",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d518c5f1-399d-4902-9487-cf18ccec569c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ],
                          "_lastExecutionId": "e81339a6-de4c-4c65-b45b-b6002b3427f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83e94889-93ca-40b3-b991-93b46292e357",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f475c3cc-a632-4ab5-9197-5674f9e77485"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d263a95-8167-46e4-a2b4-6361aea6200f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9719d959-425b-4d1f-9c15-a0e9fb11d484"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "792624ed-1eaa-4e75-b5af-5cadbc96a074",
            "name": "PmifInsurance",
            "item": [
              {
                "id": "24db4dbd-7622-4ac6-876f-46fad89f9b7c",
                "name": "PmifInsurance_SubmitPMIFOptInRequests",
                "item": [
                  {
                    "id": "53bef533-b2db-4d0c-822a-5c3e1fc81491",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58a2566-b22e-455c-962f-9a3401bfccc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "61fe790e-fe5f-431e-851d-decc9f3423d0",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f5d5b7-a174-41cb-989a-25f1972151ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe193607-6355-4d9a-a4f7-95b4d8eff6f7",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef3baa6-bef0-4b5a-86db-a94ddba10949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid test test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        \r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ebf469ca-e319-4e25-90f4-f1885fb5d1e6",
                "name": "PmifInsurance_DeletePmifInsuranceOptIn",
                "item": [
                  {
                    "id": "23c9075f-1627-4f9b-8e28-47c27a54c1eb",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "3016"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e921cc89-7842-4ff2-8a52-0148d86ceae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b50f44-527c-407e-a4e1-6528f2cb2603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebcf9ae-2f45-4402-a1fc-28e84e6addd2",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "3016"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f37a5f-a7e5-4c39-8642-8a4c32b5971d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb16313d-7add-445b-9575-15d22a40d8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c0913d-a7c2-4684-aaba-3975d31ea792",
                    "name": "valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "{{optInId}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f569265-7fb9-4574-a91e-64c83fa40da2",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Create insurance record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebeb504-0322-4ca3-be30-213ded85281d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
                            "\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8776b6f9-938a-47e6-90b7-cc4dc2fe1c5f",
                    "name": "Special characters ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "@"
                        ],
                        "hash": "@$",
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6912721f-d64d-4d95-b04b-693e490f43c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd0e1e8-5725-4e6d-8ca1-9e09864668a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Special characters ID test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Message).to.include(\"The request is invalid.\");\r",
                            "\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d84716d-3e17-4af0-8a27-d3ef99268c14",
                    "name": "Non-existent ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "0001"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5907427e-5767-4852-a406-b2374f706ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2090fcbb-d076-4447-959f-8539022bd4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Non existent ID test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.false;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3ce8d347-ce48-4f85-9b09-ceee8360d5fe",
                "name": "PmifInsurance_GetPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "33b7628a-239f-4328-91f3-083f7e8c8404",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "154176"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c10823-87c7-4101-93c7-e13a8b925f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea1ea18-b618-45da-88a0-a39d3d7a6444",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "154176"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68974cc1-b637-4e3a-935f-ed6c0629ef0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "571c967d-605e-4ead-b4d5-28f132685c05",
                    "name": "Invalid ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "0001"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6860a8-805d-4eb3-a50e-6dcc2127a22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.OptInRecords).to.be.null;\r",
                            "        \r",
                            "});\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a7a2f6-c160-4c94-a134-d88183c78628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8064c6-caee-4927-a693-53042e55e5ef",
                    "name": "Non-existent ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "!1!1"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93dba0e-8e56-43b4-a9d7-86c8550dd541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Non-existent ID test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Message).to.include(\"The request is invalid.\")\r",
                            "\r",
                            "});\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19171c5-70d7-4c53-b85c-1940098de58a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "524c0877-c299-4fcd-840e-73932e61e664",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "{{optInId}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd83ac7-400b-4534-b202-649f2e332e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.OptInRecords).to.have.length(1);\r",
                            "        pm.expect(jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID).to.eql(pm.variables.get('optInId'));\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "\r",
                            "});\r",
                            "\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7d4c63-f4ff-4be4-8e5f-901f5b48b646",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance opt in record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "99cef613-9da9-4548-ac90-6688d139ee56",
                "name": "PmifInsurance_GetPMIFInsuranceAll",
                "item": [
                  {
                    "id": "3568e450-4650-4a1a-a7b2-ef53998a1484",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59bfeef2-2d7d-4166-9b6f-32ab794ebb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a8ecd4-18e5-43d9-96f0-a3f2c208fad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8baba9-d927-4619-9791-23fc4858e8d7",
                    "name": "Incorrect Auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dca5f92-a019-4930-947e-789a912f1e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd46214-5c6e-4a05-a09a-2bac2abbd843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "992be7ac-ec7e-46b9-9db0-4cd15280821f",
                    "name": "Valid asc test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1388ada-6095-41c8-8ea6-15657ea01632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe06d6c-a4b2-4180-a892-1bc368bededa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        }\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b617fd-7d67-4223-8265-16701b1b096d",
                    "name": "Valid desc test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635a0c14-9fa0-476c-89fa-748951dc552e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', false)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cc6c52-ca5a-4a06-9cb8-fb9fb6a8cdd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        }\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3abbd1-fe45-49bd-b925-d61d6df8ea39",
                    "name": "Valid one record test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3398a979-1775-4c64-a189-93c726846642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 1);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c21219-83f2-4734-ab19-47436540507f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        \r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        } \r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "69a80b8a-d399-450d-b88c-349bdd807120",
                "name": "PmifInsurance_UpdatePmifInsuranceOptIn",
                "item": [
                  {
                    "id": "e93b1c91-86fe-4726-bbf5-574c337a8e9a",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3079e2d5-7fe6-4eaf-b4b3-04fab62226dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a854529-d0f0-48c3-a539-a946db4cf488",
                    "name": "Incorrect Auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8c137d-308c-4fa9-9af4-7c8d178fee75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "040d437b-0f80-4459-af8b-994f2a657635",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": {{optInId}},\r\n  \"ACCOUNT_NUMBER\": \"100002222\",\r\n  \"SOURCE_SYSTEM\": \"CCM\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e238919-ca75-4183-8f65-86c35402f9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 row updated\");\r",
                            "\r",
                            "        const getRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'GET',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(getRequest, (error, response) => {\r",
                            "        console.log(\"Record fetched\", error ? error : response.json());\r",
                            "        const resultId = response.json().OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(pm.expect(resultId).to.eql(pm.variables.get('optInId'))){\r",
                            "             console.log(\"Records updated correctly\");\r",
                            "         } else {\r",
                            "            console.log(\"Records failed to update\");\r",
                            "         }\r",
                            "\r",
                            "        });\r",
                            "});\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });\r",
                            "\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e00731-0e2d-4ee3-bef4-ee031f6bce8a",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Create insurance record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "21c34e22-9731-41be-9ba1-2b96e2d0c0cc",
                "name": "PmifInsurance_DeleteAgedPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "fc005341-e27c-4d55-839d-84ac61745312",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f5cae7-6638-4e99-8354-2998610f7bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4610c47-9d8e-407c-b48e-0ea66858ef22",
                    "name": "Invalid auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adce224-347d-4e7e-9c24-feea53c74860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "610b4e5d-df79-4e1e-8f0e-c182b4c00c15",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "{{days}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de64ff9a-a8ab-41df-a9ce-2fb41424b865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"0 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
                            "\r",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d98cf36-b5be-439b-be38-b03962d7f8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('days', 100);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8d861a38-53fe-4733-bacb-cab912950166",
                "name": "PmifInsurance_RecordPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "ecdb181a-8d45-4cf7-99ac-76d7fe990231",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d64b438-930d-4e1c-ae0e-7af57d6015cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25a1cf9-453d-4df1-a2ff-3d83061e968b",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ea58a0-f3ac-4871-b2f0-cb8902d64c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "038f394b-639a-4595-bc35-2480617a1c9d",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de312da-226c-4199-a689-e5f09bd2dc72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 row inserted\");\r",
                            "});\r",
                            "\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });\r",
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2dde1ec2-b207-4ee0-972e-d12f6f58e287",
            "name": "PysInsurance",
            "item": [
              {
                "id": "63db96a3-bc38-4be5-8b39-e69bb32eac62",
                "name": "PysInsurance_RecordInsuranceOptIn",
                "item": [
                  {
                    "id": "4c074366-cde0-44d5-ac9a-09d2f191052a",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210c9c04-4713-4f72-a7c8-1fa9834e9e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59f3f5a-23e1-40a0-9356-7309061b50bc",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4347597-829c-4f08-a19d-83ea9c16543c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b7a42e-a04e-4d9a-9dfc-b22ce012003d",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ca1941-3302-4364-b884-75bc652dd75a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        pm.expect(pm.response.json()).to.eql('true');\r",
                            "        \r",
                            "});\r",
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e0fd2133-30db-4497-8870-b5b0eaacdcdf",
                "name": "PysInsurance_SubmitOptInRequests",
                "item": [
                  {
                    "id": "4d0061ca-911d-4820-80d9-fb1221cb8d72",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77374442-f687-459c-86a8-d2fa55e9c3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49c7a20-a0d1-4af5-af97-8cb14867e3e5",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4c9975-db7e-4f5c-a4b3-86a66411f516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "108b610b-0499-4168-840e-01cd7a0ffec7",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538efe0e-3863-42a0-a6bb-af49d06f34d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"0 rows processed\");\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cfefcee8-41ec-46bb-b0f6-9e8022b1f625",
                "name": "PysInsurance_GetAccountsForPYSInsuranceCancel",
                "item": [
                  {
                    "id": "6ef116d4-28af-4dc4-a278-8bd0e1b3c23e",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176332fa-f830-455a-8107-4aa9dfccbb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "289a9832-056c-469d-b054-b71a7e8053e4",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a23faad-a2a7-4c44-bddd-4e1d21a6efb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d4e5fd-4ed9-4c43-9b9b-982779ef814b",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59830627-eba9-4ef2-9d0d-0dadeae4b67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "de146852-0a35-4f22-8f1c-b19301b3fb8f",
                "name": "PysInsurance_GetOptInDetails",
                "item": [
                  {
                    "id": "3105d571-5ee6-4466-a441-fa59bd066ed3",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b40259d-3122-4805-907d-cc762d0149ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a367e1bd-4815-4e18-aed0-7a55dd099c57",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5641e644-a339-4684-a92b-552131badf32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc870cb9-36e9-4671-80c8-0f4054057cf1",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "162577"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b7e8fc-1e17-4315-964a-d6af13146224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fc390819-e326-48be-8592-669dbaade20d",
                "name": "PysInsurance_UpdateInsuranceOptIn",
                "item": [
                  {
                    "id": "dfbe2dcb-2370-498e-863b-7e6bd1ac352c",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4430"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e2d669-001e-444b-9a50-874df9e4c3d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f871b97a-21d8-4455-8f5c-8a087fcd0601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f5da49-d2bb-4ce7-98a9-8cbd79173d4a",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4430"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf64aa0b-1c96-49ec-8e39-8b912f8a39cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33f2374-4074-4556-9eef-3f86d580f69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb515fe-edca-472a-8a89-3fa092408c77",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4442"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78410785-a120-4aa1-9376-455e0d680003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "891584d8-6f7d-4d15-8e14-63bef95406e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(200);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8f115f46-08f2-4287-b4fe-b5d176ef8c02",
                "name": "PysInsurance_DeleteInsuranceOptInRecord",
                "item": [
                  {
                    "id": "8cdadda9-c944-4310-8993-6875795b0bb4",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptInRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4444"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe13713-bdc5-4c4e-aa5d-7f69c9ecb372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6fd9877-5caa-4964-8162-f680f261ee97",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptInRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4444"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74bdf281-f426-41b9-ac24-29236b8d52d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "330b3095-4770-4911-8ae9-8cab6185c4e5",
                "name": "PysInsurance_DeleteAgedInsuranceOptInRecords",
                "item": [
                  {
                    "id": "bcbeb259-d9bd-4273-a442-84d62c57cd7f",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThan",
                            "value": "365"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d0c145-8c0f-4b1a-b90c-85671c30c9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4047a4-698d-4487-8dd6-d38ad15d0c31",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThan",
                            "value": "365"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314a084d-b4d1-46b2-a651-a7c1c19183c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "type": "string",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "key": "value"
            },
            {
              "type": "string",
              "value": "Authorization",
              "key": "key"
            }
          ]
        },
        "event": []
      },
      {
        "id": "0ec82b9f-6295-48ec-bd66-7b90ebbbf73c",
        "name": "LGIA.External.Tal.Helper",
        "item": [
          {
            "id": "d231a17b-c336-4083-a771-becdf30548e2",
            "name": "TalClientInsurance",
            "item": [
              {
                "id": "202ef106-8750-414c-bd8c-b2413adc6caa",
                "name": "No auth test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19bc0b49-2ccd-42bc-8d97-f5422426df1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No auth Test\", () => {\r",
                        "    pm.response.to.have.status(400);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "dd458dfe-173e-4803-8bd5-4514af168e97",
                "name": "Incorrect auth test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "apikey",
                    "apikey": [
                      {
                        "type": "string",
                        "value": "Basic",
                        "key": "value"
                      },
                      {
                        "type": "string",
                        "value": "Authorization",
                        "key": "key"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33480cc3-e67e-4d3f-a420-f635c15c89e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth Test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1280029b-cd60-4ca6-90e2-ad5824aea812",
                "name": "Valid test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "42c089ed-e2b7-437d-b544-c813c030d22f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Valid Test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "})"
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "594b3792-0c34-4720-bb85-163a76d78c4f",
        "name": "GetPmifDefInsuranceValuesAPI",
        "item": [
          {
            "id": "5e4f91a4-1335-4f04-bb8d-33bd994ad403",
            "name": "DefaultInsurance",
            "item": [
              {
                "id": "1cdc47c8-6f54-4a4d-99aa-3ccf13d48c76",
                "name": "Blank clientId test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "093c0d88-9af6-450c-bbec-20d22444f905",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "18b1a303-688e-4ce1-8aaf-ef0709b761f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank client Id test\", () => {\r",
                        "    pm.response.to.have.status(404);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "9e4118df-92ab-4815-8ed8-2ad5a85f06fb",
                "name": "Incorrect authentication test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a58e1f4-185b-4d79-b619-bffd56979f2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "610647ad-e4c5-405b-9436-dda030c32063",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "b8e50390-2203-4338-bfe6-6eac2b6601ef",
                "name": "No roles test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4bee8aa-067b-4a55-a60a-f97b56710a53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e489eb13-8d31-4851-9f58-ef4be58593ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No roles test\", () => {\r",
                        "    pm.response.to.have.status(403);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "52f1bf3a-95cf-45d9-a8b2-7519a8bdaf50",
                "name": "Locked User test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bc82e5c-bfb6-406e-bb2c-b2ea9251b418",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "911410aa-49d5-457d-9dd4-36b199d4dc99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "c1285bf9-0ce2-4775-a11a-b0441ee5fb91",
                "name": "New Users test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07b4fbeb-9776-41b8-991b-6cd84a83c836",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c5456c7-7b65-4dd0-ba41-823f617490bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New Users test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "21736d0d-a367-49b4-88d9-ce2ba4414105",
                "name": "authenticated valid  test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{TestAutomation}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "TestAutomation",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3300aec-4e52-4f19-af69-9282e4d690b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7eb0cfb-3c6d-4329-8083-74bd244ed845",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Authenticated user test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "3da6cb27-386e-4cf1-abee-92fab417c741",
                "name": "No account number test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11eef5f2-b820-4e4a-ab20-f0ee5a517037",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', 101004749);\r",
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "73dd6bd2-9f84-4800-9314-4a9decf70e6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No account number test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "4c02be48-d163-4a43-804c-f64780e07c75",
                "name": "No auth Valid test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5cfc277-3430-46b0-99cb-adc9bc0964bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', 101004749);\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbc5ca02-963f-444b-bafe-9ce3e4e9ebca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Valid test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "5259a1e9-07a9-4e80-8738-b228306f611b",
                "name": "New User test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f64be3bb-5e7b-4285-ac0a-b9b1a7ef2c81",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f3a8322-962a-4f7f-8148-35a3ca9e27ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "9149dc77-7648-4a13-840b-b0744a24d192",
                "name": "Incorrect auth test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0236028e-8521-435c-b5cc-4805d54eb5d8",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8be134ff-83f7-453f-a263-4b1eaf21f92d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "41c811d8-b9ba-436e-b6c6-7d30e1f09bcf",
                "name": "No roles user test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd84c1f5-6674-4c37-990c-bce1d6ecbc86",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd971b1f-2fc7-44e9-afeb-ce77a2e4cc75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No roles test\", () => {\r",
                        "    pm.response.to.have.status(403);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "d744765e-4597-411f-a37a-387452dcd4f9",
                "name": "Locked user test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1474430-3dc4-4b4a-9e66-a1cb120bfb92",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a493de22-97b6-46f0-9bdd-6cdbf0de0627",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "881e779c-d620-4fb9-a2d5-ddb5920f4ec8",
                "name": "authenticated valid test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{TestAutomation}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "TestAutomation",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73ed3f1e-3b4e-4dd7-b4e1-bd2cd822cecc",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19a7b4fa-90fe-4469-ad95-236944013ba6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Authenticated valid  test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "\r",
                        "    pm.expect(jsonData.data).length === 3;\r",
                        "    pm.expect(jsonData.data[0]) === pm.variables.get('clientIds1');\r",
                        "    pm.expect(jsonData.data[1]) === pm.variables.get('clientIds2');\r",
                        "    pm.expect(jsonData.data[2]) === pm.variables.get('clientIds3');\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "ba965933-c8c8-450b-9dce-8634165c17dd",
                "name": "No auth Multiple clientIds test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c718ed55-0473-4c42-a3b8-63d8ecd1df3d",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f2ba72b-1898-4407-b096-842b72bf8ec9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Multiple client Id test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "\r",
                        "    pm.expect(jsonData.data).length === 3;\r",
                        "    pm.expect(jsonData.data[0]) === pm.variables.get('clientIds1');\r",
                        "    pm.expect(jsonData.data[1]) === pm.variables.get('clientIds2');\r",
                        "    pm.expect(jsonData.data[2]) === pm.variables.get('clientIds3');\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "66427133-0538-464d-bf0e-44f9291235b3",
                "name": "No auth Multiple clientIds with duplicate test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b1fab0e-2e67-4a08-b64f-f429fad823ad",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101004487);\r",
                        "pm.variables.set('clientIds3', 101004487);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f13ec2a9-62fa-42ea-9d1a-1c73f889289a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Multiple client Id with duplicates test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.false;\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      }
    ],
    "auth": {
      "type": "basic",
      "basic": [
        {
          "type": "string",
          "value": "{{TestAutomation}}",
          "key": "password"
        },
        {
          "type": "string",
          "value": "TestAutomation",
          "key": "username"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "0d647cd6-81b3-4382-98ce-f7f44efa7152",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "1e239db8-562d-400a-959d-1f238d4e349c"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "2ad1d21c-617e-44bf-8aa6-1e19e570698e",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "4ae66661-7914-474d-bc66-3122017ab6a4"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "2021-07-14T09:07:42+10:00",
        "key": "todayiso"
      },
      {
        "type": "any",
        "value": "2021-07-14",
        "key": "todaysDate"
      },
      {
        "type": "any",
        "value": "2021-07-24",
        "key": "futureDate"
      },
      {
        "type": "any",
        "value": "2021-07-15",
        "key": "now"
      },
      {
        "type": "any",
        "value": "no client id",
        "key": "action"
      }
    ],
    "info": {
      "_postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01",
      "name": "RegressionTests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2021-07-22T05:58:43.124Z",
      "postman_exported_using": "Postman/8.8.0"
    },
    "id": "00a98a20-0bb2-4b24-905e-a9cf2e1c1167",
    "name": "intg",
    "values": [
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/einsteinanalytics",
        "key": "einsteinanalyticsdata"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/fileconversion",
        "key": "fileconversion"
      },
      {
        "type": "any",
        "value": "TestLockedUser",
        "key": "LockedUser"
      },
      {
        "type": "any",
        "value": "shfq6-WNdzdnWseK",
        "key": "LockedPassword"
      },
      {
        "type": "any",
        "value": "TestNewUser",
        "key": "NewUser"
      },
      {
        "type": "any",
        "value": "btsWeW$zMmhJIjy",
        "key": "NewPassword"
      },
      {
        "type": "any",
        "value": "TestNoRolesUser",
        "key": "NoRolesUser"
      },
      {
        "type": "any",
        "value": "paKAxSI7FAoO52U",
        "key": "NoRolesPassword"
      },
      {
        "type": "any",
        "value": "UTy3VU",
        "key": "randomId"
      },
      {
        "type": "any",
        "value": "This is a new fund name for UTy3VU",
        "key": "FundName"
      },
      {
        "type": "any",
        "value": "00D1m0000008lFX!ARcAQDCdBUCN1z27ixKDs2.IVaT8TQtNqHa9PNE1HLyjsl8Xgx1Vd7apCciBpe517mK1gW.Tpsvb2kmSBlodoEnjn0p0YJKZ",
        "key": "SFToken"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/ccm",
        "key": "ccm"
      },
      {
        "type": "any",
        "value": "b-VBed!By7suveYBbaL",
        "key": "TestAutomation"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/swift",
        "key": "swift"
      },
      {
        "type": "any",
        "value": "VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA==",
        "key": "AuthKey"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/ringcentral",
        "key": "ringcentral"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/sonatahelper",
        "key": "LGIA.Internal.Sonata.Helper.V2"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/GetPmifDefaultInsuranceValues",
        "key": "GetPmifDefaultInsuranceValues"
      }
    ]
  },
  "globals": {
    "id": "41a7251e-9e2e-4e0a-8c2b-7b1c64a1c231",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 6,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 59.333333333333336,
      "responseMin": 25,
      "responseMax": 120,
      "responseSd": 43.0219582177391,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1627010101153,
      "completed": 1627010104106
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5d085ca8-78f1-4fff-a64d-a47c22d94db1",
          "httpRequestId": "cf7627b7-3cb6-4b98-855a-d340ed02db3c"
        },
        "item": {
          "id": "bcff11e3-669e-4d0f-b043-0ff8f0fb25b5",
          "name": "No Auth test",
          "request": {
            "url": {
              "path": [
                "ClearImportData"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8b1de45b-e3f3-4359-9b7e-80966a0aa5f7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "\r",
                  "})"
                ],
                "_lastExecutionId": "e3e07c3a-781b-40e2-bfbb-72c1d2b90139"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "ClearImportData"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "df12d7d6-122b-403b-89c4-504f67566e70",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "417523fe-8ac4-4d33-9574-1dc12217289a",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:15:02 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 120,
          "responseSize": 0
        },
        "id": "bcff11e3-669e-4d0f-b043-0ff8f0fb25b5",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "997a7e06-eb40-41d9-b810-87b3f37b3d80",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "33aa641e-7d7f-4f73-9acf-69c3c502614c"
        },
        "item": {
          "id": "37da9b98-3d14-4e59-a07d-589a36308b7b",
          "name": "Incorrect Auth Key test",
          "request": {
            "url": {
              "path": [
                "ClearImportData"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "Basic",
                  "key": "value"
                },
                {
                  "type": "string",
                  "value": "Authorization",
                  "key": "key"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "585babb0-7191-44c4-93cb-9877a4998d12",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Incorrect Auth key test\", () => {\r",
                  "    pm.response.to.have.status(401);\r",
                  "\r",
                  "})"
                ],
                "_lastExecutionId": "95275983-8274-4a07-9379-fd99f12623df"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "ClearImportData"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "be701e88-2fd1-4839-872a-f3b679bb21c2",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "Basic",
                "key": "value"
              },
              {
                "type": "string",
                "value": "Authorization",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "d2b56b7b-679d-4757-ab4f-4f0a4a1241ad",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:15:02 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 25,
          "responseSize": 0
        },
        "id": "37da9b98-3d14-4e59-a07d-589a36308b7b",
        "assertions": [
          {
            "assertion": "Incorrect Auth key test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1830f542-2824-4252-b86b-1f8ed0bb53fc",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "05d91028-756d-4fe9-8621-d995bdd9bb34"
        },
        "item": {
          "id": "aa1f7d58-98b7-4890-adaf-abe949938522",
          "name": "Valid test",
          "request": {
            "url": {
              "path": [
                "ClearImportData"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d518c5f1-399d-4902-9487-cf18ccec569c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Valid test\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "    const jsonData = pm.response.json();\r",
                  "    console.log(\"Length of records: \" + jsonData.length);\r",
                  "})"
                ],
                "_lastExecutionId": "e81339a6-de4c-4c65-b45b-b6002b3427f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "ClearImportData"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "339657e7-f35f-40c7-a693-dcbafc76754d",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                "key": "value"
              },
              {
                "type": "string",
                "value": "Authorization",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "fa356774-12d4-4227-b3d8-74f7cc63461c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:15:04 GMT"
            },
            {
              "key": "Content-Length",
              "value": "4"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              116,
              114,
              117,
              101
            ]
          },
          "cookie": [],
          "responseTime": 33,
          "responseSize": 4
        },
        "id": "aa1f7d58-98b7-4890-adaf-abe949938522",
        "assertions": [
          {
            "assertion": "Valid test",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 4
    },
    "failures": [],
    "error": null
  },
  "consoleLogs": {
    "1830f542-2824-4252-b86b-1f8ed0bb53fc": [
      {
        "cursor": {
          "ref": "1830f542-2824-4252-b86b-1f8ed0bb53fc",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "05d91028-756d-4fe9-8621-d995bdd9bb34",
          "scriptId": "d518c5f1-399d-4902-9487-cf18ccec569c",
          "execution": "e81339a6-de4c-4c65-b45b-b6002b3427f1"
        },
        "level": "log",
        "messages": [
          "Length of records: undefined"
        ]
      }
    ]
  }
}