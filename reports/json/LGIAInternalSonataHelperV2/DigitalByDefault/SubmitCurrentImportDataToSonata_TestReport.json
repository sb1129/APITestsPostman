{
  "collection": {
    "_": {
      "postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01"
    },
    "item": [
      {
        "id": "6303df02-0b4e-410c-959a-d24e7a71da72",
        "name": "CCM",
        "item": [
          {
            "id": "85989c3d-6359-4678-947c-da052b8529ec",
            "name": "SwiftEvents",
            "item": [
              {
                "id": "80dd54f6-a58b-4bd7-b548-b33c871aeada",
                "name": "PullDataFromCsvFiles",
                "item": [
                  {
                    "id": "a259ed2c-b45f-4daf-869d-8f1f59ffd5fb",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa09d7a-9398-442f-b2ce-599ee15f6bd5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "65de591d-674d-483b-bad9-7893c4414177",
                    "name": "Username and Pasword incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2816e5ec-68aa-4f51-81c4-237372e21668",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecd4675-da08-4cdf-a1bf-602b3d36a8b5",
                    "name": "Username and Pasword locked ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7a4d75-8c07-4d45-a0e1-affb9f071bb0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Account Locked\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca58bdfe-acdc-4da4-94c8-3bac83849d13",
                    "name": "Username and Pasword new account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a290fa99-b31a-44b8-a9ec-600342ca082b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4eb46ae-c224-4b92-bb32-ee9a5bb0cb97",
                    "name": "Username and Pasword insufficient privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e8f0f7-d136-425f-8e1c-357995fa5332",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfa4648-75b5-4fb6-9be7-c9872cfac80f",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f5929c-1c5c-4864-a310-24f62586122a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('PullDataFromCsvFiles[SUCCESS]');",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c4845407-bd21-43df-ba90-bd40c6c1b889",
                "name": "SyncSwiftEventsToSfCampaigns",
                "item": [
                  {
                    "id": "df92029f-53df-4f50-901c-8b4ad0194d60",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9ec0f0-6816-4808-9195-ffd846907653",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "663c318b-3286-4e57-ae5e-ddb82a503d8f",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3004d176-22b5-41c2-9794-0fdf93d065f5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "916a9cf8-e076-470e-ae3f-94492097ea87",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50fae4a5-3309-4518-bfea-6f0ba5bee63a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f10ecea-6c6b-4349-9da1-aa6ae650daf5",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62b321e-5d2e-4ce4-aaf3-884001474ea2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd10d746-1d34-4906-b64b-e216e7935f9b",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f1848d-531d-4c37-9ca4-b2f74b917664",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a322705-94bb-4db9-90da-7e6ba4d0c2f0",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce5add0-11de-49e9-bb44-34fe8a060c68",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncSwiftEventsToSfCampaigns[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "863bae3e-f189-4555-9018-3174e74b9731",
                "name": "SyncOpportunitiesOrLeads",
                "item": [
                  {
                    "id": "d850d768-eede-4352-9ab1-7a059b6e1b6d",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d191154-a9f9-40bc-8fbd-41765d371bb0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e99da39-6db3-402b-a4c1-07c2adc4b1b3",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a86ae2-2f1b-4da9-b0eb-b9457b3b87f3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5f25aa-4ccd-485b-b8fc-7b110afcd151",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1bf968-b46e-40e4-9a54-07537926d68f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c7ab21-8fad-4e5a-a70b-69fd6c0ac001",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0474e71a-c360-4344-ba0e-3d1aa191b29e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac0e326-f7b7-4756-b4d6-24b082b4b1aa",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7c25d1-5fb0-4453-af47-d4760cfa6504",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2592a256-c792-4bc8-8451-e148a7544eac",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599cf573-d205-415c-bde4-7c8acdddb698",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncOpportunitiesOrLeads[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c49ec7a-7226-477c-8758-2fe1695b5510",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "588baa44-cdb5-4520-b8c7-c568e27c8732",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "e22936cb-9bfc-4b08-a5ec-c4222e1f1e26",
                "name": "SyncRegistrantStatuses",
                "item": [
                  {
                    "id": "e0f20cb1-18fd-4c8d-937e-b3c26ae72c50",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2365e5d9-f8e1-4f47-ba39-c7ccddeb68ed",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "54939e09-1c48-4c42-b19c-77b0d55051be",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841374cb-4024-4c98-aca5-25ecfdf195bb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff84623b-35a2-45ef-bf32-c4f8c67c3803",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9703021c-2b01-42bf-bec1-d17cb8caac5c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "617f82a5-7ba5-482a-80a3-513879e333dc",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4f5b03-b0d5-49e3-936f-3ebfa1b440f9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0590889-326d-4d85-8efb-13320ad4b4cd",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a0ecd2-b113-4fc4-9f06-118a0481c60d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5703f4c2-9971-424d-affd-ef05a649a0de",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07be97d-6935-4d35-b87d-78338e39a472",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncRegistrantStatuses[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1e56125a-2d9f-4300-9a85-59f4a6e78a83",
                "name": "AddConfirmationInteractions",
                "item": [
                  {
                    "id": "10d40d99-a5c1-4633-af93-5a65ee39fe3f",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df2a064-636f-41f1-b0e0-e9120d209a73",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac342aca-77d4-4fc2-99e1-8cb092a06834",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3161b7-39ea-4f42-a3d4-08fd901993d0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef33916e-3ec0-41df-93c8-e902942c2bee",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18022f8-4fec-4496-a93a-1fcbcfbc9cc8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "52950d6e-521f-4a45-8cda-379709bd2672",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25eddb20-f510-48d3-a316-f280ee0b285b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8c248d-e358-4f98-8b8f-30e88879554b",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e77215e-6bea-49c2-851d-9c7a29e70440",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37cb228-b61e-4469-8fe1-bcdaeb24a7b0",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9915433c-8a38-44f0-9550-af583a81a8e0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "38face8e-a19b-4076-be1b-1e3db15b8e6c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7c92fe3f-d43d-4299-b146-efc6311775c3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "4c824c05-e2a8-42bf-ac93-83cc8cbcb3fd",
            "name": "Corresspondence",
            "item": [
              {
                "id": "5d7d8ac6-e87a-4e98-bbb6-22126a0495bc",
                "name": "SyncInteractionsFromEngageOne",
                "item": [
                  {
                    "id": "3b78187d-4cc0-42cd-86af-693bd61b7244",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "561e4eee-c35b-457b-8398-5f0e0b996362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e891655-b765-48ed-84c8-0c77dddd9257",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913b6290-3f89-429e-84ab-6ea8dc9ec883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "609f97c5-65c1-486f-b332-2f3a247fb002",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705c8802-1e85-4705-ade1-a4b0081bb107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e569dc6-e992-419f-8c3c-365e12c38d08",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce71e3ef-9d57-4a6b-8750-9f3d3d15e1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No roles assigned user Test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f791e00-ec7a-4b1a-8441-9ef3633a0e33",
                    "name": "No Body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cc0091-3578-4e81-b7b7-5f8a1c927d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Body Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"A non-empty request body is required.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f491aef3-c630-4ab3-a882-e964002c0c2b",
                    "name": "Blank date",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\":\"\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54cd9e19-012d-4695-af71-86f0a8cde943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Blank date Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"String '' was not recognized as a valid DateTime.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1445d9f9-7273-4a83-b84a-f9978bd257fc",
                    "name": "Date not found",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97df7bd3-e31a-4874-aedf-15025cdc82ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71a0d41-ccb4-42d1-988b-a0751b0d7a43",
                    "name": "Invalid file format",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8165323a-d3cf-4dc7-9ff4-278aea470c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "string",
                      "value": "{{TestAutomation}}",
                      "key": "password"
                    },
                    {
                      "type": "string",
                      "value": "TestAutomation",
                      "key": "username"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f232a25c-7203-4cca-9c7d-9c730834801b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f5ed44b-e2c4-4021-a3e5-6b3d59ccb8c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb6a9afa-8be2-4b43-a91e-d0ccb1d277b4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cdf96f7d-6e00-4e6a-8753-f32e5291e1bd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "052b79a6-fbf5-4b2e-88d0-9b2240dbef87",
            "name": "Actions",
            "item": [
              {
                "id": "d96517f4-3ded-4ca3-a0b1-866bbed19612",
                "name": "AddAction",
                "item": [
                  {
                    "id": "20360f73-3f77-4746-9cc8-98c980dedccb",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e080fea-b9c7-49ab-9f84-a15906914d52",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c23be5-de40-45e7-8461-87f0b5f79265",
                    "name": "Incorrect account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ac4876-80ba-474b-b017-920cdae24765",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8644acd-b787-4991-be0a-fa51cb3d4dbb",
                    "name": "Locked account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809084f2-661e-4835-b9d2-c931a2e20d79",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea2deed-aa48-4726-ba8c-d91de60c76ee",
                    "name": "New User account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3ea259-5d6d-47ef-9251-5fe43c7a45b2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New User account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "22240da3-b47e-4bec-b619-d74f7b0ef831",
                    "name": "Empty Strings  test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"\",\r\n  \"action\": \"\",\r\n  \"actionDate\": \"\",\r\n  \"status\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebdaea3-3d68-4311-8ef0-8019f26d768e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action is required\");",
                            "    pm.expect(jsonData.messages[1]).to.include(\"Status is required\");",
                            "    pm.expect(jsonData.messages[2]).to.include(\"Action date is required\");",
                            "    pm.expect(jsonData.messages[3]).to.include(\"Source system is required\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85ec756-c4fb-44f6-852e-dc18a3cb0dc9",
                    "name": "Incorrect source system test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"Ring Central\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c42dd8-9895-42b0-a6b2-12b81aa720bc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect source system test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value Ring Central is not allowed for field Source System\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "473eefe2-7e89-4248-bf74-45953c72f0c5",
                    "name": "Incorrect action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"$%#$%#$^%#\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d276fe97-9645-43f2-a0a7-13b079edaa8d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe92830c-ca5a-43f0-8be7-8661076b59dc",
                    "name": "Incorrect action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{incorrectDate}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a211f0-0aa9-4443-ba76-2e282fbfbdc1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Date \" + requestBody.actionDate + \" is not a valid date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2340807-5ee6-4b88-982e-1971c3418637",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "incorrectDate = moment().format('DD-MM-YYYY');",
                            "pm.variables.set('incorrectDate', incorrectDate);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec750c33-056e-49f5-afb2-9c15789906ff",
                    "name": "Future action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{futureDate}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9f71b8-041b-4b0f-9e69-f206050a4b3a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Future action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action date \" + requestBody.actionDate + \" cannot be future date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10cef33-bcdc-43b3-8255-89aa3415e36e",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "future = moment().add(5,'days').format('YYYY-MM-DD');",
                            "pm.variables.set('future', future);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0e14e4-eb57-49f2-82ce-9648358a027d",
                    "name": "Current action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd318ce8-c49a-4f79-a24c-862497be501c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab48b16e-df03-41f1-b083-2c2a543c3be2",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "674188b5-0181-4f13-a7f6-c7be6f812b13",
                    "name": "Incorrect status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263e7b1b-6694-4ceb-91ec-fd63bce6bccc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value \" + requestBody.status + \" is not allowed for field Status\");",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117af95a-622a-413f-ac36-a4a6d42ab6c7",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5bf869-95dd-475f-a798-1c4e5d923c08",
                    "name": "Valid status action started test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc19c37e-8dcf-44d0-9c6e-80f1c20bfeac",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2c4c0a-68dd-4507-9ea0-e6622e79d87c",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "151a8339-4a4c-4212-a8e8-6e73a831ce2b",
                    "name": "Valid status action completed test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action Completed\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb641ada-6820-4bc9-8019-dbd5b8cffd04",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbb1dff-6f65-41bd-9e88-289c6656f378",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf6c45a-00a9-4501-9640-a5e32e502614",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"SwiftDigital\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4a4618-428f-47ae-beda-4f15ea98a2d5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db759c34-f38b-41b1-ae5f-e9051e1825cb",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "074df3a7-e8f1-4d45-a182-205cd8f016d6",
                "name": "AddActionV2",
                "item": [
                  {
                    "id": "6ea79470-8e01-41af-a368-9dc001433a52",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d30e6e-c4cd-4673-afa5-abce0a8f7604",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3f5a30-d162-43ec-97bb-00e6f489fa2d",
                    "name": "Incorrect account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5895ab98-3af4-4a4e-8eae-431d4ce4e07f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8591a7a3-da06-431b-b402-8aa9b62f5ee5",
                    "name": "Locked account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92211fa4-0482-4bec-9aca-d0ded39ad11d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5052717f-cb9d-485f-ab3e-3f3314dbc83e",
                    "name": "New User account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ff8e64-3b8d-4297-894b-6442d17c7fae",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New User account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27d9229-96a5-4a04-8ab0-70dc2e0bc70a",
                    "name": "Empty Strings  test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"\",\r\n  \"action\": \"\",\r\n   \"actionDateTime\": \"\",\r\n  \"status\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2429adde-032c-421b-83da-d2cf2e541ab1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action is required\");",
                            "    pm.expect(jsonData.messages[1]).to.include(\"Status is required\");",
                            "   // pm.expect(jsonData.messages[2]).to.include(\"Action date is required\");",
                            "    pm.expect(jsonData.messages[2]).to.include(\"Source system is required\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1354e302-a1a3-4ff0-b44a-6c418871362a",
                    "name": "Incorrect source system test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"Ring Central\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2ce578-b393-4763-ada1-6ff7ddf9bb6a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect source system test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value Ring Central is not allowed for field Source System\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cfd5504-38ed-4053-8e4f-593d9c9ba5f1",
                    "name": "Incorrect action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"$%#$%#$^%#\",\r\n \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4561dd7-7cc4-463d-aff4-81319e31d927",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2931e45a-ab27-4ca0-8a4b-17da7c78af80",
                    "name": "Incorrect action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{incorrectDateTime}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94c2852-44d0-4f3b-a1b6-9e1354e58df4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Date \" + requestBody.actionDateTime + \" is not a valid datetime\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93686a20-2feb-4bcc-bc53-3901c234366d",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "incorrectDateTime = moment().format('DD-MM-YYYY HH:MM:SS');",
                            "pm.variables.set('incorrectDateTime', incorrectDateTime);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bef8082-ed38-41c3-b03b-60f58fb533e3",
                    "name": "Future action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "V2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n   \"actionDateTime\": \"{{futureDateTime}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1635c9-fd3e-4a39-b762-d03077456156",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Future action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"ActionDateTime \" + requestBody.actionDateTime + \" cannot be future date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d0768f-2ee0-426e-9708-b5059a01521d",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "var futureDateTime = moment().add(5,'days').format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('futureDateTime', futureDateTime);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9eb9b8-0561-4a8c-926c-58c504fe3ab5",
                    "name": "Current action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94ed277-4d10-4f49-9d78-a5a663ff465b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d5e46e-cc6f-42ae-b4c9-39c1656181ef",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "db439354-ace6-438b-8e83-67991d84681f",
                    "name": "Incorrect status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916ccc0d-0275-4396-a364-e2259968260d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value \" + requestBody.status + \" is not allowed for field Status\");",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0158ddf9-232f-45ad-b0ac-7f575cd9d435",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD HH:MM:SS');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "db01de9c-c5e3-4063-ab19-d16f6e3bfa54",
                    "name": "Valid status action started test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4946393c-c013-4ff9-97c7-0beae5bd114d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b47a8f2-2b4b-4aa5-b242-7143403582f2",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba361d0-3cbe-442f-ae14-4f1f418c2404",
                    "name": "Valid status action completed test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action Completed\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff92548f-fba7-4869-8e35-e14c92f9edc6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8434103-7f0f-4158-9c28-1a30b7ca273f",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "99eb5047-4d44-48ea-92c7-a82517b6cbfa",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"SwiftDigital\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e8c004-8667-4e66-8839-fa05407aaabd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7016abf-63d2-4c41-b857-cc5ec1807dce",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a25529e9-5ea9-48ea-951a-6ba999211bec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5e3ff1b-a75f-4334-aec8-c6c3d014e985",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "6effb729-f53a-4b09-957b-13245152b03b",
                "name": "SearchActions",
                "item": [
                  {
                    "id": "f88a5dbd-9f66-4069-9a13-57e15d0a1bbe",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddf439f-c386-4c3b-9ce5-9fb6cfc1aec3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "53012aa3-45ee-4076-95d4-242d460139f3",
                    "name": "Incorrect account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a4cd19-da50-4c41-8bbd-fe51a71a4226",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "10427bb6-d3de-45ae-aa51-aa6f051b8533",
                    "name": "Locked account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d29521-ae2e-40cc-9bc3-a8a3d37c1709",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b7c866-8c4c-4707-b685-3d6c2a061145",
                    "name": "New account test ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3623e637-eb1f-4e1d-89da-4f6284f2b202",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8dea400-641c-4dac-bac1-89da826be123",
                    "name": "Only client Id test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501\r\n}\r\n\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ce172e-a643-4d5f-9c6b-02cf50624355",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only client Id test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36c861a-8b4f-4650-aef6-2ee4bc5d2f05",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4107b6a6-709f-4860-b5d9-0676a689208c",
                    "name": "Only action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \r\n  \"action\": \"{{action}}\"\r\n\r\n}\r\n\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aebfe8a-ca42-4bbf-98e0-34344243e0c5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab69e33-8223-4960-9de2-32047270a58d",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31c327f-9e9d-4252-8ea7-b3b56d0c0238",
                    "name": "Only status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\r\n  \"status\": \"Action started\"\r\n\r\n}\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8cc534-31b2-462f-affc-14912a55d40d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2baafcf2-6e8d-4c20-a92f-68b1f0a7a181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02b0d6f-7122-437f-ba5a-0c5358456c50",
                    "name": "Only page size test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\r\n  \"pageSize\": 2\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "161f0099-443d-4b66-9fef-e1cd059513f5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only page size test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfa5c50-56ae-44b9-b49b-73bf81d86d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f8e6bd-3b6b-43e2-8bbc-d24c1a819ecc",
                    "name": "No body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2bd383-b5ea-410a-b6cf-cc630a50b5d6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.false;",
                            "pm.expect(jsonData.messages).to.include(\"The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true. Path: $ | LineNumber: 1 | BytePositionInLine: 0.\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d74aae-a25f-4ba6-b571-4ed653641744",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b233499-7eba-4bb0-969b-b66a648986e1",
                    "name": "Blank body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\t\r\n}\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ace8d5-0baf-4b48-8adf-6c84af7020e9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Blank body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c753f2-6bcc-428c-a0c5-c8ef1c9227e9",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6facc40f-d460-46b4-848f-c676f60585d8",
                "name": "SyncActionsToSalesforce",
                "item": [
                  {
                    "id": "57cd58cc-6406-455d-bd5f-b72cfe87c75d",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1155bfc1-a166-4a26-b9f2-52320d0c50fa",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a840c8f8-f268-4e60-a065-61e07f10eeff",
                    "name": "Incorrect account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ced5cf9-eb2d-4897-8c34-4e0c07a47c11",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76b66e0-0aa4-489c-9036-7ad8f1fe7daa",
                    "name": "New User account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ed94b0-8d0a-48de-aa65-ec99ca450be3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "39020a6a-8f49-403a-b340-a3fa48862252",
                    "name": "Locked account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7139d107-6571-464b-91a4-56ec6b295191",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9544985-cfb1-4697-8db7-929b9c999dcb",
                    "name": "No access test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3885a005-dee1-42f5-99d2-94382bccfd60",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No access test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7928a2bf-c5f1-46f5-aa9a-0f2e8289129f",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59dc425-49d9-47d7-b0f6-f6f257f04427",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No access test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.include(\"SyncActionsToSalesforce[INF] Sync complete.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21dffd8c-4e74-4c1d-b995-2703e2009f32",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb9c0029-bd67-4ffe-9012-00f3eb1a5857",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ea5c9fa7-860a-48c3-a142-11b24d1d1506",
        "name": "EinsteinAnalyticsData",
        "item": [
          {
            "id": "8b8778d0-99aa-48df-8a79-ff3956b547be",
            "name": "Einstein",
            "item": [
              {
                "id": "f9fc6aa6-6084-4398-986b-fb3c7eab73f6",
                "name": "ExecuteSPEDWHerokuMembers",
                "item": [
                  {
                    "id": "bf558892-771a-4cf0-83be-d18d7d5570de",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8307a053-a7ed-49ce-a4e9-1c99acf83c5c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c586b307-62fa-4bfc-9666-d82638e7092a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "48edfdde-4a30-4865-a812-a871057f3c2c",
                    "name": "Blank stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624b6e8c-023d-4d81-aef9-de3fd1f516d9",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Blank stored proc test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7f4889-03b4-43ef-9bba-2976af583bbd",
                    "name": "Invalid stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[usptionSFMemberAnalyticsFlat]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92db4fc7-94c3-4460-8d52-8056c2b9b860",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Invalid stored proc test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"Could not find stored procedure 'wrk.usptionSFMemberAnalyticsFlat'. [wrk].[usptionSFMemberAnalyticsFlat]\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b9fedd-eab1-4d0b-a10e-a8310fbfed9f",
                    "name": "Unauthorised access test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1f76a7-ea63-40aa-80e7-1be7bfb6c8bf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"Unauthorised access test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb9b7b4-e997-48ca-83d3-0fd9e1a42a9c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"test\");"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "71af42d4-b81d-4649-b1af-ae9cce823905",
                    "name": "Blank body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9062764a-95a7-4d99-b145-0b8ee66d15e9",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Blank body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b7bf12-f19e-4f73-8dc5-65215e7b5cec",
                    "name": "Another valid stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAccountTransaction]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7f5c95-03fd-4091-8d5b-7f33c6006609",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Another valid stored proc test\", () => {",
                            "    pm.response.to.have.status(500);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"Procedure or function 'uspIntegrationSFMemberAccountTransaction' expects parameter '@startDate', which was not supplied.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0b408b-712b-480a-8346-4175b2731f72",
                    "name": "Valid ExecuteSPEDWHerokuMembers test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAnalyticsFlat]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0694646a-2e96-49ea-a72d-757a3ea64348",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Valid ExecuteSPEDWHerokuMembers request\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d36e0449-d854-4fc7-a2ed-5546c4eb4687",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4ebf3717-f728-4625-9c9b-b24c76f74f56",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3136550f-4fd8-4c19-9a7f-e55e99c4c5a3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b17141d-521f-46a5-8921-cef156c73464",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "650fea9c-573e-47bd-87a5-7af6cfffb323",
        "name": "FileConversion",
        "item": [
          {
            "id": "9bf26576-fd49-4e62-882b-715b2cbd1a42",
            "name": "NasFile",
            "item": [
              {
                "id": "896ec815-c3a1-4dab-91ea-0b38aa97effa",
                "name": "ListInFile",
                "item": [
                  {
                    "id": "44c94748-5f66-4166-8767-a8f17a008dcc",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1526a279-6feb-401c-a3a5-be86a54744c4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d7d01e-3793-42d6-afd5-6c4ad7404a85",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacb7a37-7832-4bc1-9fe9-d671c30c1499",
                    "name": "Username and Password not provided ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30d006f-e31b-4498-a97b-06987fe61082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36003c68-1864-49d0-9497-a0111ffa83d0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ecb5e8-724a-4f97-a72c-b653a90319a5",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31efb1f9-1a73-4d8f-8caa-a1218fd28306",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0b0487-c2aa-4ae1-9ee0-c5fdc92d4b10",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a54cf3f-836b-47c9-b960-e0ef72cb8a86",
                    "name": "valid list in files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": ""
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a43f7c-5b26-420a-9e98-fe26a76a52ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\in\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName+ \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a98fa8a-291a-47f4-85a3-a6b4f1ceea6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "89ad97ed-c528-4aef-9729-a0587f80d0ca",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb00af0f-67e4-4a3f-8e1f-62d5162ea1b4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec21a2d-5dcf-4ca9-89c3-7e09c1f9c95f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "845751d8-9f8d-4d49-9bc9-13467eb9d482",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f49163e-2645-4d93-ac78-929127d9a457",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b0e0a3-1eb9-4790-ad31-10eafa633711",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea673dd4-25b6-497d-b152-14922b917306",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba3d7064-cf1f-4be1-b4f8-4329fc6762ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "8c847dd3-e018-4d74-9079-0c6717c2f78a",
                "name": "ListOutFiles",
                "item": [
                  {
                    "id": "45a65ff5-91e9-4ae2-990d-1e40b6c7ea89",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b47d0d-c4d9-41c9-97a8-835defe9221d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a24bbb-20d2-46c0-a469-feb0ce493775",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6f418e-3c48-49f4-b0d0-ac35b2dbe8a4",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143674bb-6bc4-4ad4-9493-a38380e3fa08",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81cde27-98bf-4c92-b05f-6c31c8bba167",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f120c3bd-6c02-4c32-916d-a9d7d11097d9",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2a0a1d-22eb-4fe5-86d4-97cf27e20822",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c3f478-589f-44d8-9737-e608e50539c9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e46f8f8-78ca-4cb9-9eec-79aa8ca5b872",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e87827-8c4d-446e-a641-4f3bf2dcdae9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1a0d31-61f7-4457-ae11-0cd0a8469d14",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2d3b7a-7b0c-4e7e-8972-ed5f611d1848",
                    "name": "Username and Password not provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a244440-35f2-413b-8144-ae1a489ef53a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a62a8f-fcf8-4be4-896e-6068019a093b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebc816c-e7d0-4c1d-bb5f-72bf919d6fdb",
                    "name": "valid list out files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFIles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": ""
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ab12be-46f0-42b4-9904-a7473b20c8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a3320d-02e2-47c9-9c01-54648a50c78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list OUT files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\nas_staging\\\\out_staging\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "314c280c-7d95-446e-8bfe-c6dcd7448b15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f3f9891-9378-48bd-b090-ac8431cffa8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "4bb76fe4-f784-4128-a340-f120482ef8fd",
                "name": "AddInvestmentOption",
                "item": [
                  {
                    "id": "98f03b8c-624c-4b4f-865d-e7d15059d8bb",
                    "name": "Only Fund Name is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundName\": \"ABCD\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cb163b-dc01-44aa-a7fa-c60d55ee8a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Fund Name is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac75431f-10d7-4095-8222-ace53775c32d",
                    "name": " Only Nas Fund Id is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"nasFundId\": \"QL81\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff78f6c5-1333-42c3-a9c4-9d29d1dba008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Nas Fund Id is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a0a35d-8d14-41e0-bd07-79fd54702371",
                    "name": "Only Fund ID provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"fundId\": \"QL81C1\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9fc0cea-426e-4447-a342-455c1ed4a38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When only Fund ID provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Name should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6e2097-1160-484e-abf6-6812e2b321ba",
                    "name": "Duplicate Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL82C1\",\r\n  \"fundName\": \"New CITY DB OPRTIONAL RISK RESRVE\",\r\n  \"nasFundId\": \"QL81C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8eebd0-5920-4b08-beae-19f9e1b05b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Nas Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8c688f-ca8c-4971-a18d-cbe8d385970e",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "user",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "user",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d48a70-1240-462a-8871-36fe3e8e4eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50505073-3c37-4637-956f-25de8984a5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Username and Password test\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e092bccd-0278-4a90-b38c-8da1b1d5bebd",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7355d3-47bc-4e2e-a5be-44f6e7c75f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5129d0-d426-49db-81ab-1827c1f0043f",
                    "name": "Invalid characters in Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"@#@{{randomId}}@#@#\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97276ab1-2086-4144-8b8a-be894f48c8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0767659e-941b-4ac0-8e46-c7850f2dc25d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf103a1-a402-4eee-9ea6-d8af3710713a",
                    "name": "Duplicate Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"QL81\",\r\n  \"excludeFromUPFile\":false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cddd3ad-e682-41f1-b821-f913522be5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca3c77a-a22d-4ece-8dc8-21456663b1cc",
                    "name": "User with no access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671d04eb-f3b3-4d2a-a468-38b4fd16a9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e19c2d-ace0-42cb-b45e-9e966da4e530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"User with no access\", ()=>{",
                            "    pm.response.to.have.status(403);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "599a3479-dad5-4bc8-814e-c360181a9e61",
                    "name": "User locked",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3432ddb0-115f-4ca8-a5d8-c6cd40e7d1a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d06ac15-8828-4ee2-8b9c-17867e145f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked user\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88d2ca5-ac49-49db-83ad-8e8814c1f019",
                    "name": "Invalid characters in Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"$@#${{FundName}}#$#$#\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a82219c-9555-4653-8dd4-4f7441a32269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund Name test\", () => {",
                            "   console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        ",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3d4695-a062-4fea-b0d2-494385d58d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3e6055-1fea-478f-a151-2b5e0436fac4",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc18051-4098-474e-88c8-681ad4878ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e68eb24-9e21-4b33-a5e3-6d41ee2f8964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3140dad-69b8-42fa-9fe0-ab7439ecdc3a",
                    "name": "Empty Request body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e05b456-6361-4c27-8f42-20d645c2870f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty Request body test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "46342270-e003-4a3e-b8b2-b6a18b928e68",
                    "name": "Empty input fields",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"\",\r\n  \"fundName\": \"\",\r\n  \"nasFundId\": \"\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3affbb18-d522-4248-adb2-cf5bccf93e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty input fields test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb422f3-ffff-4340-b069-14920625aea2",
                    "name": "Invalid characters in Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"%%{{randomId}}#$\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99dd8bd5-3218-49f1-a4de-2efb2ff88937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f357df-d765-4093-a1c4-2b6e7f031354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a61539-f1e3-40d6-8b4d-51e24381056c",
                    "name": "Valid all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5141c25c-563b-496f-9a1b-e76ff098b34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All valid parameters test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c10d6d1-3817-4701-8e12-4ebc28467b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c394f8c-29cb-45c7-b9b8-1e6458cd44f7",
                    "name": "Duplicate all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"LG AGGRESSIVE ACCUM OPTION\",\r\n  \"nasFundId\": \"LG18C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b70d926-b8c2-4e49-9d9e-908dce03dd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All parameters Duplicate test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    ",
                            "    pm.expect(jsonData.response[0]).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Correct message validated: \" + jsonData.response[0]);",
                            "    ",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Test completed\");",
                            "",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89d293f-8d8d-4b0b-80c8-8a136fc38911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cb3941-6b1a-49bc-8ee7-e10b6d310cf6",
                    "name": "Duplciate Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n   \"excludeFromUpFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad36c49-b7b4-425c-983f-57cb079e700e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "  ",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a56e1e-3b8e-42b0-ac93-3ac4beddd944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "445f2061-2114-4bec-8028-91f240d2a9b3",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b131e8de-b2cd-4642-82f9-9277dfe60052",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "e268292a-0159-4cc5-b248-a8b85b59de72",
                "name": "DisplayInvestmentOption",
                "item": [
                  {
                    "id": "87a91d1d-a4dd-47a4-907b-60dec55bb04e",
                    "name": "End  to end test - exclude from up file true",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8288ae7-84ba-4865-852e-ed9fba7d890a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(true)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd702f7-8dac-4f8a-a0aa-816deca4de40",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: true",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fa4488-176c-4488-a226-01e99c28229f",
                    "name": "Valid  FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0a3217-14ee-46b2-9281-321a77dd9413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Nas Fund Id displayed is: \" + jsonData.response.investmentOptions[0].nasFundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f320e46-74ca-455a-85e8-485c3507090b",
                    "name": "Valid NasFundID and FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundId",
                            "value": "LGGBCY"
                          },
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e40248c-78e1-4b58-98bf-6ff4622d9126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundId\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundId\")) + \" matched.\");",
                            "    }",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "84dd5fce-e513-43e2-98ba-ac9516d42733",
                    "name": "Non-existing FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fadb6a8-bf7b-4221-bbff-34e043d78603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bf29f3-4f6b-4a5c-a45e-2ea6bf24512d",
                    "name": "User with No Roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "353c8ad3-ca8e-4795-ad2c-d534094ca0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "34359fc0-b637-4410-9c9c-b1fa58ba8757",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d377d37-f5da-4120-bd66-c502c36c1885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f412a70-4196-402c-b7b0-666e8bbe23ce",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "GBCYC1"
                          },
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6164b8a-701b-4375-a5eb-3872ce1dbe51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c457a3-ebae-4823-8525-3fe071321b59",
                    "name": "Incorrect username and password ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "incorrecty",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "incorrect",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a32c78-49d0-4821-b3f1-0236fc755c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "539863f4-39ca-4234-aef3-8974f77ce971",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ee8ef3-b98a-4b3e-b09f-2849eeeb05a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f61f03-d00a-467a-8a9b-fb94b347c521",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c3fa96-0663-40bd-8f67-ae500823d9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "02bb9bd7-5d59-43ba-98cf-5d4a3e78e47c",
                    "name": "End  to end test - exclude from up file false",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5fb91b-70c7-4857-90f8-559b6f28d07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ea1323-10e3-4813-875e-ced881b90e31",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: false",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25774a7-365e-48ee-ad32-e6f98af19b53",
                    "name": "Blank Parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "637d7f32-bee1-4068-847a-fd8cd8d24465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const length = pm.response.json().response.investmentOptions.length;",
                            "    console.log(\"No of Investments options records:\" + length);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4029fe9a-b5b5-4fba-970a-83585507c9e0",
                    "name": "Non-existing NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a212f10d-5242-4d61-8995-7286efec237e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9267980b-44ff-455e-b64e-52a31333e715",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec91837b-117d-47b8-89f2-811d344cd01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8a9183-c218-4cbb-80f9-98b45facf1d4",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d71ac7-389a-4336-825e-ede951cbb1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b79cf2d-8d4e-44a8-bacd-2f67f71d36d2",
                    "name": "Valid  NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "LGGBCY"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d775ff-9933-463f-8041-bc70f2e080da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b2ff379-aa63-432a-b5eb-01edf0e86a11",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1de4956b-b94d-4ae0-adcd-35ad73dc9e00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "5a742ec4-37c0-439c-8826-7f2ef411ca36",
                "name": "RemoveInvestmentOption",
                "item": [
                  {
                    "id": "bf79b355-9159-4927-a0cd-c43c8a13e942",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95a7064-4a64-424e-85be-2c6f007109c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a16f17-147b-4a8c-9229-9c8b5faa302c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb85b588-a201-48b8-8007-8c5715091392",
                    "name": "Incorrect username and password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf9f0d7-e472-450d-acb4-077032b1846f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb568822-8aca-48cf-a3f5-0b5e6b94f8ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "78749528-0bd6-4abe-a5e6-f47d77fae9a0",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44358cd3-4045-4b21-a903-f271833a14cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484383b9-c382-4e7e-a356-947e7aa67a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae76f02b-a537-4317-9653-cb81b0997b38",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f80f1fc-ddc4-42c5-a7a6-e7fec0f88c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79686d96-cdc5-4dec-8e85-d72e7eb02eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "887ea3c0-79bd-42b9-b01d-820e73d1c655",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4886cc3-e224-44bd-8a36-cf368429b55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3aef88-3a72-4964-884a-08f8337dd1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ba95d4-4558-4510-80a4-5c9c6438e6cb",
                    "name": "Blank parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": null
                          },
                          {
                            "key": "nasFundID",
                            "value": null
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fda7649-fbe9-4916-8990-15dadc006540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response[0]).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "    pm.expect(jsonData.response[1]).to.include(\"FundId should be provided if NasFundId is empty\");",
                            "    pm.expect(jsonData.response[2]).to.include(\"NasFundId should be provided if FundId is empty\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6b1afd-dba9-43d8-8a39-b0539a606f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bd4029-bfc1-45e3-abe8-22246a6fc0e3",
                    "name": "Non-existing FundID ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f31f02b-d799-4776-95c4-70479a019532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f78584-f19e-4979-8954-6951c8310f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86a3354-1dce-47ff-b075-f35885b3eb7c",
                    "name": "Non-existing Nas FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f2d3a0-293b-42cf-8d1f-97d15828fc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07dbab47-b8a6-43b8-a026-6c391e165f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ca2242-470c-4226-8228-1acffc2a4a80",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b51d37-76da-419b-8193-cc77d14b5f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf10bbf-ceb5-4317-8dbc-abca641377ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa80fb1c-0ce1-4aa5-88e0-2f7df0698f72",
                    "name": "Valid FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "374bfa02-a41b-45d2-a4b7-34b0202b6bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId =  successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad94bc5b-3ba6-4736-bfb3-284d0b44903a",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e73a665-97ae-49b9-bc01-0353af4efff1",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5f6b15-fe78-452f-b097-b83d224663bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b01f709-8508-4016-9618-71b0dd140826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3ca84a-9c83-42c5-8ea7-356527319f76",
                    "name": "Valid FundId and NasFundId",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac41cc3-a814-407f-941d-6406531b2126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08c2ae2-4ace-43c5-b9b3-d6af62963457",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9b030e-9a74-4a0d-b1f5-fe744b16709e",
                    "name": "Valid NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58c30b4-df05-42e9-bbe6-7e3f3f501631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = , nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb38b4a2-a7b7-464b-9d3f-8b46bc5b26c8",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdcdd864-5526-4074-98d8-cba3021f3fb6",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30bc856-874b-4b5a-bbd1-8595810884b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f229c3a7-07e0-4c21-b16a-8d5429588f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a58b0f6-5acf-460b-ae9b-d56d6bcce7fa",
                      "type": "text/javascript",
                      "exec": [
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f97eda04-ff8e-4082-be4e-8c51fd44d1bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dfe7ad3c-2911-4f8d-814e-1b43f0a02fb7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db671d6f-aa8f-4152-9573-1a2b3aa82fe8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "648594a5-f9aa-40e7-8787-4f923facd1d0",
        "name": "Swift",
        "item": [
          {
            "id": "96bd925e-4884-462d-b5c5-1a6ac5be5781",
            "name": "SwiftFolderConfiguration",
            "item": [
              {
                "id": "0810b145-8aab-4b2d-8aa3-64042ad31487",
                "name": "Addfolder",
                "item": [
                  {
                    "id": "281e0723-c1ba-4b67-9d85-4d3262d21553",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937e89a9-2da8-4560-b14e-446384805b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "c7728dea-83a2-4a27-8c2f-d1debc661675",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16505374-a953-4b3e-ae81-7a09b3f17d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "013a0b08-bb4a-4a8a-84ec-39356601ed7a",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90d54f6-bd50-4c9c-847b-7a01e0c2298f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "508e8612-01b2-486a-ad1b-5d68275de588",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048f6339-dba5-41cd-8fa3-333201218232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "57f90048-039e-490b-b2ec-28c6ef380781",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bcf0f0-0155-4b64-bb8b-6df4afb5edfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(405);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": []
              },
              {
                "id": "049e08af-3f12-4a4b-bc4b-f62e0ccfb9e4",
                "name": "Listfolders",
                "item": [
                  {
                    "id": "21962714-4eca-4214-9617-94f54a85b279",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fc44e8-97ba-466d-b375-d9b5999dd430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdf6a5d-a899-4098-bbac-82eb21ad8b05",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803157f1-c151-4076-806a-336de5897800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4f7ed2-8b1b-4561-a792-1e890e5eb777",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e98c3a-c602-4505-9804-f17a7d66e881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e1e46f-1bcd-47a0-9852-c16828b79448",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84b435c-dd9d-4340-892c-c39b05e2a2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1582017-bcc3-45c1-95a8-c820224de9cc",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a8f50c-89a6-46e3-b1f3-235541a34976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af211be-cb69-46ef-8de9-57b842f70626",
                    "name": "Valid list",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44eee91-bfe1-48cc-9ef7-ce3203c73779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    ",
                            "    const numberOfRecords = jsonData.response.swiftFolderConfigurations.length;",
                            "    ",
                            "    console.log(\"Number of Records:\", numberOfRecords);",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e87be19-2747-4a32-93e0-f90214b3c072",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89a38c01-9e35-4162-b333-699770fbd314",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6a8fd853-2ac3-4f89-8c90-c21328ec9121",
        "name": "RingCentral",
        "item": [
          {
            "id": "b5971a03-880f-4abf-bd8c-74e900660822",
            "name": "SyncCompanyCallLogs",
            "item": [
              {
                "id": "1ac4afc5-8903-402c-b44e-9f5282fea509",
                "name": "Date time exact value with time zone ",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-07-12T14:10:26.2410000+10:00\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58e06e63-27c5-4324-aabc-e4f8a47cbedf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Date time exact value with time zone Test \", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb0353b7-b7fb-49a6-a27d-1fc5eb16eaee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "cb3e075f-a77f-460f-b9a5-7afa3560c2cf",
                "name": "Delta sync",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcd89d34-50d3-479d-a969-5fcda66a1eac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Delta sync Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + pm.collectionVariables.get(\"todaysDate\") +\"T00:00:00.0000000\");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fca775b-0b3e-44a1-985f-a9630e6288cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "51f5674a-8cb8-4e1a-91ee-03eeaa81791d",
                "name": "No auth",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f9c0831-8326-42e6-bc0f-b124a4aec008",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No Auth test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "0bdbac3d-0c70-4462-8567-9dd1d8135436",
                "name": "Incorrect account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bef21a36-08ff-4870-b8af-8590f9aca6f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "77aee974-58df-4b6e-8352-8e8c2ab7c3fe",
                "name": "Hours ago",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "219e415a-1e0c-4956-ad19-1655f2fdd41f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Hours ago Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3881ba72-039c-4d51-ad00-e14b553ad5ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "f15f2ebf-c133-47d2-921e-291ba2759415",
                "name": "Locked account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "099de122-0fad-4a29-a4a1-0ee70fbcbad4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "51d7245b-e975-441c-915d-c6367e0c2b3e",
                "name": "New account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7189155f-9d21-4b04-afac-18efefd2bfcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "9a7eddf9-b694-4ba9-90ab-a5477f74eb76",
                "name": "Sync all logs",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da49449c-11fc-4648-ac8c-c9b0ac5024f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Sync All logs Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e16f63b-5ab3-4773-afa3-65aa26042f5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "15501f75-7751-4fd2-b092-9ed097dbbab6",
                "name": "No access account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9682ff62-1dd5-48f0-b696-04a4c2dc36b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No access account test\", () => {",
                        "    pm.response.to.have.status(403);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "937a7c44-1ecb-4db4-83b6-215d5112c15f",
                "name": "Blank body",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84ff6081-abac-4402-89a7-f34e29a8158e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank body test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"A non-empty request body is required.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "cdec28f8-d5b2-4857-bfb4-f6b5d3594707",
                "name": "Negative pagelimit",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": -100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc9a2f6d-dcb5-4e1e-b66e-5e6075574a06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"negative page limit Test\", () => {",
                        "    pm.response.to.have.status(500);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"An unknown error occurred. Please contact support with the trace identifier included in this response\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.not.be.empty;",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22242e71-2c7d-4c14-9f4b-20d1faa1dc60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "faa68320-3cac-4d42-aa0a-f3b37c173135",
                "name": "Blank date from",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13897a54-c2a2-4580-81bb-60f1bfab59bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank date field test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 16.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "8742e304-5232-4ac8-85ee-cf6d9385297c",
                "name": "Blank date hour",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": ,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08490338-f0c2-4b3f-966a-7733890c3bc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank hours test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"',' is an invalid start of a value. Path: $.hours | LineNumber: 2 | BytePositionInLine: 11.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "6b298d3b-f81d-4b37-8fc8-ed2b670ab2c8",
                "name": "Negative hours",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": -24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b9abf79-5ec4-45a6-a4fe-f3aace6cc1b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Negative Hours Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "   const requestBody  = JSON.parse(pm.request.body);",
                        "   const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf4d3c2c-451a-484e-ac8f-78703b2dca53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "967ceeb1-b70a-4ed4-b3a0-a4145c47b9b3",
                "name": "Blank date pagesize",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": \r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a95b82a-f514-477f-96cf-38283d60cdb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank pagesize field Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"'}' is an invalid start of a value. Path: $.pageSize | LineNumber: 4 | BytePositionInLine: 0.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "50eaef41-5153-448f-9ff2-d60e4145b007",
                "name": "Invalid Date From",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"12-07-2021\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ea27dcc-3980-4873-a925-3e1c67ada6a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Invalid Date from Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 26.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f37be4d-ec22-4318-8812-a1bebe137122",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5d37683b-9dca-46bb-b253-cfa73757391f",
                  "type": "text/javascript",
                  "exec": [
                    "const moment = require('moment');",
                    "pm.collectionVariables.set(\"todaysDate\", moment().format(\"YYYY-MM-DD\"));",
                    "",
                    "pm.collectionVariables.set(\"todayiso\", moment().format(\"YYYY-MM-DDTHH:MM:SSZ\"));"
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e390e2b-4e50-4f0a-88e2-8c3c76bef0a4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1aa612f8-5c5d-4a30-a968-b50285c3109b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "36703ab2-d3f3-473e-844e-e34a4ec28841",
        "name": "LGIA.Internal.Sonata.Helper.V2",
        "item": [
          {
            "id": "e8ff81c1-9a82-4179-9f0a-7ce60e0cf56a",
            "name": "DigitalByDefault",
            "item": [
              {
                "id": "bc62213f-409b-4d6c-88a0-d9179ea6e54a",
                "name": "SubmitCurrentImportDataToSonata",
                "item": [
                  {
                    "id": "c33beb54-b2bf-4980-9be1-e903a7091c28",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4421956-0392-41c5-afb6-d64a064d5418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "})"
                          ],
                          "_lastExecutionId": "433096b1-baa3-4d24-9a85-0fb158a38bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bf3b98-fb54-4bc3-8837-ce976f7ac61f",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dded81ba-baec-43df-8c77-635f5c311d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "})"
                          ],
                          "_lastExecutionId": "aff9ee72-3340-44fb-9493-149038ac8f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b921e2-9726-4975-a314-67a136416066",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31864e86-b8db-4f3c-a521-91aa157bbbfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "",
                            "    const responsedata = pm.response.json();",
                            "    ",
                            "    pm.expect(responsedata).to.be.true;",
                            "});"
                          ],
                          "_lastExecutionId": "ba25c4ae-bbd1-493f-afa7-06d056a95d1a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "316e2ff9-a353-4537-bb63-63fad2d2e656",
                "name": "ReduceCurrentImportDataRows",
                "item": [
                  {
                    "id": "535b932f-1a65-4f1a-b40a-77d696000d62",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0881bae-f416-4126-87a4-290afc90fcc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "384e9ed3-e670-4517-adad-e79b8d95f7a1",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "10"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "464e62ee-8fe0-4250-913f-3fd8adda67ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2cbc13-ff04-48e1-87bf-9db1ef89b138",
                    "name": "Incorrect rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "wewetwetwt"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4286f0db-5ada-415e-946a-2e1dafb763f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect rows to keep test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"The request is invalid.\")",
                            "    ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8237061-5dc3-4969-b35f-5f68cf4d48a3",
                    "name": "Negative rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "-10"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "316100d0-6bff-41bd-915d-f2fc62f45ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Negative rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.false;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "058da5fb-8d95-4d8a-9095-8d6041de2b09",
                    "name": "Big rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100000000"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b2cb68-3b8a-48b5-98d5-db5930fe43a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Big rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.true;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3ed082-2b19-47f8-a942-f1c025931d11",
                    "name": "Zero rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100000000"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0448d85-296d-4520-9c96-59e54ef00aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Zero rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.true;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6866bd-7c32-4e4c-99f2-c27a4bfc9136",
                    "name": "Blank rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73d9de9-2a1c-4c18-ad49-fd4d6518bb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Blank rows to keep test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"The request is invalid.\");",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e4c1e8-1976-4606-b06b-3b302c89ace2",
                    "name": "No rows to keep test Copy",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad15bbeb-2977-4b14-8018-4dd163fe1338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No rows to keep test\", () => {",
                            "    pm.response.to.have.status(404);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"No HTTP resource was found that matches the request URI 'https://intg-mcro.internal.lgsuper.org/sonatahelper/ReduceCurrentImportDataRows'.\");",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e593828-3964-40f6-82ba-251148bda199",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b2672f-661d-4f31-b550-2f03422f151e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    pm.expect(jsonData).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "71a0ff59-76e2-46c6-90c0-9a0a432663d2",
                "name": "ExecuteSPBulkImportData",
                "item": [
                  {
                    "id": "f3818c53-8f0c-4f2d-824d-c8ee647f72a0",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5f0a1b-a0ec-4b27-840f-d44b433f6c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1e81c6-4aca-426d-aa4a-602cb7d17c76",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b925b2-7e34-4a22-a701-49451dfee35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "59171fb0-7930-49b5-8c8b-d56ca824c03a",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d795d787-05bd-4185-991c-d5b381bd8e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32dea017-4a41-449f-812e-676822816b5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9661a19f-d590-40d4-bbc8-b5a6fe1c60b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "26f53e57-143f-461d-8a30-adddb5dec917",
                "name": "ExecuteSPDailyImportData",
                "item": [
                  {
                    "id": "f6c6a2be-4c80-4044-8914-ac24d875b3fe",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPDailyImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb196cd-2750-43d4-bb7d-fae52579649d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7539a38-3dac-48a8-90c4-0db05024ed1c",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe676f0-b0ab-49fa-9c2c-4a7b28dfb954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f031f158-4cdb-4ddd-acc2-2ce22097747e",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPDailyImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7954c86a-3bd9-4c05-aff6-067abc96a0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfe56845-af84-462a-8deb-9186e24377f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43030ee3-977a-47af-bf25-5ddea40e9a8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "e83236d5-7f36-4541-bb50-fc843c97895b",
                "name": "SubmitBulkImportDataToSonata",
                "item": [
                  {
                    "id": "99cc553e-60d7-4336-97cd-dc2b84971088",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4093ed80-3c08-4448-8eed-53cecc979270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd441f5-c495-44ff-9f0c-aa7f8c7f9a2c",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5163a0-39c1-4ecf-96bb-85ec1da41b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39dbaa9-045d-4d41-8007-7fcc7188f0f6",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbf2497-9ff5-4030-a4e5-5667fdef93d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0ac49c5-56c7-4258-8544-4323560ffcea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97ff1d5b-96e1-4d74-8856-f42a6168a8a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "9f69509a-c349-4892-99f5-b0414f35ae78",
                "name": "SubmitDailyImportDataToSonata",
                "item": [
                  {
                    "id": "13e188c4-f9a8-4762-9a43-732477294348",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b885808-d54f-40a7-ad66-fd8a3f1e4b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "085638b4-17dd-4cba-bb55-80fdf0c0eaa3",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48cfa3d-8922-4064-b717-d7ecbeb4784a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9840facd-411a-4b21-b42f-5d962ac241ea",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5b04da-9d86-4f67-a93e-f09e01bb3354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    pm.expect(jsonData).to.be.true;\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56824b14-bdb8-4411-ac41-44be53954b96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "15a3aea0-ed64-416a-9678-040023fa7ba7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "c40feb62-2618-4b54-b57d-215d625d032c",
                "name": "GetCurrentImportData",
                "item": [
                  {
                    "id": "e2918bc6-54d7-4719-b47b-aee47c9e4d7d",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9165e70b-c856-430e-a652-562e4a46832e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6373c5-db86-4ef1-a76d-4794f959a10d",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1e4176-8231-42bc-b91b-49a94665c752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "742a1bdd-ebc8-4af3-bcb3-1df01e338ab8",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e593370f-ceca-4361-9563-6897e5e3ef0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06cb1ea1-ef99-4817-8330-02ca8c717b93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a4c391c-968e-4af1-b91f-817fcef3c775",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "b3fc48e4-4a55-4d05-a419-3cb524c1a2c0",
                "name": "ClearImportData",
                "item": [
                  {
                    "id": "0046b3ca-9c9f-470a-8c57-5010e601b4bd",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb7cdd8-de71-4e46-a5a4-6da8bb3b225f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec28983f-7195-4958-8c96-915f537f9f40",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85cbb77e-9de4-4f9a-9c5d-8ebe63ab4a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "12eefde3-3757-42d9-8642-9f4931004848",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea06a70-6311-4725-8a20-8e4cefbb0529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6aca78e-2fd3-4340-ab5e-70f8cbaa713d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc79aebb-4e22-4550-b79b-8aa3febc0627",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "fb743e0c-1187-4da1-aa8f-f380b562642e",
            "name": "PmifInsurance",
            "item": [
              {
                "id": "b37f60e7-ee94-4b13-a3d7-4fd185757621",
                "name": "PmifInsurance_SubmitPMIFOptInRequests",
                "item": [
                  {
                    "id": "8e3e4967-3c95-49bc-94e6-319d1c6c93e0",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "835872a8-02b9-4c2c-85f0-9e602eb9a201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db6279e-4f74-4d5a-a8cf-22491befe1cd",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61d8940-e045-4f11-be6d-76198192cf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa4ab5f-f511-493a-a0f8-e8743e4b8057",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b1cb07-6de2-4152-acfb-b0c96521d2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid test test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        \r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4fd340f2-90ec-4fda-9342-52b157493518",
                "name": "PmifInsurance_DeletePmifInsuranceOptIn",
                "item": [
                  {
                    "id": "d173340e-2e08-4526-922c-6a9fc359a198",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "3016"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b3453d-f198-48ec-9ddb-801c33d5f07e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5007331-3cbd-49f3-a04d-2400400c3a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0970266-b1aa-47c8-815b-2fe1eef1966f",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "3016"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7984d561-bf1c-4ad7-ad3c-c10b81e19178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1e1824-424f-4f32-a1de-efbbae87580c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88f0205-b8b1-4d63-ac16-dc75444eafbe",
                    "name": "valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "{{optInId}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59729abd-0014-4dd0-abd8-70c38477a73d",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Create insurance record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112e3f55-1862-48e5-94ff-6417ece353c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
                            "\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "549f1edb-1c73-4798-903e-5f1e982e8492",
                    "name": "Special characters ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "@"
                        ],
                        "hash": "@$",
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5cef394-9416-4f07-a168-3e6fdc9d43be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea27650-6bf8-48bf-b68e-083064c719ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Special characters ID test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Message).to.include(\"The request is invalid.\");\r",
                            "\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "90068615-ea3a-49be-92e7-3f25da3e050a",
                    "name": "Non-existent ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "0001"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94c9a49-7fe3-413a-9f83-be3bafa12105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec82a823-8a53-4368-a425-a185ff38eca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Non existent ID test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.false;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "58bf05db-db7c-4e4d-8f8e-69a4ef814389",
                "name": "PmifInsurance_GetPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "df061ccd-d9bc-4138-816e-f48fc9b61455",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "154176"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40eafb23-aa6a-44e6-b7aa-6ee231b8f35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee417ac-d7d4-4359-a19f-bb2efe50c46d",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "154176"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd18bc4-b48f-485c-8f7a-0ec0319c41b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1eed38-1998-4273-bffd-4d5b63be449b",
                    "name": "Invalid ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "0001"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4bad23-7c6d-4ea8-a7ab-a271b504a138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.OptInRecords).to.be.null;\r",
                            "        \r",
                            "});\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdbbba6-169e-4163-bd85-21296f8d7f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5639f47-90e9-427d-bada-e32fcac4c46d",
                    "name": "Non-existent ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "!1!1"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7dfaba2-6471-4841-9d37-8707d445cec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Non-existent ID test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Message).to.include(\"The request is invalid.\")\r",
                            "\r",
                            "});\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f7a543d-b729-4059-a4c7-a81582d17b4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f035219-8525-4a27-ab80-9fc0b7acf581",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "{{optInId}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15c2aa6-8c32-48f6-9a60-62f1a7340af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.OptInRecords).to.have.length(1);\r",
                            "        pm.expect(jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID).to.eql(pm.variables.get('optInId'));\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "\r",
                            "});\r",
                            "\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56db6bb5-55bc-4ede-a0d5-82ead709300b",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance opt in record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3644243b-a59e-4f97-8120-0f89aaaf765c",
                "name": "PmifInsurance_GetPMIFInsuranceAll",
                "item": [
                  {
                    "id": "5baca099-c2c2-4a7d-b32a-2f7153272cae",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37805c41-cebb-454a-9cc3-0ef39fa085cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1794f89c-6875-4550-9228-776672d75bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9257158-cc21-4d86-ad0d-fd33580443f2",
                    "name": "Incorrect Auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403a9876-2fd7-4fcc-a6bf-1d717bb441e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112abaf4-995c-413c-bbe6-d9024ac623c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc112127-b734-4198-ad05-266246560499",
                    "name": "Valid asc test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa824e11-7caa-40eb-b857-a5a41e2b01b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e54842c-9d28-4eea-99f7-845e4fcfbfe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        }\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "de035fce-c289-467b-be9d-a93aeae0b7bf",
                    "name": "Valid desc test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9b25bf-8366-42e9-aa88-273f7b8e6225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', false)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e46e900-3cc4-4e79-baa2-fe885e33185b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        }\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "726dffbd-c43e-4048-a05f-f0baa75f3ae9",
                    "name": "Valid one record test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3c3786-8d91-4cb4-9668-2daec6701f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 1);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e43954-24cc-47ac-9b11-d9551bffeccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        \r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        } \r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b4e07d83-e9f1-4731-b15f-e5040a9b657b",
                "name": "PmifInsurance_UpdatePmifInsuranceOptIn",
                "item": [
                  {
                    "id": "736fc508-1e97-42cc-a8ba-1c479c0e3be7",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe2a7cd-b3f9-405c-a690-200226e31bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbefd77-c801-4b41-9119-9e2ea65a5b5b",
                    "name": "Incorrect Auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ed4d8a-820c-418d-b209-cced38f4fd64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "eecbc9fe-21c2-47f8-87d0-99889f960190",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": {{optInId}},\r\n  \"ACCOUNT_NUMBER\": \"100002222\",\r\n  \"SOURCE_SYSTEM\": \"CCM\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d98f876-1d44-4b63-8442-169e25b50173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 row updated\");\r",
                            "\r",
                            "        const getRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'GET',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(getRequest, (error, response) => {\r",
                            "        console.log(\"Record fetched\", error ? error : response.json());\r",
                            "        const resultId = response.json().OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(pm.expect(resultId).to.eql(pm.variables.get('optInId'))){\r",
                            "             console.log(\"Records updated correctly\");\r",
                            "         } else {\r",
                            "            console.log(\"Records failed to update\");\r",
                            "         }\r",
                            "\r",
                            "        });\r",
                            "});\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });\r",
                            "\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2ce42d-f6b3-4c7c-999d-bf61ad1674de",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Create insurance record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "899d5ea6-ba7a-4836-8535-9448c74647a8",
                "name": "PmifInsurance_DeleteAgedPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "411351fe-1d5d-4123-bc9e-038736391fb4",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a43303-9b73-4b6e-acbb-f1256af3fd20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3205181f-28bb-4096-982f-c168f8920bfd",
                    "name": "Invalid auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c99bccc-08f0-4846-bedf-9fb4481a1a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31b22dc-6d67-4c36-8ad1-500f4be534ea",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "{{days}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78dc9eb-cc04-4c44-b8f5-1fa805e46ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"0 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
                            "\r",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae196d8-6447-4c52-9966-b97507af5a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('days', 100);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a28cf7e3-304a-4fe9-8511-86e2f4581109",
                "name": "PmifInsurance_RecordPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "32b3ad17-2df9-4daa-9fd6-d26f4854c19f",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906e1241-7268-4997-95cb-8625c62ed72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ed90ed-afb9-44b5-9f6f-8ce547e9ca09",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2c2642-e0c3-4631-9dda-9ccb46c00f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5bbadc-33b9-4af1-a286-97c68aec0651",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d945c0-5640-4354-b0fe-5659c8ad6a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 row inserted\");\r",
                            "});\r",
                            "\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });\r",
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "03a466f1-50d8-477b-b223-9f531c38c990",
            "name": "PysInsurance",
            "item": [
              {
                "id": "664ef799-af64-4799-a8bf-2f7f494d4169",
                "name": "PysInsurance_RecordInsuranceOptIn",
                "item": [
                  {
                    "id": "a6e266b1-5fc9-4305-ae82-831cff27c320",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4eb14d-dbb1-4927-bd12-d214cac43624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "defca8a7-bfe9-4900-bce1-1e52207c191c",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8215792e-453c-4f0f-830e-cd8330df7759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26f6e28-f7de-425f-a83e-0fd0dced21f5",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ad0514-9a8e-466d-b3d6-ccd612f2ef6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        pm.expect(pm.response.json()).to.eql('true');\r",
                            "        \r",
                            "});\r",
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "95d71981-0c9b-4ef8-a0fe-dd9eca458f42",
                "name": "PysInsurance_SubmitOptInRequests",
                "item": [
                  {
                    "id": "05fe5bdd-6301-4452-b1e5-dee588e7420d",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4add62-54b4-453c-86a4-51ebf7cc5a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4cb0cd4-0f8f-43b8-b9ae-62a412abc53f",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f150fc7-aaeb-4976-9119-2462f546284b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ff53f8-9d2c-4384-80c9-92699db7afe0",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41a8b94-1512-430f-8cba-36fdd234e606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"0 rows processed\");\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4a261a6c-700c-4fa2-9818-49dea1f4ef09",
                "name": "PysInsurance_GetAccountsForPYSInsuranceCancel",
                "item": [
                  {
                    "id": "e886d4f0-72b6-46da-98e5-634180cec61a",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8949b772-774c-4ebf-bab5-f8c2176f2568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdac2118-8a96-4d09-9efd-e8c32f8c0eee",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e591d4-3bc9-43d2-93df-4079f54f2694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2d2728-921a-4314-bb97-336918b0e9e6",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945ac321-68ec-4499-905a-a06dbcfbc7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9b2427c1-9d06-4249-baf1-bbde2794ffa6",
                "name": "PysInsurance_GetOptInDetails",
                "item": [
                  {
                    "id": "055a907c-ae1b-4802-8608-d905958cba3f",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c473a3e0-a05b-43e4-9dce-c9bdba32d653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "acab2c40-a078-4a20-9641-fdadd59146d9",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e4bfa4-7301-407d-a975-830b2ba0f119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "339b65f4-2a09-412b-a391-2accddaacff9",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "162577"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbcb2c2-5cae-4af0-97c0-fe447ceac301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "456977df-12b4-4beb-84f2-0fc47e39cf59",
                "name": "PysInsurance_UpdateInsuranceOptIn",
                "item": [
                  {
                    "id": "a760b8ba-ce25-402f-ae50-105c6e76e1aa",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4430"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ab6029-bc5d-4d1b-9c34-f8dc48b68931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2254e11-65af-4d64-bc08-d84009ff31fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "860478ba-4cf7-4c89-85c6-2cf6de80196b",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4430"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81091984-7458-4be6-a0dd-5ea397d536f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbb0535-d867-4d2e-9eff-98213d38d914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4563e28-c836-45e0-96ec-bd138d26ad1d",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4442"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55818e2f-be37-418c-a8b5-3532b42a4281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3be11d-19a5-41de-af1d-c70475ae6e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(200);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a296a4d0-724a-4205-b149-00565ab73b7f",
                "name": "PysInsurance_DeleteInsuranceOptInRecord",
                "item": [
                  {
                    "id": "ec4e5938-c2f4-4e3f-8dfb-47a2c4be7e01",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptInRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4444"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da805ed0-058c-40de-a844-155030882902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "508799b8-1b81-4cb4-9cbd-5bdfe98d76ba",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptInRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4444"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "009f4703-5f3d-4a59-bd08-d7638663bb11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3545c6da-4f85-4ec2-910a-3ad782197e14",
                "name": "PysInsurance_DeleteAgedInsuranceOptInRecords",
                "item": [
                  {
                    "id": "c3578525-39e3-45af-a82d-207fc088a69c",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThan",
                            "value": "365"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9532417-74ec-4481-b53a-7c6016d90e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f3c4ff-4482-4612-a2e0-e04242baa587",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThan",
                            "value": "365"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98449825-3927-46ff-b4c9-0d6ca2a43971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "type": "string",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "key": "value"
            },
            {
              "type": "string",
              "value": "Authorization",
              "key": "key"
            }
          ]
        },
        "event": []
      },
      {
        "id": "44532993-1755-4ca4-ac48-e6c2a4723af2",
        "name": "LGIA.External.Tal.Helper",
        "item": [
          {
            "id": "f47e29ea-8e6d-4ef1-8a40-41d266b2eade",
            "name": "TalClientInsurance",
            "item": [
              {
                "id": "e267d1cc-d7af-435c-b7da-46361416942c",
                "name": "No auth test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98504d37-6bd1-44cc-be9d-f08cfb8a23c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No auth Test\", () => {\r",
                        "    pm.response.to.have.status(400);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "77e76566-d556-4ec7-8e6e-46ea507d8725",
                "name": "Incorrect auth test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "apikey",
                    "apikey": [
                      {
                        "type": "string",
                        "value": "Basic",
                        "key": "value"
                      },
                      {
                        "type": "string",
                        "value": "Authorization",
                        "key": "key"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ccbdc70-fe42-4eb5-ab69-91e2c409ecb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth Test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "72728af2-d73b-47fd-920a-094dad3667b0",
                "name": "Valid test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cdcfa25-4331-4a8a-95ad-5193a256c9a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Valid Test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "})"
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "3ac2b739-501a-458d-b3f4-c32a1a56097b",
        "name": "GetPmifDefInsuranceValuesAPI",
        "item": [
          {
            "id": "52a088cc-3624-4e63-983e-8858113aeb5b",
            "name": "DefaultInsurance",
            "item": [
              {
                "id": "0042bdf7-d0db-4217-92e2-f6ccad658c16",
                "name": "Blank clientId test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21d6d7e8-3939-4aeb-a13b-d761be1ddf8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72a1efd2-f5d0-43c9-8058-e5941cf03488",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank client Id test\", () => {\r",
                        "    pm.response.to.have.status(404);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "76fac66b-a63e-423a-a888-b92be5421160",
                "name": "Incorrect authentication test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4dd00e32-ca2f-4fdb-826d-a400dcfc186e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69bf71e3-3078-4a63-92db-ed6d4d351f2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "6f8ce1ca-23ab-4bd4-9f4b-164dfa46146a",
                "name": "No roles test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2084f2e6-2294-4396-9e10-ff3ac1a6c6c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfa07dc5-7849-484a-aebb-12fa9e8fece3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No roles test\", () => {\r",
                        "    pm.response.to.have.status(403);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "c7cf21e4-66d3-4d0c-ae50-99744f28bfd0",
                "name": "Locked User test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9b9161c-af4c-4be4-b04d-4c1942208638",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c51a3c1f-fc1a-4110-9da0-c91a4bca8b44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "ae163967-8c34-4948-9f34-5f580a0b3d18",
                "name": "New Users test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06827fdc-7ed3-4e08-bacd-14c18b69eed1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29f13aa2-266c-4fba-a8e0-c04b7ced126f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New Users test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "9aed44e6-b8ac-41b9-8638-4910d0724870",
                "name": "authenticated valid  test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{TestAutomation}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "TestAutomation",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0821f690-40b2-4ed5-9d37-c31860c6983b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53ad6cd3-06bb-4d02-8d79-6bbe1829f6e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Authenticated user test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "49598f34-60e7-4bce-b27c-7c507316e141",
                "name": "No account number test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "008287de-51e0-479a-a0d1-48c971dcdf2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', 101004749);\r",
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9ddc2f0-6b42-42ab-8ff2-283275dc9c89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No account number test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "b8fd773f-f353-42b0-b90a-8bca620fab1e",
                "name": "No auth Valid test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "746a80f2-e2fa-45a4-9f3a-793222e39c1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', 101004749);\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec9ac852-3eb9-40b4-b450-59797982bd17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Valid test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "697c6a37-70f7-4858-889a-30e82de1e995",
                "name": "New User test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fe8f25a-9900-4ac7-84e2-2b531289d11b",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e10087bb-b1f5-4661-a5e5-60ac008d25e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "5ddc8e57-19b2-4bcf-aa1d-4db385f03768",
                "name": "Incorrect auth test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0aa50aba-f20b-44c5-bd67-617240fea7a6",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "14f980e7-49fc-4aca-b9d9-4ff875bfb00c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1ff4ba2b-16db-4a24-9b55-6994f485ee41",
                "name": "No roles user test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "538cd15a-f53a-4309-80df-f037ed147d62",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5866b45-0b80-41fa-941f-36f166092222",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No roles test\", () => {\r",
                        "    pm.response.to.have.status(403);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "dea3783c-b12f-4a90-bbc6-b79e4fbc139c",
                "name": "Locked user test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8330ead-8b88-4466-8391-939447a24d6f",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "977d1d2c-28b0-4f30-85dc-02ebd5b645e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1ed5dd28-eaae-441c-9a48-35c9aa6c2651",
                "name": "authenticated valid test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{TestAutomation}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "TestAutomation",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e931308-e475-42fd-afc2-c6b0e330fb78",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9419b5f-af1c-4c31-90ac-e841a76db7cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Authenticated valid  test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "\r",
                        "    pm.expect(jsonData.data).length === 3;\r",
                        "    pm.expect(jsonData.data[0]) === pm.variables.get('clientIds1');\r",
                        "    pm.expect(jsonData.data[1]) === pm.variables.get('clientIds2');\r",
                        "    pm.expect(jsonData.data[2]) === pm.variables.get('clientIds3');\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "80843d4f-d6d7-44e9-8c8a-d24676fddbd5",
                "name": "No auth Multiple clientIds test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "758a4874-0519-44cc-9ad3-1df69227c45b",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "060c0bb1-ede7-4e0c-ae3a-f133a7e62c1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Multiple client Id test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "\r",
                        "    pm.expect(jsonData.data).length === 3;\r",
                        "    pm.expect(jsonData.data[0]) === pm.variables.get('clientIds1');\r",
                        "    pm.expect(jsonData.data[1]) === pm.variables.get('clientIds2');\r",
                        "    pm.expect(jsonData.data[2]) === pm.variables.get('clientIds3');\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "b189d3c7-59db-4fc3-a05f-ff68555e2d03",
                "name": "No auth Multiple clientIds with duplicate test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "727b06c4-0c70-4647-a4e8-c7bde0542948",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101004487);\r",
                        "pm.variables.set('clientIds3', 101004487);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2dca2cc-6c8b-4370-a1dd-a37136062a36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Multiple client Id with duplicates test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.false;\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      }
    ],
    "auth": {
      "type": "basic",
      "basic": [
        {
          "type": "string",
          "value": "{{TestAutomation}}",
          "key": "password"
        },
        {
          "type": "string",
          "value": "TestAutomation",
          "key": "username"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "163c3e6b-94b0-4b8c-9dbf-4a26e37cd5e9",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "fed58e50-558f-4525-acc6-614b52785001"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "bf9f2f07-95bb-4924-9dd3-4b541fee7bb9",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "3db62333-bc2b-4a50-98bc-b613bd4bea20"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "2021-07-14T09:07:42+10:00",
        "key": "todayiso"
      },
      {
        "type": "any",
        "value": "2021-07-14",
        "key": "todaysDate"
      },
      {
        "type": "any",
        "value": "2021-07-24",
        "key": "futureDate"
      },
      {
        "type": "any",
        "value": "2021-07-15",
        "key": "now"
      },
      {
        "type": "any",
        "value": "no client id",
        "key": "action"
      }
    ],
    "info": {
      "_postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01",
      "name": "RegressionTests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2021-07-22T05:58:43.124Z",
      "postman_exported_using": "Postman/8.8.0"
    },
    "id": "00a98a20-0bb2-4b24-905e-a9cf2e1c1167",
    "name": "intg",
    "values": [
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/einsteinanalytics",
        "key": "einsteinanalyticsdata"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/fileconversion",
        "key": "fileconversion"
      },
      {
        "type": "any",
        "value": "TestLockedUser",
        "key": "LockedUser"
      },
      {
        "type": "any",
        "value": "shfq6-WNdzdnWseK",
        "key": "LockedPassword"
      },
      {
        "type": "any",
        "value": "TestNewUser",
        "key": "NewUser"
      },
      {
        "type": "any",
        "value": "btsWeW$zMmhJIjy",
        "key": "NewPassword"
      },
      {
        "type": "any",
        "value": "TestNoRolesUser",
        "key": "NoRolesUser"
      },
      {
        "type": "any",
        "value": "paKAxSI7FAoO52U",
        "key": "NoRolesPassword"
      },
      {
        "type": "any",
        "value": "UTy3VU",
        "key": "randomId"
      },
      {
        "type": "any",
        "value": "This is a new fund name for UTy3VU",
        "key": "FundName"
      },
      {
        "type": "any",
        "value": "00D1m0000008lFX!ARcAQDCdBUCN1z27ixKDs2.IVaT8TQtNqHa9PNE1HLyjsl8Xgx1Vd7apCciBpe517mK1gW.Tpsvb2kmSBlodoEnjn0p0YJKZ",
        "key": "SFToken"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/ccm",
        "key": "ccm"
      },
      {
        "type": "any",
        "value": "b-VBed!By7suveYBbaL",
        "key": "TestAutomation"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/swift",
        "key": "swift"
      },
      {
        "type": "any",
        "value": "VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA==",
        "key": "AuthKey"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/ringcentral",
        "key": "ringcentral"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/sonatahelper",
        "key": "LGIA.Internal.Sonata.Helper.V2"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/GetPmifDefaultInsuranceValues",
        "key": "GetPmifDefaultInsuranceValues"
      }
    ]
  },
  "globals": {
    "id": "d528979c-2449-428e-ab50-2bda9d734a13",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 27711.666666666668,
      "responseMin": 29,
      "responseMax": 82985,
      "responseSd": 39084.166865312036,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1627010512113,
      "completed": 1627010597993
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3004eb1f-f7d1-49f4-bb72-e8e0800ec26f",
          "httpRequestId": "e94d5bf4-3342-4b88-8b17-14c3f960afdf"
        },
        "item": {
          "id": "c33beb54-b2bf-4980-9be1-e903a7091c28",
          "name": "No auth test",
          "request": {
            "url": {
              "path": [
                "SubmitCurrentImportDataToSonata"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4421956-0392-41c5-afb6-d64a064d5418",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No auth Test\", () => {",
                  "    pm.response.to.have.status(400);",
                  "})"
                ],
                "_lastExecutionId": "433096b1-baa3-4d24-9a85-0fb158a38bf5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "SubmitCurrentImportDataToSonata"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ff117717-86b8-45df-a4ae-00d9e4c703b6",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "6b82ac4d-464a-449c-81bd-e70bb084ac3b",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:21:52 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 121,
          "responseSize": 0
        },
        "id": "c33beb54-b2bf-4980-9be1-e903a7091c28",
        "assertions": [
          {
            "assertion": "No auth Test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f40a8d85-6755-4cfa-ac7a-09b1024f41e1",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d9827f15-5818-4eda-b908-104b3c8ec34a"
        },
        "item": {
          "id": "26bf3b98-fb54-4bc3-8837-ce976f7ac61f",
          "name": "Incorrect auth test",
          "request": {
            "url": {
              "path": [
                "SubmitCurrentImportDataToSonata"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "Basic ",
                  "key": "value"
                },
                {
                  "type": "string",
                  "value": "Authorization",
                  "key": "key"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dded81ba-baec-43df-8c77-635f5c311d97",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Incorrect auth Test\", () => {",
                  "    pm.response.to.have.status(401);",
                  "})"
                ],
                "_lastExecutionId": "aff9ee72-3340-44fb-9493-149038ac8f68"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "SubmitCurrentImportDataToSonata"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic ",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c458b893-8092-491d-9347-6014cd12c9c6",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "Basic ",
                "key": "value"
              },
              {
                "type": "string",
                "value": "Authorization",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "8f4c44fc-e438-49e4-87a8-0a6eab52c6ae",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:21:54 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 29,
          "responseSize": 0
        },
        "id": "26bf3b98-fb54-4bc3-8837-ce976f7ac61f",
        "assertions": [
          {
            "assertion": "Incorrect auth Test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dd82ebbd-47fd-4098-93e3-f5b3db104cde",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "71e4dc6b-4bb9-475e-9574-3697932808c4"
        },
        "item": {
          "id": "09b921e2-9726-4975-a314-67a136416066",
          "name": "Valid test",
          "request": {
            "url": {
              "path": [
                "SubmitCurrentImportDataToSonata"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31864e86-b8db-4f3c-a521-91aa157bbbfd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Valid Test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "",
                  "    const responsedata = pm.response.json();",
                  "    ",
                  "    pm.expect(responsedata).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "ba25c4ae-bbd1-493f-afa7-06d056a95d1a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "SubmitCurrentImportDataToSonata"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6cd2f082-9f88-4dd3-9b6a-753dbfb3e6cb",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                "key": "value"
              },
              {
                "type": "string",
                "value": "Authorization",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "9fad2b90-7972-4147-945f-35519bb2000b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:23:17 GMT"
            },
            {
              "key": "Content-Length",
              "value": "4"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              116,
              114,
              117,
              101
            ]
          },
          "cookie": [],
          "responseTime": 82985,
          "responseSize": 4
        },
        "id": "09b921e2-9726-4975-a314-67a136416066",
        "assertions": [
          {
            "assertion": "Valid Test",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 4
    },
    "failures": [],
    "error": null
  }
}