{
  "collection": {
    "_": {
      "postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01"
    },
    "item": [
      {
        "id": "8d6453c0-4480-46ee-9e2b-3790ebbfd730",
        "name": "CCM",
        "item": [
          {
            "id": "4e9bcce8-633a-4db0-a32f-dd46cca46449",
            "name": "SwiftEvents",
            "item": [
              {
                "id": "63e7ec5d-3c60-46b1-9a0f-856aad5d9cf1",
                "name": "PullDataFromCsvFiles",
                "item": [
                  {
                    "id": "dbfe8a23-fcff-40a2-8943-4bb190cc4ec1",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2f7ab5-930b-4eb6-8285-965f836abd94",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae437d5e-951d-493c-b82d-9f6509f73109",
                    "name": "Username and Pasword incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8cb4fa7-2da2-4f97-ad29-a4d437115d1d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4459bbd-654b-4160-8f02-a8ce29bf7726",
                    "name": "Username and Pasword locked ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8ded41-2a0e-4b85-93e1-6fc2faae4d5e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Account Locked\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c181fdfb-1c77-4795-996f-d8b054e9a028",
                    "name": "Username and Pasword new account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dddba71-d5c2-43e1-9d1e-893ee8a908af",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb47391-e00a-4261-8fac-b580cc2c580a",
                    "name": "Username and Pasword insufficient privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce580ba1-99f3-432c-8686-0bcb2cad628b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fdb3c78-78e1-4854-87c4-8f263a799dc4",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ad7e87-42b4-4e8e-964c-80bdf2deeb70",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('PullDataFromCsvFiles[SUCCESS]');",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1d25a940-bb45-4d60-926d-71517e99c98c",
                "name": "SyncSwiftEventsToSfCampaigns",
                "item": [
                  {
                    "id": "a048d619-104c-4ff2-94d5-4f3029e6c186",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e76540-08a5-4e7a-8242-eb2cf76d3ad7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e395c8b-144f-453e-9d43-d47dfed83f91",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43e8c31-a15e-4e7c-8545-70a84f544800",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e6eb59-7533-4057-a552-895c7e2d6dbb",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46481d2b-4cdd-411c-956d-7ed985d9955c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efed53b-b28d-4c7a-9be6-a6df5931e255",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e718e7c-14ad-40ec-8f60-a321a20ccc65",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebd8da2-ce26-4fd2-b9a4-d66a3e730bb8",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3fe2a9f-4da5-43ce-9220-b4de425fd85f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2403358f-c0b1-4d14-881e-52bb51f81cf6",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69bf09ca-de62-49d0-a934-04f704eec801",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncSwiftEventsToSfCampaigns[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fde205e5-2d16-408c-ad11-33ed42a62b67",
                "name": "SyncOpportunitiesOrLeads",
                "item": [
                  {
                    "id": "cf1919c4-1d1f-493f-ba67-e78d26dc7aa3",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc91c0dd-24bb-4150-8a10-112c83c06ffc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f5e4f3-2d5b-4b42-b79e-0644f71c2a3a",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d3818f-28e0-4bbd-b38c-5b368638f084",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "11849960-6b0f-4cc3-b4ca-55e5552a7a21",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1745097f-96c0-4b96-a569-08319d5fbbb4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b9a107-cfe4-4440-b0b7-e4c064f08274",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c05b641-f020-44d5-ada9-42188bcd1794",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "14737758-a721-4c66-9748-0c4612794341",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e2ec14-be91-42ae-b441-932ce9d6c440",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a4f3b7-4eec-40a3-9ffd-5a54dcdb6efa",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff14267-d3fd-42df-b1e8-39b05e85362e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncOpportunitiesOrLeads[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d53a6d4f-add7-44da-bd83-4f1b00e63829",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5071500e-147b-46d0-958b-d672d024f243",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "5648e2a7-2ef7-4227-8dcb-b17baae21a78",
                "name": "SyncRegistrantStatuses",
                "item": [
                  {
                    "id": "35c4ab38-84df-431e-866e-a9aa16e99d1d",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b28bf8-66ab-4115-8422-dbceee15f7c3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fedefab-b975-4672-89e4-7c254824c9a1",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2c50b7-fa67-46ca-8605-4b1ce56394eb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4974fa5e-72d0-4c88-a56e-83851d5331f9",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16aac098-44f4-4e3e-bf5f-8de95057387d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc18f24-931a-44d9-aaae-d16e3c4a3ac6",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63988599-ae81-45f4-8268-3316b4bc7959",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e37a005-f248-494d-b27e-544f7267f2e7",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a8138c-e92a-43d7-8719-588195fc4341",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "71dc9c06-0894-4e02-8de6-cb7143c6ae7a",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9f39f9-fde2-4360-910c-932b3a046888",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncRegistrantStatuses[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4294b7b2-548f-42e1-b42a-c19482064a5f",
                "name": "AddConfirmationInteractions",
                "item": [
                  {
                    "id": "2b84fdbf-5f79-4109-bda0-2be896c7c50c",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f80c5be-b278-4e06-8441-5c1f04a6f3a6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf9c2a1-3c8a-4105-b647-d5ff087501e5",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb64fd1-ceb5-41cc-bd9f-9d90fd35a490",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb6cb75-f2ac-43bf-a38c-bf4cf333729a",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "235342ed-ec0e-48f0-9b55-905cb234e1f8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1375465-1e21-4f76-8140-8527c647d517",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955a20c0-42a7-4030-a0cc-4e0e60d50240",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a00ce21-0a72-4435-8583-ee62cb6e188a",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ef5eaf-b502-45e3-b311-8f6646a65447",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0be736a-bf1f-4911-8556-c234c4ea288c",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce6f304-ca01-4dbd-8ab1-af3ed87611eb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0d3a56cf-67dd-43e6-91f1-44c88f3accbb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ac9f713e-956a-46fd-8127-b4c6149354fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "b76d7aa8-f97c-4e87-8a79-7d2cf6b00013",
            "name": "Corresspondence",
            "item": [
              {
                "id": "0ba36c02-6cd8-473d-b930-b5376cd0e2fa",
                "name": "SyncInteractionsFromEngageOne",
                "item": [
                  {
                    "id": "c9685920-bfca-40cf-a2bf-171b543a6cef",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39e4f3b-bfa5-4d62-999f-186b544323da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56b827d-e3e6-4d9c-a134-b5e21e7d329d",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31edc04-37c4-4100-8235-16797c8919ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "63226cb7-b79f-45ec-9cc1-63e0ea17f4d3",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360cf6ec-0165-4d06-89e8-d56e44ebb753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fae71f-8ccd-474e-9dfe-da88ac2378d3",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0056d9e5-da82-45a1-955c-2e0ba81d831e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No roles assigned user Test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "258204cf-84d2-41c7-8841-fce4bd5d69cc",
                    "name": "No Body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4ec2fb-da33-4908-87ea-51c612b1e575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Body Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"A non-empty request body is required.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "739c81d4-d3f3-48ad-8d43-ec127f404d14",
                    "name": "Blank date",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\":\"\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b566342c-d44c-422d-be4a-5205785d5b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Blank date Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"String '' was not recognized as a valid DateTime.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c2d695-95d5-4537-8104-9b7fa934fc8b",
                    "name": "Date not found",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97202788-2c99-4c04-932c-48a18e1fb770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafc9870-d0ab-4fb6-bc9f-02016dad189d",
                    "name": "Invalid file format",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64529a8-553f-499c-905e-7298327107ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "string",
                      "value": "{{TestAutomation}}",
                      "key": "password"
                    },
                    {
                      "type": "string",
                      "value": "TestAutomation",
                      "key": "username"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5b8beda-3f1c-42e1-8575-b54379916723",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b25cff3b-7512-4e35-bbef-7fe8441e69e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "95d05e1a-6615-46d5-a421-3c1b81776161",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f858a617-1a6b-4d0a-ac3a-276197e3ffc8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "0d7166c5-a7c1-4171-9ab5-dbef3607da1b",
            "name": "Actions",
            "item": [
              {
                "id": "2920d6c3-9652-4100-9cf2-e7c2e11b542a",
                "name": "AddAction",
                "item": [
                  {
                    "id": "bd3065be-20e0-4ee6-85f0-d5f051ba3fa9",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a174af09-7818-424a-a746-d206c537cf49",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7cc228d-d557-41f7-a93c-cffa89e3dba1",
                    "name": "Incorrect account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e02c814-f48b-4744-be73-43ebf94c6e38",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47d0cd1-9d88-4690-8e04-768a95926fd1",
                    "name": "Locked account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b481d7-77b9-4ebe-b840-7be7869ef090",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7e8d7a-b611-492a-bdf4-937d49973391",
                    "name": "New User account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02253539-6344-4601-bfc3-c89329b8b158",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New User account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22d2952-194e-4171-8e47-1b4df1d99be7",
                    "name": "Empty Strings  test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"\",\r\n  \"action\": \"\",\r\n  \"actionDate\": \"\",\r\n  \"status\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5258c2d6-b728-48a6-ab21-1f02c96d79f7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action is required\");",
                            "    pm.expect(jsonData.messages[1]).to.include(\"Status is required\");",
                            "    pm.expect(jsonData.messages[2]).to.include(\"Action date is required\");",
                            "    pm.expect(jsonData.messages[3]).to.include(\"Source system is required\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2e1b7d-d694-421c-919c-3b3499b52742",
                    "name": "Incorrect source system test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"Ring Central\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3ba860-d453-43b5-9a95-e86d84a4d17d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect source system test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value Ring Central is not allowed for field Source System\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5473fc-c4d7-4900-bc61-0c5157f5f3a8",
                    "name": "Incorrect action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"$%#$%#$^%#\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce38c87-4b11-40ef-9fbc-2ff902913c24",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a3258b-3049-4af1-b3b1-b1c761954ed8",
                    "name": "Incorrect action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{incorrectDate}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e9d2f8-634f-41fd-897e-8110d5cd403d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Date \" + requestBody.actionDate + \" is not a valid date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cb3142-4927-4a9e-8ad8-1dba19add194",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "incorrectDate = moment().format('DD-MM-YYYY');",
                            "pm.variables.set('incorrectDate', incorrectDate);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0466d1e4-75d9-4701-9fdb-79c36f2137cd",
                    "name": "Future action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{futureDate}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d032ee47-7417-4552-8193-04caae07fb49",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Future action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action date \" + requestBody.actionDate + \" cannot be future date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28661a1b-9e19-44da-9fec-5767d3d21071",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "future = moment().add(5,'days').format('YYYY-MM-DD');",
                            "pm.variables.set('future', future);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "730dae06-43f3-44cf-bc54-f6a0e1386c32",
                    "name": "Current action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26704a86-ee1a-4262-9f56-93430efc1050",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1829860e-42d2-4361-9888-257892c0972c",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "067dbe2b-807e-4a8f-a4c6-c1b1e8fdd263",
                    "name": "Incorrect status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea5b8df-449c-450d-a483-b1bb90d8a4c6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value \" + requestBody.status + \" is not allowed for field Status\");",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753afd6a-8bbc-4adf-8be9-78b8d168526d",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2264f135-d9c3-4fbd-879b-d0a019ae2b4e",
                    "name": "Valid status action started test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c750bb9-5a54-4c43-8560-16039c3522a8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9375ec-9f0c-4a76-9f54-3da5257488e1",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d38303df-cd98-4870-89ac-c1aa6e85a46f",
                    "name": "Valid status action completed test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action Completed\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4ec6a3-4404-43e2-bf03-838f25901f6e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bfffbb-cee0-43b3-8bad-623583d7ed1f",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4edc6fa0-90e8-4f9d-9ffb-eabaa3cb9f10",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"SwiftDigital\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b145dae-388f-4464-9e96-f4046edfef5d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc108fa-df20-4fa2-8eab-31f9601f6768",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "decb8e4e-262b-4c89-89fa-19bdfe577eda",
                "name": "AddActionV2",
                "item": [
                  {
                    "id": "dfbba7fc-717f-4a7e-8475-3fe9eff21e0b",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8e6692-3460-4201-b96c-12bb74a1fc56",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1eb339-bbe3-4d1a-b636-e800af62b418",
                    "name": "Incorrect account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74170d1d-f7b8-4db4-a14a-a2e4fc118404",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3486cb98-8321-4139-97e4-02bf2a072cc7",
                    "name": "Locked account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa59103-2ba6-4f25-a087-5fd27d1aa0f5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9534a164-47b4-4b24-bbe2-9d0eba8ee241",
                    "name": "New User account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3bd216c-6e02-4a5f-81ae-f006b20c6633",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New User account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8f05a7-33b6-4c9f-8cef-d68ce98be26a",
                    "name": "Empty Strings  test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"\",\r\n  \"action\": \"\",\r\n   \"actionDateTime\": \"\",\r\n  \"status\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5683c3-d32e-4c5b-88a8-ef9312ed3295",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action is required\");",
                            "    pm.expect(jsonData.messages[1]).to.include(\"Status is required\");",
                            "   // pm.expect(jsonData.messages[2]).to.include(\"Action date is required\");",
                            "    pm.expect(jsonData.messages[2]).to.include(\"Source system is required\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b6adb2-fdd9-4243-ab44-bb6d28479a66",
                    "name": "Incorrect source system test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"Ring Central\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05dc9147-5356-459a-8286-67ef5f6909f6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect source system test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value Ring Central is not allowed for field Source System\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61b391e-117e-4921-b19e-19fa4d2184e5",
                    "name": "Incorrect action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"$%#$%#$^%#\",\r\n \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f30876-7c2c-44d7-bb55-e4b314ed5f38",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f25347-71fc-4bf4-b7c5-0e93bde0887e",
                    "name": "Incorrect action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{incorrectDateTime}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb309895-bb70-455c-9e23-7e10cf876bac",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Date \" + requestBody.actionDateTime + \" is not a valid datetime\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e132c9-f665-41c2-89cc-3f4bb054d2ed",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "incorrectDateTime = moment().format('DD-MM-YYYY HH:MM:SS');",
                            "pm.variables.set('incorrectDateTime', incorrectDateTime);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a117b25-5384-4f6f-a5a1-dd6ade45bfdd",
                    "name": "Future action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "V2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n   \"actionDateTime\": \"{{futureDateTime}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cc8f82-96ee-4c56-b063-6f7a34d96ab0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Future action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"ActionDateTime \" + requestBody.actionDateTime + \" cannot be future date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae83e90a-4712-4015-b019-548da035462c",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "var futureDateTime = moment().add(5,'days').format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('futureDateTime', futureDateTime);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4c2e42-36b9-4061-96eb-0c1f796e3722",
                    "name": "Current action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c32a590-0f7f-4d98-becf-e59e979c5f1f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7016ba6-bc44-4228-80ca-d0d48200f3fc",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b69ccd-8834-4425-891c-4a5dfb8ed8c6",
                    "name": "Incorrect status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1d092e-c222-4f89-bdfc-ee72e11499d0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value \" + requestBody.status + \" is not allowed for field Status\");",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f769ada-df18-4390-8c0b-5187e920ab9c",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD HH:MM:SS');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f793f055-2bbf-4867-8ed9-bfd1e5a47044",
                    "name": "Valid status action started test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12dbd1f-7c74-4312-b2e7-a0cee0cf6a24",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2148a12-101d-4ad7-9f7e-7de17a62e830",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "278aca3d-fa83-446e-9e2b-bb3a1edc9cd5",
                    "name": "Valid status action completed test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action Completed\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a4fec6-c78f-4f8d-a583-1c03446b9ec4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca245280-826f-4ed9-87ca-b96c3e17e995",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a499005-3782-461d-b087-9620fe003fea",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"SwiftDigital\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adfd0307-66ce-469c-a244-d3e9177712ed",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd3bf99-2616-45e3-b315-e6c512b8ae66",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8114395f-2ac3-48e7-b843-4eb40c537b2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7118b30-cc41-4c3a-b8aa-13fffbac8acd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "0c7192d7-fa05-4909-af9e-182a4ed43620",
                "name": "SearchActions",
                "item": [
                  {
                    "id": "d12aaf49-33c3-44d3-aa42-5ca0ef4e0e61",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0301a1b-1d15-45e6-a9dc-3a5b2875829e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "af218589-4ca0-41e0-a254-4799def3855c",
                    "name": "Incorrect account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ab95b0-87bd-48b6-abe0-48639f5f7a79",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc47dfe-88c6-42b1-aa41-a5b6ca6be052",
                    "name": "Locked account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beac0d75-21d4-449b-bf8f-2b80f5f447e5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c880bf7a-f988-4c55-b810-525d5527ce6b",
                    "name": "New account test ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e18881-c8cc-4b4f-a804-e11d76bb6b2c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d848d1fe-ffb8-4414-8df2-c87d1ff80ce6",
                    "name": "Only client Id test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501\r\n}\r\n\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087fb867-6564-4295-9798-77849a36b4b5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only client Id test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321e08e5-e48f-49df-949a-63e37fcddab9",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce119640-a65f-42a0-8298-f383e5a3b179",
                    "name": "Only action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \r\n  \"action\": \"{{action}}\"\r\n\r\n}\r\n\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07153b61-bbb0-4fe4-9db8-c6eded7561ae",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de51100-1e8f-4fe9-830d-fecf1ca2b633",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "099c7d0f-ffc6-4a56-be25-14404f8f81cf",
                    "name": "Only status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\r\n  \"status\": \"Action started\"\r\n\r\n}\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52d5525-f609-4694-a227-b3f00b6b3366",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9698c41-b4fa-4e1b-bfac-a664999a244f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e570770-41ab-45ed-8f37-a67010d3aa79",
                    "name": "Only page size test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\r\n  \"pageSize\": 2\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae71c8f-4312-4567-b28f-da6499ae0e32",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only page size test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd510113-983d-44bf-82f6-c7e37c14b6d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a1d269-0fb6-4524-96ff-b863eeeb6e87",
                    "name": "No body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73c024c-3c14-48a1-a972-10b7072bff58",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.false;",
                            "pm.expect(jsonData.messages).to.include(\"The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true. Path: $ | LineNumber: 1 | BytePositionInLine: 0.\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a791ae2-6b60-40a3-b269-4307b307d148",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ae4396-72e4-4063-b99a-3f1e77fb2383",
                    "name": "Blank body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\t\r\n}\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71998f2-5d15-47c6-9941-598acb28b45f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Blank body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff347c5e-7c84-40d0-8e82-d6b1fc6c4cff",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "956f0945-d5c6-4589-b4ff-05117b9b5536",
                "name": "SyncActionsToSalesforce",
                "item": [
                  {
                    "id": "0be8b787-3fa1-4513-b2fd-4b5aa4012cf4",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148126d8-00f2-4ff0-b324-ca395102828e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "642c6473-5722-41aa-a908-5ec9b557fa4a",
                    "name": "Incorrect account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff67c412-8d02-4557-a39f-24a8cdba9e31",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea0cc10-6df2-42f9-9ed8-fe2c04eeea30",
                    "name": "New User account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d90405-6b1b-44b3-818f-48d644486c47",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "65daea7e-6db2-4ffb-abf4-7b32cd6a7b29",
                    "name": "Locked account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e97316-d17c-45ab-a02f-e3e96e760f58",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "165fc005-a508-4c56-b82c-87e0009f5eaa",
                    "name": "No access test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c31e9c-e29d-4fcc-8ca3-b3fe04c60e18",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No access test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e0b997d-8ea7-4f1d-ad40-9112f792e9b8",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9f23c7-bf7f-4e8b-b985-a181199303c0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No access test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.include(\"SyncActionsToSalesforce[INF] Sync complete.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d519592c-a7d0-4122-b38e-f12a9f4a9fc9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af62cad2-4536-4dc5-b95d-a857674eff6c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "65c07476-8392-4c1d-b7ca-7c096b16e5de",
        "name": "EinsteinAnalyticsData",
        "item": [
          {
            "id": "1703e78b-4b98-4e44-b0a5-0add610d2afb",
            "name": "Einstein",
            "item": [
              {
                "id": "f63e8f2a-2605-4b19-a941-70fef525d142",
                "name": "ExecuteSPEDWHerokuMembers",
                "item": [
                  {
                    "id": "f826eeff-ddb7-4272-b159-7f3e003125d3",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ef9f70-db37-456d-9a18-ef3ee3ebea44",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f48286-9ffe-4bf2-b944-6697e7cca02c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b395388-8827-4dec-9def-dfbf8cd36f82",
                    "name": "Blank stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55db9add-871b-4aa3-bc2d-2b8f5364a4da",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Blank stored proc test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d447a3b5-0e75-419b-8b2b-b375d0dc6834",
                    "name": "Invalid stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[usptionSFMemberAnalyticsFlat]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b5d18a-eee8-4b73-b20b-65c56dd5b868",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Invalid stored proc test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"Could not find stored procedure 'wrk.usptionSFMemberAnalyticsFlat'. [wrk].[usptionSFMemberAnalyticsFlat]\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a66d515-68cf-4a2f-926e-739f892c1fd6",
                    "name": "Unauthorised access test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9312eb1-2c29-4ca2-b252-e8c50ee0c025",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"Unauthorised access test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca12f1f7-f96e-471c-9cc1-ec41b9518f81",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"test\");"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbf4491-9279-46aa-9196-9f86d4cb8d74",
                    "name": "Blank body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ec6129-24fb-4ac4-ae92-3d63d298f3a3",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Blank body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "78dd196d-5849-48e0-b05b-d1f9e2b6966f",
                    "name": "Another valid stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAccountTransaction]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55340c47-ae07-45d6-a4d0-ff98d5c36ff6",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Another valid stored proc test\", () => {",
                            "    pm.response.to.have.status(500);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"Procedure or function 'uspIntegrationSFMemberAccountTransaction' expects parameter '@startDate', which was not supplied.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fb0de5-7612-4d14-8440-a85c781c771d",
                    "name": "Valid ExecuteSPEDWHerokuMembers test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAnalyticsFlat]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1115917f-6c6e-418a-a365-40dfd49fe60d",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Valid ExecuteSPEDWHerokuMembers request\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8e0ce906-e7e6-4488-97e0-981d33638f71",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "292a9e32-52c2-4561-a7c2-f98f18dd5d41",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bee9fd48-7533-43c3-9eee-c92055ee00fd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7caf7380-45c0-4053-af9d-640c82ae4a0b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "49ccbb12-8f1e-45c7-9223-caadc0f2255b",
        "name": "FileConversion",
        "item": [
          {
            "id": "fb292788-c26c-4420-a2e6-478e80c2f284",
            "name": "NasFile",
            "item": [
              {
                "id": "df026c24-0a01-4f6c-82cb-25487fd23365",
                "name": "ListInFile",
                "item": [
                  {
                    "id": "1b387aac-74e4-4e73-936a-3222e1d38f37",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f822eb-91ec-4c7c-825d-da209eb6fe09",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd84a03-2873-4e7f-8c2f-bf0d61c91b6d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8227d133-6796-48c3-9f39-b9d06c9f2c53",
                    "name": "Username and Password not provided ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d40144c-1738-416d-a1f7-29961cc61dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4387e5fe-d999-48df-8f92-a9c09b26cabf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1671ca6b-3dba-461f-a251-7358b14c48de",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445c6b93-596f-4df2-8dc0-0ff65cd16ab9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e2520c-3d89-4c8b-9a62-433a9383dc63",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "867af862-39ab-405f-a05b-dc52b74f029b",
                    "name": "valid list in files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": ""
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d99d12-e403-4771-8fdc-032398b2fdac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\in\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName+ \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cfd3c7-c3b5-43d5-b357-b2e8e82a095a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "4919ea16-0c60-426e-b265-0afadc5c2667",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c4edf0-2d64-41e0-abf0-583ba5165922",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79430d06-3005-4b20-b452-a504420a6a21",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1b2188-1aea-4bb7-8235-fb139097c5e8",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b554662-7590-46f5-bc18-2f4c09a12992",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cdee6d-b587-439d-ba15-d7eca2a683be",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de54e4b1-31b7-4018-b0a4-0794164eafe8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfd730cc-5416-476c-8e64-9bde27e923ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "f69de56a-4dfe-4e78-8504-eb9c0b0d57ee",
                "name": "ListOutFiles",
                "item": [
                  {
                    "id": "65edfb4f-38e6-478e-bd5a-3a0a19252f3a",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97454ecb-3a09-478c-91f5-a239273eca1a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9bbddf3-feec-4497-9f13-dda059e82fa7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdf9f61-0e9c-4fce-adb9-bfa082932d27",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7963e0-460b-46d9-b9fb-bdd8e7274079",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d49c927-c23d-4766-8db2-27cf1d80157e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde41f3b-8391-40db-ada8-3ed6869fbd8d",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33296ba2-87c3-4d3d-b58f-94f2eadfe065",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d46d5e-4603-4dd2-a873-0e80394914ef",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd64db61-5623-401c-9820-12fa47b68677",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41964ce-03ee-41b2-af11-48baffdf6070",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "413e609f-b7e4-49e8-a074-cc958f7df90e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7aac7ce-2298-4829-bcb9-ad213f052d4a",
                    "name": "Username and Password not provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf51cec-25ca-46cb-9710-ed14842fe15d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "831614d7-1398-4a40-873c-e461a5e4a45d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b633144-1988-4161-b6c0-669928354ce5",
                    "name": "valid list out files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFIles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": ""
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504646e2-511e-47a9-8852-f61372515a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71ec5e7-b028-4ca7-afe1-99b6e75dc9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list OUT files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\nas_staging\\\\out_staging\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e294839e-be15-49b3-b3b3-272579742a81",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "169c62ff-eff6-4116-9971-2ec2e882d467",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "9dd3b690-8998-4b7f-9504-77f693e9dea4",
                "name": "AddInvestmentOption",
                "item": [
                  {
                    "id": "fe858410-0143-41d8-baff-b623fb30f5b4",
                    "name": "Only Fund Name is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundName\": \"ABCD\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d3999e-092e-479c-9d9f-3213421881a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Fund Name is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a22645-8c53-4282-9d0b-2bbf651aea7e",
                    "name": " Only Nas Fund Id is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"nasFundId\": \"QL81\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10041e3-9498-4ba4-a697-2efa1f0cc068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Nas Fund Id is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4cf718-7827-473e-b0fa-9a10442121e6",
                    "name": "Only Fund ID provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"fundId\": \"QL81C1\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debc55f1-7aa9-485d-bbc2-265014ba29ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When only Fund ID provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Name should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bab5a86-8640-46bc-a0f3-3f2fb3ab1d7d",
                    "name": "Duplicate Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL82C1\",\r\n  \"fundName\": \"New CITY DB OPRTIONAL RISK RESRVE\",\r\n  \"nasFundId\": \"QL81C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d14a910-c5bd-4bbb-859b-33e772b0e078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Nas Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2138442-9e93-4cf8-bf80-bb6bb8dfbeab",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "user",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "user",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff7b52d-5ec6-4572-b546-5d497b61e4b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d1571b-f668-4b3d-abf5-5989875cb279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Username and Password test\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aeeae7a-8a80-4683-9677-7c2b2e4276e2",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f632ea33-718d-4bee-8955-44ef6d721d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f93df97-a34d-4f1e-9fcc-c639f5c046d0",
                    "name": "Invalid characters in Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"@#@{{randomId}}@#@#\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cc13d3-715e-40f1-9ce8-7c18d79e8f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119fa182-15b5-4c78-9aa6-b5ca5059366f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3beae322-18af-48e7-b629-dcbab2c6d018",
                    "name": "Duplicate Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"QL81\",\r\n  \"excludeFromUPFile\":false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7baec11-afbe-483f-ac12-31edfce46963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06bb478-3a6d-4640-9445-9cd4039f2039",
                    "name": "User with no access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01b2904-a690-4dfc-b0ab-3b08726d4040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6821ab-0919-4c28-88b6-67941497faea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"User with no access\", ()=>{",
                            "    pm.response.to.have.status(403);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4ffbfb-679a-4b78-bfbd-413e2782652e",
                    "name": "User locked",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d3fa23-6b99-4784-93e6-04f4c235487e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d980846-267c-4fa1-b71c-2bb4bd70ad91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked user\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac72e4e-dc20-41ce-9956-b9fd61084b87",
                    "name": "Invalid characters in Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"$@#${{FundName}}#$#$#\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ac10fc-0cfa-4adf-9b59-e299f3ccc97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund Name test\", () => {",
                            "   console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        ",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffcd821-3d40-4866-8bc2-becfba20319d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "74cd8c55-aa1c-4434-94b7-853612c476ec",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f59d9df-63ad-4ba4-9963-58c11c05df26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd75e852-cd11-4061-87c2-0d745c645ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b40681-65e6-4e98-bdf6-467831e56ebe",
                    "name": "Empty Request body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e570c9db-db01-4426-b3ab-38af27f062dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty Request body test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d2b0ed-7060-4c46-bb90-0bd446b3dd79",
                    "name": "Empty input fields",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"\",\r\n  \"fundName\": \"\",\r\n  \"nasFundId\": \"\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45803a7f-4b43-4e06-a8a8-974394843c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty input fields test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18c4067-f3fa-4b36-8bd6-6d1aaa3ab79f",
                    "name": "Invalid characters in Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"%%{{randomId}}#$\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b5adcf-9ecd-41c8-94b8-05ce3d323554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81b6ee8-c8d8-4762-b60d-e430b87f2016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d452a7-7d22-440a-82bf-9147eb7b83e0",
                    "name": "Valid all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d461864-968c-4108-88dc-46cc9a5f0d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All valid parameters test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604ef732-229c-4788-9cc0-330fe041ddc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "df31c50e-80c9-4c9b-891c-ccf686687dd7",
                    "name": "Duplicate all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"LG AGGRESSIVE ACCUM OPTION\",\r\n  \"nasFundId\": \"LG18C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7770e98-5c0b-4fe8-9ee1-6744d054e7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All parameters Duplicate test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    ",
                            "    pm.expect(jsonData.response[0]).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Correct message validated: \" + jsonData.response[0]);",
                            "    ",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Test completed\");",
                            "",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c63f892-8a47-4d19-914e-151904c96c9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63e551b-b6d7-48c0-817a-1030e4026b81",
                    "name": "Duplciate Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n   \"excludeFromUpFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7068421b-da46-4ec5-9db3-011b3d37178d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "  ",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0300eb5d-5388-4573-a912-b24523310086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a734a186-8999-41a5-aa6c-655c23398360",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3054087b-8221-4218-b4d4-08cbaede2a09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1f151628-1d34-4aa8-b113-165c0c63c996",
                "name": "DisplayInvestmentOption",
                "item": [
                  {
                    "id": "87f04e1c-d800-46c7-bf37-70186daad3a9",
                    "name": "End  to end test - exclude from up file true",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6eee1e-84c8-4cba-8694-0767ab7adda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(true)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac63c55a-527e-4add-b5ee-76fd47028f03",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: true",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d70de90-5238-4716-bc28-b206588c44d9",
                    "name": "Valid  FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d53350c-e9c4-46a9-b202-fd77a9999240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Nas Fund Id displayed is: \" + jsonData.response.investmentOptions[0].nasFundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a7a3e8-94aa-495d-a981-e83ebbc2f39d",
                    "name": "Valid NasFundID and FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundId",
                            "value": "LGGBCY"
                          },
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3731606-d0bf-44a0-9c2a-53f8bef3e45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundId\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundId\")) + \" matched.\");",
                            "    }",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac75a8fb-3abe-434d-b12d-6a3ccb29f568",
                    "name": "Non-existing FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a124f3cd-19b3-4ff6-81b9-5a0c319c75d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e112789a-7cab-49cd-a7b2-b6fcb224d371",
                    "name": "User with No Roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8c7719-2c4c-44bc-9bb7-9a5528d940c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "081d8d45-5bb8-4ada-8290-02b33cecb142",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4482112c-2c3b-4ff7-a773-8223931d1bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85c4491-8ac2-4788-9f23-cb98c5b9b2a7",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "GBCYC1"
                          },
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6449d04a-4ab7-4a9c-b048-6ef9f9964ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b71c98f-d93c-4aed-ad03-50efa95b06f4",
                    "name": "Incorrect username and password ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "incorrecty",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "incorrect",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6496d5-dd34-43e0-80e2-87538e1f5220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f1a657-54f1-4d9f-b975-8a9fc535e85a",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e71809c-2bed-44d3-a31e-9901eb28bc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76745ce-5f21-40c4-80db-05853116d3c9",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264bf7df-e7cb-4974-a1c5-7f76424500c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "15073dc8-b116-4e7c-af93-8dbfb897eb13",
                    "name": "End  to end test - exclude from up file false",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7249a1b-e651-490e-bd22-ee32d17c6f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5142a1-e652-4768-9982-025c7fec5bf9",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: false",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e074b9-90a0-40da-b878-aa8cc736750b",
                    "name": "Blank Parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "347dcc44-fa3c-4020-9974-4e7e7ec7a7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const length = pm.response.json().response.investmentOptions.length;",
                            "    console.log(\"No of Investments options records:\" + length);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3357ed-0033-4921-97e5-77ea454d15af",
                    "name": "Non-existing NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "791b9811-b84a-480c-a47f-a2ced7143d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a03d4872-7c15-4404-bc0c-7f2e4b5fd003",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "825758c4-7912-4401-9d61-2d2a0cf32f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2c76a0-408f-4ec7-82b2-83ee7d2007fb",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ea89eb-2ab3-44ba-bd52-e011fa35a261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "780e7773-23cc-4dfa-bb48-4aba28af437b",
                    "name": "Valid  NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "LGGBCY"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66dcad90-658d-4da5-a815-2533a67ee27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2eb32472-6597-4caa-98a1-d21874380d7a",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d44db6ac-661a-4c6d-9ec7-c37d1cc3c068",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "5a852e18-9c13-4058-873f-bfbaff04b623",
                "name": "RemoveInvestmentOption",
                "item": [
                  {
                    "id": "150d1e67-cfc7-4c29-aa56-e7902c57c433",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e592e8-4e1c-425d-bf3b-9081ec44b5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35afc8f-f6a3-48f5-b9eb-f352a2158a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6832bd-85df-42b1-ad67-f5d4e094fb6f",
                    "name": "Incorrect username and password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5994b977-6274-4cb5-b680-75468d9cf080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff856980-fc48-45be-a4c9-55b184ba78ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "772492d8-a12b-4306-892c-ed93e4958bec",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ad2520-34cc-4713-bfd2-1fda8989eb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3d9dcb-bb68-4144-9a4f-7a77d3bd257f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e737fdf-2ad3-4cc4-891e-4359ace47f8f",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d14e1fd-304a-48e0-9f9c-f347eeb0a45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64008faf-2d6a-4515-a1a1-c55b5c78c9a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8f3928-1217-403b-9152-b095ce13a458",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752949f4-6410-4833-a797-e374b81bc308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53c5bfd-e540-4e5d-bd56-3c8571588827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6a9149-6721-46f4-9b9c-c5cec127b986",
                    "name": "Blank parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": null
                          },
                          {
                            "key": "nasFundID",
                            "value": null
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b75057-3aa5-47b1-9d93-2123ea3d695b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response[0]).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "    pm.expect(jsonData.response[1]).to.include(\"FundId should be provided if NasFundId is empty\");",
                            "    pm.expect(jsonData.response[2]).to.include(\"NasFundId should be provided if FundId is empty\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f7633d-df14-41f7-890a-b3e1db9d792f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "836b54b9-3a0e-476c-b39e-3af7b7b14e8a",
                    "name": "Non-existing FundID ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb5fc06-2342-40dd-9215-85a3f06a5de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006d3dc7-674c-450a-9026-b78dbc5bd506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c4346d9-b495-4d4b-96ce-58775bc6eccf",
                    "name": "Non-existing Nas FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac828c56-d984-436f-b8a5-ba6d2495259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1adf605-1fb5-4d7e-a4a9-04c24e088345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9ad517-2f5c-4097-965b-15ec9fd92686",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61ffe3f-5b45-4325-af4c-dffa1588774b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238c5350-5f4c-4363-b65d-8130979631db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0a2b9c-18f9-45a8-ba3e-5cd82914022b",
                    "name": "Valid FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "553514cd-2df3-4478-ba20-1eade5d6c718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId =  successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a032ae9e-32f8-4e96-a4a9-f38a59e80237",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e59c2bf-ed6f-4f70-8583-28128d5dca92",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2046993-3df0-4807-837c-77eca63afae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdcdbe7c-53a7-428b-9134-0595958c25e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdfc705a-c586-4302-b03c-730bcb348ec0",
                    "name": "Valid FundId and NasFundId",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d922855b-d59d-426c-8efe-9b24a1f6a374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49c4389-92fc-4ddf-9331-8e3e27a62511",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "91477d6a-9eb5-44f0-b4f3-c6eb23b11b35",
                    "name": "Valid NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3c6853-b284-4d2a-89f0-df3b907c28f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = , nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01d4337-ea8e-400d-b42e-b467f5c76a22",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3771a179-1aec-4e33-ae8d-104339d7700b",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece38cda-6092-4245-88ef-f8414765a7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d1f283-6a20-44eb-8252-c783307fec0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73b125dd-40fe-457f-a2bb-1f1915259a4f",
                      "type": "text/javascript",
                      "exec": [
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41b3e4a2-0c1f-4d19-bceb-648f17577f1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42a18f98-b6fe-4d67-9467-ad2ded14fd6d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0f87721-cbf8-4f74-bc12-7b5f3a075273",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7f0da2f4-ca67-4fb1-9ff1-2a291d66ad11",
        "name": "Swift",
        "item": [
          {
            "id": "2c797f28-b1a4-4c78-b36e-970f8d0d7c4e",
            "name": "SwiftFolderConfiguration",
            "item": [
              {
                "id": "eef3bcac-85db-46fa-a6a0-be27ac111724",
                "name": "Addfolder",
                "item": [
                  {
                    "id": "ab57ba0a-0dce-4bd3-b2e6-02831b226900",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc200c46-97ae-4973-958c-65fba6157a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "5d4e6602-aa84-4b64-bb6b-9c7cd3cc2a22",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94356156-8a7b-4c6a-a68c-24c8daa7db44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "0ba282eb-86d5-4f0f-b428-551743e42a92",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b4a0ed-5151-480a-a556-03f040895c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "a1826ab4-c945-49d2-9203-617e7f1ab0f9",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0606eb-e5e8-483c-aaf5-e2cdff33c4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "77d08af0-fe9c-4c31-b3f6-426683d7c32d",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87034e2d-da82-4ab6-b073-837f4e90aa90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(405);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": []
              },
              {
                "id": "86e7a9ed-4a3e-4b3f-879e-3d8c3cc1c011",
                "name": "Listfolders",
                "item": [
                  {
                    "id": "9d8ebf3e-1d0e-428c-92b3-6c41c43f727b",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11b90c3-7100-4a82-8c3a-73bc7a421e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a825d764-613b-4c1a-bc81-96dfd2760fce",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d6f9d2-5239-43d9-a47c-ff2a20e01a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91cf3c4-b883-4a0d-855e-a5728d17c439",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e5674d-11fc-4395-928e-58f5dc28770c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd65362-d834-4087-bc42-84eb02e98e4f",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289092a8-acbd-4656-a73d-7fdf1f022fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e250c9-4fee-4f8a-8946-740e0b5de2f2",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c947abf9-d96e-42dd-aec1-24fd3e75a0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "80076073-0f45-4207-bbb7-75a4e4df5ff2",
                    "name": "Valid list",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59460774-5d18-4a31-af66-fede880c8643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    ",
                            "    const numberOfRecords = jsonData.response.swiftFolderConfigurations.length;",
                            "    ",
                            "    console.log(\"Number of Records:\", numberOfRecords);",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "afe8008e-6263-4d23-842d-6f6f38495058",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0025e8eb-b1ef-4e33-8769-e7778290c479",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "da89e0b9-e0f3-4f1d-b5c9-f01370d3e479",
        "name": "RingCentral",
        "item": [
          {
            "id": "92e76431-4394-4bff-9582-d63ddb15dec3",
            "name": "SyncCompanyCallLogs",
            "item": [
              {
                "id": "a2c6d732-2800-43c9-8619-501ca7407914",
                "name": "Date time exact value with time zone ",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-07-12T14:10:26.2410000+10:00\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8429bbc-1193-4674-902c-da8d46d559b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Date time exact value with time zone Test \", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ad4b3f0-66c8-4041-8ff4-6d382b2518d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "0d142dbe-22c4-421e-908b-a8ee25c74287",
                "name": "Delta sync",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b9feae1-f97b-402c-923d-7f2b96d93589",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Delta sync Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + pm.collectionVariables.get(\"todaysDate\") +\"T00:00:00.0000000\");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79ea569c-6334-445f-9564-ca769b9e48aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "f320dabc-86b4-471b-bc60-c1b91ea08bde",
                "name": "No auth",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19fc5a5b-d069-4410-8c2f-cf1975f12350",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No Auth test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "bd4ce70c-f799-4804-9464-2eeece2b2933",
                "name": "Incorrect account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85807a0d-5515-4d10-80f8-1e3dc97fac2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "bf3d8e9b-38a1-4522-a535-eb3333e0bac2",
                "name": "Hours ago",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d4c29a4-fabb-495f-a20d-5db564ff369b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Hours ago Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9696ad8-e913-44b5-be62-d434c0fd6d9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1e4785af-b589-43ab-8636-0ef7db03ba6a",
                "name": "Locked account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cd58a9b-98cb-49f1-b011-84cae7925eae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "6555dd5d-60f2-40b1-bc13-5cf07c493429",
                "name": "New account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de914e7f-df2a-4111-b860-8d2309fa89a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "d4c54a55-2231-4e9e-92bb-3be5a0e55faf",
                "name": "Sync all logs",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ed75601-c835-46c1-93b1-cb54135b63ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Sync All logs Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "961dc54b-3477-4b27-8332-73e0c3758c94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "31c47df5-369c-433b-a223-2a9ec7343bcd",
                "name": "No access account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "882e67b3-9f82-47bb-a5d1-21c47db95c2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No access account test\", () => {",
                        "    pm.response.to.have.status(403);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "08d417fb-c421-4789-8643-e9c1d61a7fe7",
                "name": "Blank body",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffe80850-dad2-466c-90c7-6a97b35a0682",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank body test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"A non-empty request body is required.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "0be1239c-d330-4262-a1ca-3eed0d70984d",
                "name": "Negative pagelimit",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": -100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36a1685d-09c2-4d07-b9a3-4b2f42af30b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"negative page limit Test\", () => {",
                        "    pm.response.to.have.status(500);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"An unknown error occurred. Please contact support with the trace identifier included in this response\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.not.be.empty;",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68e4d372-30e1-4da9-8c38-b872407b682d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "eae41d4a-ab63-4e27-9101-3c5169df1897",
                "name": "Blank date from",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfa520e4-c6d3-4c76-b5b1-27d0ee7f63a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank date field test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 16.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "83a3df9e-5ffb-4efe-adf3-416f77ebadfa",
                "name": "Blank date hour",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": ,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "573e0032-b6de-47fc-80e8-c0e92f4fec4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank hours test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"',' is an invalid start of a value. Path: $.hours | LineNumber: 2 | BytePositionInLine: 11.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "b1ef194f-fddf-4f1b-8133-381af2b10713",
                "name": "Negative hours",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": -24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d63c3e01-89cf-4a84-9f62-02d5e229912e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Negative Hours Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "   const requestBody  = JSON.parse(pm.request.body);",
                        "   const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "475873ec-16ea-4820-b337-ad9208f6e35c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "52e3997c-e8b3-4c4c-9646-30d071a7d66a",
                "name": "Blank date pagesize",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": \r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bc91de1-49e2-4a23-ace9-2ab730b24962",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank pagesize field Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"'}' is an invalid start of a value. Path: $.pageSize | LineNumber: 4 | BytePositionInLine: 0.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "443fe15e-f072-4a50-b2b4-3a93bf63c021",
                "name": "Invalid Date From",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"12-07-2021\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8fd89cf-195a-421a-bdd9-cf6c216ae30b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Invalid Date from Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 26.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae637c67-519f-41bc-b1e9-54419bc0ba6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "94747168-cd12-47ab-8cef-ae8eb1f1e00c",
                  "type": "text/javascript",
                  "exec": [
                    "const moment = require('moment');",
                    "pm.collectionVariables.set(\"todaysDate\", moment().format(\"YYYY-MM-DD\"));",
                    "",
                    "pm.collectionVariables.set(\"todayiso\", moment().format(\"YYYY-MM-DDTHH:MM:SSZ\"));"
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c402b3ac-a0e7-43f1-88bd-2b52d4b2263a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43fc3f40-39ee-4669-a818-98e8416d312f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b8c42816-5535-4f78-a87c-bb6571cec91d",
        "name": "LGIA.Internal.Sonata.Helper.V2",
        "item": [
          {
            "id": "2361276a-ae67-49d4-8ee4-148a717cba74",
            "name": "DigitalByDefault",
            "item": [
              {
                "id": "b8186c8e-fee9-45d0-8496-c6eeaf02cd63",
                "name": "SubmitCurrentImportDataToSonata",
                "item": [
                  {
                    "id": "276422f5-759f-47a9-bff7-c3f2049bd183",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df40974-fe54-49b3-9134-91aaa44623c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f6ce1e-cdce-4fda-a469-9831f8796a10",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62dc1795-3c1b-4d78-ab38-ca43f9dad7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "659ca050-42e0-4c72-8f2b-0eb14c62bd28",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8f2057-86c1-4b9c-8610-f0452148334f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "",
                            "    const responsedata = pm.response.json();",
                            "    ",
                            "    pm.expect(responsedata).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fe90873d-c7f9-4768-b4b8-752bc566cb26",
                "name": "ReduceCurrentImportDataRows",
                "item": [
                  {
                    "id": "b73b2c49-1583-410f-a232-953f09335213",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a8d087-bb7e-46b6-896e-192a8a93b169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f92ac46-e3bf-4fd7-9969-499b6aaf5def",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "10"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849b3482-b473-4a79-b6ea-8e23aa206c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2752b5-ec1e-4abe-92a4-89f7d3bc3bc6",
                    "name": "Incorrect rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "wewetwetwt"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e694ea-374e-4ae9-82b8-15db85005e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect rows to keep test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"The request is invalid.\")",
                            "    ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0878f82b-9bb2-46ee-b380-1307cd38d45b",
                    "name": "Negative rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "-10"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1bf4e03-afe1-4e80-a066-f05bd7811b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Negative rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.false;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "581be47b-4136-4023-8fbe-0fa96b4699d3",
                    "name": "Big rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100000000"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24469198-dd9c-4acd-ad1b-772d4f3e970b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Big rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.true;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8af5a7e-ff1f-4680-a934-331e54133257",
                    "name": "Zero rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100000000"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad706218-6b2e-49b0-9476-bdc9a4a79ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Zero rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.true;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f77240-3be4-40bf-a1c3-92c7d667f5fb",
                    "name": "Blank rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77151923-31a4-442f-9fa2-5728c468988b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Blank rows to keep test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"The request is invalid.\");",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7f2b54-2b12-4a47-bafc-7f782e5c2f3f",
                    "name": "No rows to keep test Copy",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8107255e-1c2e-4b7f-8219-e9a06f9fdd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No rows to keep test\", () => {",
                            "    pm.response.to.have.status(404);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"No HTTP resource was found that matches the request URI 'https://intg-mcro.internal.lgsuper.org/sonatahelper/ReduceCurrentImportDataRows'.\");",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec447390-833b-40ea-b463-c7052406f2d3",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce4d200-d06e-4282-9c20-4943577b7a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    pm.expect(jsonData).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ab6e364e-af81-49b9-81a0-fed06edb485a",
                "name": "ExecuteSPBulkImportData",
                "item": [
                  {
                    "id": "2060aff4-4954-4110-a46a-ba8ea8069744",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f054277-d026-41be-9545-ca9f8040baeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "efdf8297-0e76-4ab9-8c88-ef9953b658bb",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef97a42b-ab07-484d-b944-9b06c3ac990f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7cc004-46b8-4f34-bd69-7113e381842b",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6995316-d755-48ab-8a3d-6e7b12517bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86f6454d-4cde-4987-84ac-17dedab77178",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "45d58e96-1abc-469d-a2f6-334f6f2152fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "7938270d-9c3f-4e55-81ad-43a49fb92bcd",
                "name": "ExecuteSPDailyImportData",
                "item": [
                  {
                    "id": "cc5bc3f2-7a89-47de-93aa-30eb3dbd4ff8",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPDailyImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7796b6-04bf-430f-9006-2b8e63b9002b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "79813087-97e0-482f-bc1b-45d64f6f99c8",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312b79e4-751b-4bf9-8460-1bf73ab2f3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d724b3cf-ea37-486a-a9c6-77dbcca6ca9b",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPDailyImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62be56c4-f2c4-425a-a940-49fff4c1e723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "131c28d4-b47a-4a72-aa80-f6941d59faac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d52d4fef-304e-4167-ad02-5562459cbc92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "7ef58ebb-cfb5-4ed0-aa12-4beae2d1dca0",
                "name": "SubmitBulkImportDataToSonata",
                "item": [
                  {
                    "id": "57129db9-6b9c-4b7c-9362-756c915a3a89",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "785f7071-0e0d-45b7-acd8-87e22eb18e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a087645f-0b8e-440f-97c2-6ba80f84383c",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff56ebf9-8786-4bb6-a50c-b7ee68fa2902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "67cd758d-a4a9-472b-9553-9ce710476870",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "034f01b8-96c9-4504-8caa-7885309b676d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb917ea7-e3e6-4999-8c82-bcd2b8106ded",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "685eb57e-350f-41df-bb15-8da3b0b4ce27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "decc490d-da7b-4f44-a998-b0c0025f03e4",
                "name": "SubmitDailyImportDataToSonata",
                "item": [
                  {
                    "id": "9630f736-5c65-4f67-8e22-f151e004395d",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a8fdba-284c-44db-a934-5658f179bb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede66594-cf12-4feb-8240-758a8fc50087",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee495eb-29bc-450e-9004-9de7852a8dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee1bdd4-012c-4c56-935b-810bef468d91",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09becf9c-97d0-4a4f-86b9-3dbf70a77ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    pm.expect(jsonData).to.be.true;\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eaa84834-4a17-4052-b21a-eb8e3a58b8e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa7ac81b-f9a9-48c9-9f80-81c4c6d14964",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "b109a4b1-b2c0-4da8-aa71-12b03b69478e",
                "name": "GetCurrentImportData",
                "item": [
                  {
                    "id": "c0ff31d9-67a7-4141-911d-89871cb5d5f1",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5506e9b1-4b93-4500-b717-69840f844a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "67804ca2-cfdd-476e-ab4b-078bb2b17a8f",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47116569-e73e-4901-a108-33161fc3547f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7239b9ad-3e9b-4d2a-8a16-471e3ceb0551",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be83d553-a3a8-40a7-8a7a-ff62b6882749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61193c29-e099-4db6-a5a1-8d9d44341169",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32f62aae-7b8e-4e30-9fc0-c45f1edb6f05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "8514d1e9-337b-4353-8ffc-a54d812a3b47",
                "name": "ClearImportData",
                "item": [
                  {
                    "id": "098ed0f9-b1a0-456c-b9a7-ba3156ad1b10",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47f1ae7-36ec-4454-990e-698e9602f3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7767093b-e973-4b50-b3ed-f8a0192a1a72",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c49cef9-687e-41fa-8be0-9aada913add8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "894f4a9c-6be3-4138-9cd7-07b3fa545289",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3271ae9b-9dc5-4fec-971c-72d844b3d384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58dfc2f3-4517-4114-99d5-37693c201283",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "856bd2fe-1343-4e0c-8d53-800a7f2b7e7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "46f3d4e0-25b5-40e2-9bc7-1b8ca4836850",
            "name": "PmifInsurance",
            "item": [
              {
                "id": "2d64ace4-08ac-45fc-be59-923647f2af84",
                "name": "PmifInsurance_SubmitPMIFOptInRequests",
                "item": [
                  {
                    "id": "5c451eb7-249c-4848-8fc3-528b316c916e",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aafb47f-72b2-4a20-ab93-d4884e22d4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "14514297-84b6-498a-81d4-fc9de2b81a8d",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb4b854-2ef0-41bc-8472-c21d2e3b314c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "546965aa-e761-46b2-8ee1-3c5f19f8effa",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d42541-79b2-4af7-b1a1-e40d04578d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid test test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        \r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ef7473ae-cb75-484c-b0a3-e4453b91e5cc",
                "name": "PmifInsurance_DeletePmifInsuranceOptIn",
                "item": [
                  {
                    "id": "d38730a6-b8e9-4f7a-ae21-d83185b7e1ac",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "3016"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14439f3-67ee-46a6-8bed-dea9d088157b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80bfed44-092a-45a5-adb0-ff67b4607007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd759a01-1a21-45d9-8659-447f47c64f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ],
                          "_lastExecutionId": "ce5f2fc2-1ce2-464b-be6c-cb399751a80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604820f5-68b0-429c-b451-ca0af7bbde3e",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "3016"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451b40fb-f914-4733-b9cd-b3b9ee317e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1db2d76c-cfb8-4da3-8dbb-b87414a21d74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9216a645-cf03-43c4-b0d4-37d9f0ce082c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ],
                          "_lastExecutionId": "5af34b02-b616-47a0-acbe-a50954faab05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d40e35-71b5-429b-a036-80fbc0fbe31f",
                    "name": "valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "{{optInId}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6c62b8-8dc5-4705-8180-f796fa375864",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Create insurance record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ],
                          "_lastExecutionId": "a5096db0-8a19-4993-af9e-fbf82968811c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1dbdfe-9b62-4660-924d-1271a97e3dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
                            "\r",
                            "});"
                          ],
                          "_lastExecutionId": "552c838f-0f01-482c-a83e-0eb9ce64ca96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dff109c-622d-4e81-a90f-1065b35e9cda",
                    "name": "Special characters ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "@"
                        ],
                        "hash": "@$",
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9df998-3510-4edd-9047-a9fa904bab21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b928c7-d045-4942-ad78-f4c92ab4a5a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "480ecd58-811b-4f24-b033-3bd7715c0bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Special characters ID test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Message).to.include(\"The request is invalid.\");\r",
                            "\r",
                            "});"
                          ],
                          "_lastExecutionId": "dc37af14-cf4d-4763-97e8-93432f476c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6333dc58-5d65-4d8f-bee5-423397fe5b2c",
                    "name": "Non-existent ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "0001"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870bc28d-1f0f-4d0d-81b0-6699499360a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6808bf02-65d1-4201-a7db-966705bc3a88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3e6b81-8355-4aa9-ac07-1b383d956fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Non existent ID test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.false;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "\r",
                            "});"
                          ],
                          "_lastExecutionId": "fd61c73e-4263-4a12-a798-34551290e21f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8dfcb76d-54be-4419-8008-75aee9a9d314",
                "name": "PmifInsurance_GetPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "2ee6448c-ef0f-4f96-8512-01bf9b1953e0",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "154176"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4de321-16f3-49ea-a0c9-004e936feebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "adef356f-0bf2-45ca-a93b-130cac8ed373",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "154176"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd0e2b2-fb2f-4fc5-b3fd-b879b37c1f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2ef88c-3300-4d51-a101-b72745c3a1aa",
                    "name": "Invalid ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "0001"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b71fa0-dd87-402c-8c7b-80a71503ec3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.OptInRecords).to.be.null;\r",
                            "        \r",
                            "});\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec581ff-e655-4e0e-8cc9-9cb79a482c9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5899c891-9a17-420d-83d1-1102ba7ca951",
                    "name": "Non-existent ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "!1!1"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10723f3d-9b1b-4e03-96a1-de983b2b076d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Non-existent ID test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Message).to.include(\"The request is invalid.\")\r",
                            "\r",
                            "});\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55bcc6e8-c75b-4649-8837-a681d9b4279d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "69419e00-ee17-4b52-bcba-d2d693bb4049",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "{{optInId}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb19f86-6e9e-4240-b52e-75ba2c6f0fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.OptInRecords).to.have.length(1);\r",
                            "        pm.expect(jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID).to.eql(pm.variables.get('optInId'));\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "\r",
                            "});\r",
                            "\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a3eed2-30cd-4124-bc58-44ac3e986348",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance opt in record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "017423c9-ed75-4a02-8b1e-0f0d859b4eab",
                "name": "PmifInsurance_GetPMIFInsuranceAll",
                "item": [
                  {
                    "id": "be1eda05-d78b-49b9-9b30-c33d7db134cc",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddaf22ae-c868-4ed9-89ba-78cabe4cf522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "617ce8be-c259-4aef-9ff0-5ede27a3fbe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc9eb59-e49c-4501-bbe3-bb3f3edaf0f0",
                    "name": "Incorrect Auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d49203-fa63-49a8-868a-e4c4e88c6a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe3a411-2e71-4f4f-89fc-18604c2d8ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bf7549-078c-408f-9245-06287a1ac068",
                    "name": "Valid asc test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1893d4bc-763b-444d-8260-365d91b3d9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2b62d8-5556-43fd-acb2-e121182b2c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        }\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "df997906-98e9-46ee-aa3e-244b74572db7",
                    "name": "Valid desc test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e1748cd-28f3-4e7c-b05b-94ad769ecb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', false)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "451c01e5-de18-4e2e-842f-8d673e72cee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        }\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc8fd4a-ad36-4902-93b9-76b36d6068ff",
                    "name": "Valid one record test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e2c39d-7431-4ec4-8919-344dc553318d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 1);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15761159-f984-4402-8a85-529da50e3270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        \r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        } \r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e51a3adf-abae-44db-ad5c-b62e17e92de5",
                "name": "PmifInsurance_UpdatePmifInsuranceOptIn",
                "item": [
                  {
                    "id": "a3aa163f-b5b6-459d-8c75-40f752d079b0",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86bb1d3d-4eb5-4483-84c5-be140e3138c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "053b8e45-dc4f-46c8-98eb-155c3cada051",
                    "name": "Incorrect Auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426af7b7-95c7-4a4f-ba89-31586e8fecfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9cfc895-55f0-4b34-aeaa-f0fdce78dc18",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": {{optInId}},\r\n  \"ACCOUNT_NUMBER\": \"100002222\",\r\n  \"SOURCE_SYSTEM\": \"CCM\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0988f93-3735-4c5f-956c-d18accd42384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 row updated\");\r",
                            "\r",
                            "        const getRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'GET',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(getRequest, (error, response) => {\r",
                            "        console.log(\"Record fetched\", error ? error : response.json());\r",
                            "        const resultId = response.json().OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(pm.expect(resultId).to.eql(pm.variables.get('optInId'))){\r",
                            "             console.log(\"Records updated correctly\");\r",
                            "         } else {\r",
                            "            console.log(\"Records failed to update\");\r",
                            "         }\r",
                            "\r",
                            "        });\r",
                            "});\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });\r",
                            "\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f35655c-7b59-4c59-8098-4d4a302ce0ab",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Create insurance record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "24013800-b245-4844-8779-b88ecd3c9b28",
                "name": "PmifInsurance_DeleteAgedPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "9ac47225-92b3-4354-85bf-94a866ffd02e",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4471811-d2c1-438a-abd1-8fbc3419359d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "640db588-498d-4a4f-a18c-e2db81d04e33",
                    "name": "Invalid auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c155e32-42cf-4e73-a9f1-76c534d670da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5641b2-f3ff-4da4-9668-d900c097f85f",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "{{days}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f7d144-a048-44fb-92ec-adcf50b25fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"0 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
                            "\r",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6496b4d-ea30-46a1-97ac-100d5a9bc103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('days', 100);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "91f6f7f5-9737-45a7-9d15-4d5935926983",
                "name": "PmifInsurance_RecordPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "9b0cb757-5e41-4e7a-a8af-b12dac705567",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959236eb-b8e5-4e44-abf8-758ae6ff9b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "538fed68-f424-4f04-8ad1-fef46fbbeb98",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c5f18f-5290-4c9f-87fe-3db5179d4064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e90df6-d961-40a1-ba46-88b63d435d5e",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8f53df-9ddc-4d9a-b819-89156ceccd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 row inserted\");\r",
                            "});\r",
                            "\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });\r",
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6dec8cec-acea-4e0e-933f-4a92cdcc236b",
            "name": "PysInsurance",
            "item": [
              {
                "id": "a2f0ecf3-339a-4e6a-9b48-5f010e4309c8",
                "name": "PysInsurance_RecordInsuranceOptIn",
                "item": [
                  {
                    "id": "620e1c54-0a96-4421-a845-ba11c1d2294b",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b82be50-d5ab-4e8d-b03e-f9976a35705d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1575b43-25dc-406c-8b7e-01e08a41e6e3",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25924436-6206-4e7e-8fdf-befc31a3ce90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "596405fb-fc75-4568-9dac-983192d7987a",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd39ad52-a5ca-4945-94dd-b99d613b7e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        pm.expect(pm.response.json()).to.eql('true');\r",
                            "        \r",
                            "});\r",
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ac851794-3746-417a-ad88-c009fd3c2635",
                "name": "PysInsurance_SubmitOptInRequests",
                "item": [
                  {
                    "id": "70cfab66-a24b-41b0-ad9e-ec3f3451834f",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4436c395-8780-4155-b373-7c5bf94e6f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "928f2116-df86-4bb6-973e-8d42db1d9bb1",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7f4ab4-bd64-4850-83f5-2c0857b0ef92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e14d5b-ee65-4ef9-916f-c514a7cf13b9",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55fe67a-0757-4847-a83b-3d73762d3b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"0 rows processed\");\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8bebf233-cd54-4f2f-9471-1d4afec59716",
                "name": "PysInsurance_GetAccountsForPYSInsuranceCancel",
                "item": [
                  {
                    "id": "77babd51-b840-41cf-b24d-2503301ac905",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c2d87f-90d3-49a0-920c-b3baeb811349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed070e4d-c78f-4ae3-aa9e-b2bd1b1f7716",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd752d41-46f2-43a2-b87e-0e6de1ad6b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bfe084-5d48-4754-ae39-e7b83e56ef45",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ab6975-e3c7-43ca-a2c9-bc8787b0ad90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a78aaafc-3e7a-4664-a4da-f7d74818b66d",
                "name": "PysInsurance_GetOptInDetails",
                "item": [
                  {
                    "id": "d18448d0-4913-4ba0-8cf4-f1c1333bf93a",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2994830-68ce-4450-9e6f-ca95c392627c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "10026b42-588b-40af-87be-fee381a5a0a4",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e83357-597d-42aa-b95e-ea2157c29510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e34c309-fa66-4d54-a991-7c3a0f71b05c",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "162577"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8f623d-7004-4436-9a0f-b8832b71cae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "381045ee-40be-4b0e-aeea-9f3829739e1b",
                "name": "PysInsurance_UpdateInsuranceOptIn",
                "item": [
                  {
                    "id": "55b3c110-c870-411f-8ea0-03993b91858c",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4430"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc36503-361c-4bac-a17b-ad8d84d5d5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c61b16c-562d-4ab3-b376-e69a20540a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "21048793-bcad-45ae-b6f4-e0e38c29b4b2",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4430"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88705533-50e7-4a54-a023-5ab1773d8f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce584c3-3850-4be2-b6dc-41606fa0104e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "03006811-1d90-45ad-afcf-99f1ae1aea63",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4442"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cda8c6-461e-4ce4-aa04-394f2118b08e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4ebc1b-a12c-477b-8b5b-f60d1365cee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(200);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f98a7663-d948-42b9-93b7-97908365a38e",
                "name": "PysInsurance_DeleteInsuranceOptInRecord",
                "item": [
                  {
                    "id": "972017f2-43dd-4f16-bc2c-f1511ba45a7d",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptInRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4444"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae0b54c-ef2e-4a5d-93b2-3d962ad36864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d36748-37a8-4897-972e-e04ad2cf96b5",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptInRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4444"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98aa00c3-6df6-4b07-ac38-c9bf492c138e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a9d5f1ff-0cee-4e01-911b-762643185c73",
                "name": "PysInsurance_DeleteAgedInsuranceOptInRecords",
                "item": [
                  {
                    "id": "5f6e98f4-210e-48c5-adad-18ce73ed0feb",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThan",
                            "value": "365"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9c9b45-8c93-4dd4-b13c-0437f7fd4f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c78919-4068-4171-bb4f-42cd2815caf0",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThan",
                            "value": "365"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7165055-3abc-4c17-9e75-a9c53c27b0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "type": "string",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "key": "value"
            },
            {
              "type": "string",
              "value": "Authorization",
              "key": "key"
            }
          ]
        },
        "event": []
      },
      {
        "id": "55962e6c-91c5-4b0d-bd9b-5a84e8ded53f",
        "name": "LGIA.External.Tal.Helper",
        "item": [
          {
            "id": "283dcf89-6e4d-44f8-9e59-5c050ea29e18",
            "name": "TalClientInsurance",
            "item": [
              {
                "id": "044dce51-8f2c-4dd7-8f97-c42e9c581698",
                "name": "No auth test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b5dd1e9-e54a-476a-b24a-1ecc71577641",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No auth Test\", () => {\r",
                        "    pm.response.to.have.status(400);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "7b5f01d9-064a-4e5b-9c9c-00c8a0e542cb",
                "name": "Incorrect auth test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "apikey",
                    "apikey": [
                      {
                        "type": "string",
                        "value": "Basic",
                        "key": "value"
                      },
                      {
                        "type": "string",
                        "value": "Authorization",
                        "key": "key"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11036742-2ee9-48b4-8108-6696cfcfa7a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth Test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "f2285325-b1bb-4cca-af1c-d1f5661f8694",
                "name": "Valid test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c5417c6-1811-4eed-bcb4-87c1f9e5c48e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Valid Test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "})"
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "8437cecb-2f1e-4769-b148-011a6a202ca3",
        "name": "GetPmifDefInsuranceValuesAPI",
        "item": [
          {
            "id": "a83e94c5-c126-4501-a356-0547bd124c5d",
            "name": "DefaultInsurance",
            "item": [
              {
                "id": "d7a54f29-d7b3-4d86-9f4b-0cdcf8eddeff",
                "name": "Blank clientId test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "349c7051-32a9-47bc-a445-b0c48532bbdb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a02a684f-a803-491f-bc78-fc30f39db7cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank client Id test\", () => {\r",
                        "    pm.response.to.have.status(404);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "d1b091f7-7b28-4608-ae38-058e53c3c7b6",
                "name": "Incorrect authentication test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b79c683c-7f9b-4b9e-8924-a8dbcf698acf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4769747-115e-4102-b2b0-6b4687f54164",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "d173beaa-3041-492d-ad02-c11adbf6c1a1",
                "name": "No roles test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf4dd4fe-6c4c-46da-9321-25be20c7047d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c72b44cf-1578-43f6-8475-da357ae5a0b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No roles test\", () => {\r",
                        "    pm.response.to.have.status(403);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "639204ed-420f-44e6-b9cc-2298fb958dd8",
                "name": "Locked User test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0e072c9-e3f6-485b-bdcf-1ae1004a0925",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "098eaf2a-a53c-4972-8eab-f67cdc9c43af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "55baa9cd-e897-413f-b75d-041a9479dda2",
                "name": "New Users test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "771dc33e-89cc-4621-aa7e-1ff61710ebd3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9acc4d84-be2d-4ffe-abcc-55be0b55b8f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New Users test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "430bb969-309c-4d84-bae1-384a5f9169c4",
                "name": "authenticated valid  test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{TestAutomation}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "TestAutomation",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11d58df9-c321-4326-896b-f88702d0e238",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87af6563-3941-4031-88e9-81ea7ea4c018",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Authenticated user test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1584db5d-dad8-4af7-95f8-827057d0cd87",
                "name": "No account number test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05993f4c-1040-4d46-88d9-f78fb5682e13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', 101004749);\r",
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "513ea0f5-569a-48c5-a084-b0d163915711",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No account number test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "818f986a-ad6e-41fe-a113-c0463ab8a9a8",
                "name": "No auth Valid test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5d46762-e9bd-4309-b457-a3ef159deef0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', 101004749);\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae15c8fc-9f53-489e-8aed-f24277530b17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Valid test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "7391b656-ab9e-4ab3-aff8-0fa96a926070",
                "name": "New User test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64360e66-4936-482f-95f4-5a9d6ca4c0e5",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0b7a639-12d5-46a2-9e28-8362ac2e3f09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "aab1764a-92ad-4a01-a8f7-13b9f2d1c6c3",
                "name": "Incorrect auth test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef3872d7-01fe-494a-abdb-9ff339678f77",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74964a00-bf99-433c-ac9a-7ef88725fab3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "7182292d-421d-4517-95d6-b0cb77557c33",
                "name": "No roles user test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cab86567-e80b-41e2-8025-ebce197eb7e1",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "207f87c6-d39b-4fb2-aee6-2797a8eb7e6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No roles test\", () => {\r",
                        "    pm.response.to.have.status(403);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "173c40c6-a56c-491c-8dc7-6dad4fbeae96",
                "name": "Locked user test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d89f908-b8f0-47fe-a735-1b47a12d7148",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1dcd046f-6d41-4b34-9ce6-d3d1b1099050",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "8de47a92-761d-4304-9f5b-44568f5c4f18",
                "name": "authenticated valid test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{TestAutomation}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "TestAutomation",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "687359d3-0b51-4b9d-9c9a-1cb0fa9649a2",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "df7b54d1-f32f-411a-b12a-031d6372e9c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Authenticated valid  test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "\r",
                        "    pm.expect(jsonData.data).length === 3;\r",
                        "    pm.expect(jsonData.data[0]) === pm.variables.get('clientIds1');\r",
                        "    pm.expect(jsonData.data[1]) === pm.variables.get('clientIds2');\r",
                        "    pm.expect(jsonData.data[2]) === pm.variables.get('clientIds3');\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "4f830ee3-632c-4609-b61a-07f4c3754b45",
                "name": "No auth Multiple clientIds test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "806f62da-65c7-4e15-9475-00df0b713c9c",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a97e7a4d-5782-4659-8f64-2253b0b77a69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Multiple client Id test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "\r",
                        "    pm.expect(jsonData.data).length === 3;\r",
                        "    pm.expect(jsonData.data[0]) === pm.variables.get('clientIds1');\r",
                        "    pm.expect(jsonData.data[1]) === pm.variables.get('clientIds2');\r",
                        "    pm.expect(jsonData.data[2]) === pm.variables.get('clientIds3');\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "8a70728c-d508-4440-9440-f020b81dfd97",
                "name": "No auth Multiple clientIds with duplicate test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15edb09f-6577-4d4e-9729-ad0824f3bd5e",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101004487);\r",
                        "pm.variables.set('clientIds3', 101004487);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "831d1609-8232-46b4-8386-b2484a8fe675",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Multiple client Id with duplicates test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.false;\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      }
    ],
    "auth": {
      "type": "basic",
      "basic": [
        {
          "type": "string",
          "value": "{{TestAutomation}}",
          "key": "password"
        },
        {
          "type": "string",
          "value": "TestAutomation",
          "key": "username"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "e8eec630-e3aa-4dc0-ac8d-cafbed6a51e8",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "a0833a63-bb88-4dde-9837-b074804f435b"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "6f154f9a-9b43-459f-b53d-fab1b71c0c2e",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "c66732fe-5a21-40fc-a3e7-4b5bb9b6778e"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "2021-07-14T09:07:42+10:00",
        "key": "todayiso"
      },
      {
        "type": "any",
        "value": "2021-07-14",
        "key": "todaysDate"
      },
      {
        "type": "any",
        "value": "2021-07-24",
        "key": "futureDate"
      },
      {
        "type": "any",
        "value": "2021-07-15",
        "key": "now"
      },
      {
        "type": "any",
        "value": "no client id",
        "key": "action"
      }
    ],
    "info": {
      "_postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01",
      "name": "RegressionTests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2021-07-22T05:58:43.124Z",
      "postman_exported_using": "Postman/8.8.0"
    },
    "id": "00a98a20-0bb2-4b24-905e-a9cf2e1c1167",
    "name": "intg",
    "values": [
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/einsteinanalytics",
        "key": "einsteinanalyticsdata"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/fileconversion",
        "key": "fileconversion"
      },
      {
        "type": "any",
        "value": "TestLockedUser",
        "key": "LockedUser"
      },
      {
        "type": "any",
        "value": "shfq6-WNdzdnWseK",
        "key": "LockedPassword"
      },
      {
        "type": "any",
        "value": "TestNewUser",
        "key": "NewUser"
      },
      {
        "type": "any",
        "value": "btsWeW$zMmhJIjy",
        "key": "NewPassword"
      },
      {
        "type": "any",
        "value": "TestNoRolesUser",
        "key": "NoRolesUser"
      },
      {
        "type": "any",
        "value": "paKAxSI7FAoO52U",
        "key": "NoRolesPassword"
      },
      {
        "type": "any",
        "value": "UTy3VU",
        "key": "randomId"
      },
      {
        "type": "any",
        "value": "This is a new fund name for UTy3VU",
        "key": "FundName"
      },
      {
        "type": "any",
        "value": "00D1m0000008lFX!ARcAQDCdBUCN1z27ixKDs2.IVaT8TQtNqHa9PNE1HLyjsl8Xgx1Vd7apCciBpe517mK1gW.Tpsvb2kmSBlodoEnjn0p0YJKZ",
        "key": "SFToken"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/ccm",
        "key": "ccm"
      },
      {
        "type": "any",
        "value": "b-VBed!By7suveYBbaL",
        "key": "TestAutomation"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/swift",
        "key": "swift"
      },
      {
        "type": "any",
        "value": "VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA==",
        "key": "AuthKey"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/ringcentral",
        "key": "ringcentral"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/sonatahelper",
        "key": "LGIA.Internal.Sonata.Helper.V2"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/GetPmifDefaultInsuranceValues",
        "key": "GetPmifDefaultInsuranceValues"
      }
    ]
  },
  "globals": {
    "id": "3b60d1d2-0aef-431d-86e4-7abf6920325d",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 10,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 44.666666666666664,
      "responseMin": 24,
      "responseMax": 114,
      "responseSd": 31.377628265303215,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1627011134581,
      "completed": 1627011139554
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 5,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0e63d9b4-5cc9-4d82-ad42-f9e60b63fe1a",
          "httpRequestId": "33dfc9db-b1d4-448e-a8d7-74ac9348f06d"
        },
        "item": {
          "id": "d38730a6-b8e9-4f7a-ae21-d83185b7e1ac",
          "name": "No Auth test",
          "request": {
            "url": {
              "path": [
                "PMIFInsurance",
                "3016"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d14439f3-67ee-46a6-8bed-dea9d088157b",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "80bfed44-092a-45a5-adb0-ff67b4607007"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dd759a01-1a21-45d9-8659-447f47c64f4f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No auth test\", ()=> {\r",
                  "        pm.response.to.have.status(400);\r",
                  "});"
                ],
                "_lastExecutionId": "ce5f2fc2-1ce2-464b-be6c-cb399751a80e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "PMIFInsurance",
              "3016"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "569c7c2b-11d1-4345-8bdf-7ae0f8d9b1b4",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "424ee308-e6cf-4de7-857e-fa69d4d11564",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:32:15 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 114,
          "responseSize": 0
        },
        "id": "d38730a6-b8e9-4f7a-ae21-d83185b7e1ac",
        "assertions": [
          {
            "assertion": "No auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "68148e7f-931b-49bf-837a-aed72d3106c9",
          "length": 5,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "343a5e31-a3c9-4b5a-b650-be2a8b67a779"
        },
        "item": {
          "id": "604820f5-68b0-429c-b451-ca0af7bbde3e",
          "name": "Incorrect auth key test",
          "request": {
            "url": {
              "path": [
                "PMIFInsurance",
                "3016"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "Basic ",
                  "key": "value"
                },
                {
                  "type": "string",
                  "value": "Authorization",
                  "key": "key"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "451b40fb-f914-4733-b9cd-b3b9ee317e8a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "1db2d76c-cfb8-4da3-8dbb-b87414a21d74"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9216a645-cf03-43c4-b0d4-37d9f0ce082c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Incorrect auth key test\", ()=> {\r",
                  "        pm.response.to.have.status(401);\r",
                  "});"
                ],
                "_lastExecutionId": "5af34b02-b616-47a0-acbe-a50954faab05"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "PMIFInsurance",
              "3016"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic ",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e69a8ae2-1a60-4c7b-b507-28eaef7e0f3f",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "Basic ",
                "key": "value"
              },
              {
                "type": "string",
                "value": "Authorization",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "2d1f1fd1-f4bb-4096-8472-8d1aab134103",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:32:15 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 0
        },
        "id": "604820f5-68b0-429c-b451-ca0af7bbde3e",
        "assertions": [
          {
            "assertion": "Incorrect auth key test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "94af0b5f-d6a7-487f-9e95-5353968d4ac5",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "eb89ca78-c4b7-4370-9a83-b75093500c06"
        },
        "item": {
          "id": "73d40e35-71b5-429b-a036-80fbc0fbe31f",
          "name": "valid test",
          "request": {
            "url": {
              "path": [
                "PMIFInsurance",
                "{{optInId}}"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9d6c62b8-8dc5-4705-8180-f796fa375864",
                "type": "text/javascript",
                "exec": [
                  "const postRequest = {\r",
                  "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'accept': 'text/plain',\r",
                  "            'content-Type': 'application/json',\r",
                  "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'application/json',\r",
                  "              raw: JSON.stringify(\r",
                  "                {\r",
                  "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                  "                    SOURCE_SYSTEM: \"Web\",\r",
                  "                    ACCOUNT_NUMBER: \"100001234\",\r",
                  "                    STATUS: \"SUBMITTED\"\r",
                  "                })\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(postRequest, (error, response) => {\r",
                  "        pm.variables.set(\"optInId\", response.json().Id);\r",
                  "        console.log(\"Create insurance record\", error ? error : response.json());\r",
                  "        \r",
                  "        });"
                ],
                "_lastExecutionId": "a5096db0-8a19-4993-af9e-fbf82968811c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4a1dbdfe-9b62-4660-924d-1271a97e3dc5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Valid test test\", ()=> {\r",
                  "        pm.response.to.have.status(200);\r",
                  "        const jsonData = pm.response.json();\r",
                  "        pm.expect(jsonData.Success).to.be.true;\r",
                  "        pm.expect(jsonData.Message).to.include(\"1 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
                  "\r",
                  "});"
                ],
                "_lastExecutionId": "552c838f-0f01-482c-a83e-0eb9ce64ca96"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "PMIFInsurance",
              "3096"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "19e84c7f-39c5-4ffe-a3f3-70faf7579023",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                "key": "value"
              },
              {
                "type": "string",
                "value": "Authorization",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "3d8fc300-bd82-451f-85c4-ae2f23db3727",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:32:17 GMT"
            },
            {
              "key": "Content-Length",
              "value": "119"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              49,
              32,
              80,
              77,
              73,
              70,
              95,
              73,
              78,
              83,
              85,
              82,
              65,
              78,
              67,
              69,
              95,
              79,
              80,
              84,
              95,
              73,
              78,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              40,
              115,
              41,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              59,
              32,
              48,
              32,
              80,
              77,
              73,
              70,
              95,
              73,
              78,
              83,
              85,
              82,
              65,
              78,
              67,
              69,
              95,
              79,
              80,
              84,
              95,
              73,
              78,
              95,
              69,
              82,
              82,
              79,
              82,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              40,
              115,
              41,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 30,
          "responseSize": 119
        },
        "id": "73d40e35-71b5-429b-a036-80fbc0fbe31f",
        "assertions": [
          {
            "assertion": "Valid test test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "94af0b5f-d6a7-487f-9e95-5353968d4ac5",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "eb89ca78-c4b7-4370-9a83-b75093500c06"
        },
        "item": {
          "id": "73d40e35-71b5-429b-a036-80fbc0fbe31f",
          "name": "valid test",
          "request": {
            "url": {
              "path": [
                "PMIFInsurance",
                "{{optInId}}"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9d6c62b8-8dc5-4705-8180-f796fa375864",
                "type": "text/javascript",
                "exec": [
                  "const postRequest = {\r",
                  "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'accept': 'text/plain',\r",
                  "            'content-Type': 'application/json',\r",
                  "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'application/json',\r",
                  "              raw: JSON.stringify(\r",
                  "                {\r",
                  "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                  "                    SOURCE_SYSTEM: \"Web\",\r",
                  "                    ACCOUNT_NUMBER: \"100001234\",\r",
                  "                    STATUS: \"SUBMITTED\"\r",
                  "                })\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(postRequest, (error, response) => {\r",
                  "        pm.variables.set(\"optInId\", response.json().Id);\r",
                  "        console.log(\"Create insurance record\", error ? error : response.json());\r",
                  "        \r",
                  "        });"
                ],
                "_lastExecutionId": "a5096db0-8a19-4993-af9e-fbf82968811c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4a1dbdfe-9b62-4660-924d-1271a97e3dc5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Valid test test\", ()=> {\r",
                  "        pm.response.to.have.status(200);\r",
                  "        const jsonData = pm.response.json();\r",
                  "        pm.expect(jsonData.Success).to.be.true;\r",
                  "        pm.expect(jsonData.Message).to.include(\"1 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
                  "\r",
                  "});"
                ],
                "_lastExecutionId": "552c838f-0f01-482c-a83e-0eb9ce64ca96"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "PMIFInsurance",
              "3096"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "19e84c7f-39c5-4ffe-a3f3-70faf7579023",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                "key": "value"
              },
              {
                "type": "string",
                "value": "Authorization",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "3d8fc300-bd82-451f-85c4-ae2f23db3727",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:32:17 GMT"
            },
            {
              "key": "Content-Length",
              "value": "119"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              49,
              32,
              80,
              77,
              73,
              70,
              95,
              73,
              78,
              83,
              85,
              82,
              65,
              78,
              67,
              69,
              95,
              79,
              80,
              84,
              95,
              73,
              78,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              40,
              115,
              41,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              59,
              32,
              48,
              32,
              80,
              77,
              73,
              70,
              95,
              73,
              78,
              83,
              85,
              82,
              65,
              78,
              67,
              69,
              95,
              79,
              80,
              84,
              95,
              73,
              78,
              95,
              69,
              82,
              82,
              79,
              82,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              40,
              115,
              41,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 30,
          "responseSize": 119
        },
        "id": "73d40e35-71b5-429b-a036-80fbc0fbe31f",
        "assertions": [
          {
            "assertion": "Valid test test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0d68466e-5b8d-4ac4-8650-f2bf9b507ac9",
          "length": 5,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "77c5709a-ffdf-4023-b301-e910d89c0a95"
        },
        "item": {
          "id": "8dff109c-622d-4e81-a90f-1065b35e9cda",
          "name": "Special characters ID test",
          "request": {
            "url": {
              "path": [
                "PMIFInsurance",
                "@"
              ],
              "hash": "@$",
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ef9df998-3510-4edd-9047-a9fa904bab21",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "76b928c7-d045-4942-ad78-f4c92ab4a5a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "480ecd58-811b-4f24-b033-3bd7715c0bc5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Special characters ID test\", ()=> {\r",
                  "        pm.response.to.have.status(400);\r",
                  "        const jsonData = pm.response.json();\r",
                  "        pm.expect(jsonData.Message).to.include(\"The request is invalid.\");\r",
                  "\r",
                  "});"
                ],
                "_lastExecutionId": "dc37af14-cf4d-4763-97e8-93432f476c7c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "PMIFInsurance",
              "@"
            ],
            "hash": "@$",
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "91054f75-bc53-469e-9928-ddba614ff241",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                "key": "value"
              },
              {
                "type": "string",
                "value": "Authorization",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "a5e8a6b1-d292-4bea-9e23-4ebe791baa9c",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:32:18 GMT"
            },
            {
              "key": "Content-Length",
              "value": "37"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 27,
          "responseSize": 37
        },
        "id": "8dff109c-622d-4e81-a90f-1065b35e9cda",
        "assertions": [
          {
            "assertion": "Special characters ID test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c5bda939-3657-4949-9c83-9836ae5a32ac",
          "length": 5,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d69f4045-b78e-4f64-9b8a-d55e033b90aa"
        },
        "item": {
          "id": "6333dc58-5d65-4d8f-bee5-423397fe5b2c",
          "name": "Non-existent ID test",
          "request": {
            "url": {
              "path": [
                "PMIFInsurance",
                "0001"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "870bc28d-1f0f-4d0d-81b0-6699499360a3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "6808bf02-65d1-4201-a7db-966705bc3a88"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8f3e6b81-8355-4aa9-ac07-1b383d956fe9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Non existent ID test\", ()=> {\r",
                  "        pm.response.to.have.status(200);\r",
                  "        const jsonData = pm.response.json();\r",
                  "        pm.expect(jsonData.Success).to.be.false;\r",
                  "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                  "\r",
                  "});"
                ],
                "_lastExecutionId": "fd61c73e-4263-4a12-a798-34551290e21f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "PMIFInsurance",
              "0001"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8cd81387-692e-4b20-b3c4-30394ec350fa",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                "key": "value"
              },
              {
                "type": "string",
                "value": "Authorization",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "474af879-c2b4-4eec-9166-73fa0ba71f22",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:32:18 GMT"
            },
            {
              "key": "Content-Length",
              "value": "648"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              121,
              115,
              116,
              101,
              109,
              46,
              69,
              120,
              99,
              101,
              112,
              116,
              105,
              111,
              110,
              58,
              32,
              78,
              111,
              32,
              80,
              77,
              73,
              70,
              95,
              73,
              78,
              83,
              85,
              82,
              65,
              78,
              67,
              69,
              95,
              79,
              80,
              84,
              95,
              73,
              78,
              32,
              119,
              97,
              115,
              32,
              102,
              111,
              117,
              110,
              100,
              32,
              116,
              111,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              102,
              111,
              114,
              32,
              80,
              77,
              73,
              70,
              95,
              73,
              78,
              83,
              85,
              82,
              65,
              78,
              67,
              69,
              95,
              79,
              80,
              84,
              95,
              73,
              78,
              95,
              73,
              68,
              32,
              61,
              32,
              49,
              92,
              114,
              92,
              110,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              71,
              73,
              65,
              46,
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              46,
              83,
              111,
              110,
              97,
              116,
              97,
              46,
              72,
              101,
              108,
              112,
              101,
              114,
              46,
              86,
              50,
              46,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              115,
              46,
              68,
              66,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              115,
              46,
              79,
              68,
              83,
              67,
              85,
              83,
              84,
              79,
              77,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              46,
              68,
              101,
              108,
              101,
              116,
              101,
              80,
              109,
              105,
              102,
              73,
              110,
              115,
              117,
              114,
              97,
              110,
              99,
              101,
              79,
              112,
              116,
              73,
              110,
              82,
              101,
              99,
              111,
              114,
              100,
              40,
              73,
              110,
              116,
              51,
              50,
              32,
              112,
              109,
              105,
              102,
              73,
              110,
              115,
              117,
              114,
              97,
              110,
              99,
              101,
              79,
              112,
              116,
              73,
              110,
              73,
              100,
              41,
              32,
              105,
              110,
              32,
              68,
              58,
              92,
              92,
              84,
              101,
              97,
              109,
              67,
              105,
              116,
              121,
              92,
              92,
              66,
              117,
              105,
              108,
              100,
              65,
              103,
              101,
              110,
              116,
              92,
              92,
              119,
              111,
              114,
              107,
              92,
              92,
              98,
              56,
              97,
              100,
              52,
              102,
              50,
              51,
              97,
              48,
              100,
              55,
              50,
              98,
              97,
              52,
              92,
              92,
              76,
              71,
              73,
              65,
              46,
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              46,
              83,
              111,
              110,
              97,
              116,
              97,
              46,
              72,
              101,
              108,
              112,
              101,
              114,
              46,
              86,
              50,
              92,
              92,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              115,
              92,
              92,
              68,
              66,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              115,
              92,
              92,
              79,
              68,
              83,
              67,
              85,
              83,
              84,
              79,
              77,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              46,
              99,
              115,
              58,
              108,
              105,
              110,
              101,
              32,
              54,
              52,
              50,
              92,
              114,
              92,
              110,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              71,
              73,
              65,
              46,
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              46,
              83,
              111,
              110,
              97,
              116,
              97,
              46,
              72,
              101,
              108,
              112,
              101,
              114,
              46,
              86,
              50,
              46,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              115,
              46,
              80,
              109,
              105,
              102,
              73,
              110,
              115,
              117,
              114,
              97,
              110,
              99,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              46,
              68,
              101,
              108,
              101,
              116,
              101,
              73,
              110,
              115,
              117,
              114,
              97,
              110,
              99,
              101,
              79,
              112,
              116,
              73,
              110,
              82,
              101,
              99,
              111,
              114,
              100,
              40,
              73,
              110,
              116,
              51,
              50,
              32,
              112,
              109,
              105,
              102,
              115,
              117,
              114,
              97,
              110,
              99,
              101,
              79,
              112,
              116,
              73,
              110,
              73,
              100,
              41,
              32,
              105,
              110,
              32,
              68,
              58,
              92,
              92,
              84,
              101,
              97,
              109,
              67,
              105,
              116,
              121,
              92,
              92,
              66,
              117,
              105,
              108,
              100,
              65,
              103,
              101,
              110,
              116,
              92,
              92,
              119,
              111,
              114,
              107,
              92,
              92,
              98,
              56,
              97,
              100,
              52,
              102,
              50,
              51,
              97,
              48,
              100,
              55,
              50,
              98,
              97,
              52,
              92,
              92,
              76,
              71,
              73,
              65,
              46,
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              46,
              83,
              111,
              110,
              97,
              116,
              97,
              46,
              72,
              101,
              108,
              112,
              101,
              114,
              46,
              86,
              50,
              92,
              92,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              115,
              92,
              92,
              80,
              109,
              105,
              102,
              73,
              110,
              115,
              117,
              114,
              97,
              110,
              99,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              46,
              99,
              115,
              58,
              108,
              105,
              110,
              101,
              32,
              49,
              51,
              49,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 39,
          "responseSize": 648
        },
        "id": "6333dc58-5d65-4d8f-bee5-423397fe5b2c",
        "assertions": [
          {
            "assertion": "Non existent ID test",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 857
    },
    "failures": [],
    "error": null
  },
  "consoleLogs": {
    "94af0b5f-d6a7-487f-9e95-5353968d4ac5": [
      {
        "cursor": {
          "ref": "94af0b5f-d6a7-487f-9e95-5353968d4ac5",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "scriptId": "9d6c62b8-8dc5-4705-8180-f796fa375864",
          "execution": "a5096db0-8a19-4993-af9e-fbf82968811c"
        },
        "level": "log",
        "messages": [
          "Create insurance record",
          {
            "Success": true,
            "Message": "1 row inserted",
            "Id": 3096
          }
        ]
      }
    ]
  }
}