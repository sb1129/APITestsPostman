{
  "collection": {
    "_": {
      "postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01"
    },
    "item": [
      {
        "id": "5969c2fb-eb4d-45d6-b45f-4f277cb6f905",
        "name": "CCM",
        "item": [
          {
            "id": "7ba0969d-7474-4503-8b4e-fce2d989a49e",
            "name": "SwiftEvents",
            "item": [
              {
                "id": "7ad30b04-0ca6-4b03-b726-35df292267ab",
                "name": "PullDataFromCsvFiles",
                "item": [
                  {
                    "id": "20829fe2-42e8-447e-b299-4b4513486150",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b408af-b0ed-4a5c-9637-eba074bfc4fa",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d001e181-ce73-4627-b397-857fc14d09a0",
                    "name": "Username and Pasword incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39bb4578-2e64-40b1-b205-6981b97a0d57",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3033c136-90cd-4360-8bd1-1c85ecbe4c9c",
                    "name": "Username and Pasword locked ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eea7028-110c-4334-b2c9-396b06359143",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Account Locked\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1229116c-59e8-49cc-8cb2-3efabf1159f4",
                    "name": "Username and Pasword new account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "736ba2f2-a786-4e6f-9071-cbb0d5c984e1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca87d99d-fc10-481e-b573-dfb23f462b5c",
                    "name": "Username and Pasword insufficient privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "778f2e7b-978e-410d-b354-5eead0744800",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "111f2346-d983-472e-b775-e843ccdf81d3",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05767c2e-a708-47c6-84d6-79f94a7d9d4e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('PullDataFromCsvFiles[SUCCESS]');",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "76980eb4-ed34-42e4-b373-9573f7347c1d",
                "name": "SyncSwiftEventsToSfCampaigns",
                "item": [
                  {
                    "id": "27b14ffc-d076-42b3-a862-5d18c66d7dfe",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eebcb32-8cbc-4b82-a28a-c9d221dc918d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad2bc42-dcb3-4d53-bedd-bc8f72b1b70e",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e764b9-5c59-4eab-b7f6-2eba2c8880d9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "927ed6a5-b8c4-4c07-a661-6a003f317cdb",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d14b68-dc8a-4961-a69e-dd24c3f1fe6b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "99367de6-eeb3-48f4-b142-a273c4b01a68",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e433a31e-828b-4ef4-b22e-11b43e64883c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "410b23b0-b3b3-43dc-9488-0e516df70af8",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2c2fd4-de86-4646-a37d-b566eb9d70a8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7bc6e3-e96c-42a9-b433-e0c1ce1de85b",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e79cfb6-523f-45b9-9d6c-d6439584d40e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncSwiftEventsToSfCampaigns[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3835c214-f3d4-48c1-9030-b6090f525cc0",
                "name": "SyncOpportunitiesOrLeads",
                "item": [
                  {
                    "id": "e623dcba-1fd2-47fc-a010-ea3a926ddcee",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d8707d-aa05-49a4-b828-a280d837e1ae",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9e5203-0bca-49f8-8654-78acf4a12fe0",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8b42c8-15f5-4240-a068-52b56f9c3f96",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0b6ae7-3087-4fc9-9bdc-a1aa4e81aa1d",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a46a61c-eeaf-4551-8d15-289aeacc24b9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3dcbc0-f593-4f2c-82fb-451187c993b4",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aef2451-e49f-4740-8a47-b57f79ef3dcf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44b2526-2f8b-419e-9389-e3a2606824f9",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445e3ec0-52af-4d1c-95c4-9017cafa5009",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "701d970a-97fb-47dd-8ee3-6a1510efc997",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96aeb41d-ac8a-4663-96f9-d853625390ea",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncOpportunitiesOrLeads[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02fdc2ca-b9db-4632-88f0-9e9adfc9a8fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5add6e9c-3e24-4039-8795-21d40a97fded",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "4ddf862b-3faf-499b-8429-7b7a62cc267b",
                "name": "SyncRegistrantStatuses",
                "item": [
                  {
                    "id": "67bf9559-1df6-4376-ad93-b2a5850f2f82",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24227788-8930-45d4-89ce-50387618f8b5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "400e60bd-bf16-4515-beab-0896369ee75b",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9f7a16-7a3f-41ba-b9a7-10e88b87d84f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24e1f2c-e29f-41b5-a03d-0aa341c2ea90",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4d8098-4292-4074-920e-ceeef780591d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "064a5e1c-45b3-4bcc-a91c-1ca64d5fb00c",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccada7a6-9d29-4842-8ca3-e2099d8a42e1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9c6a87-0d78-44bf-9b0e-e0001cd04c83",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25dba2ac-72b5-435f-9c56-a54cc912cd30",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bca2158-cc8a-4c76-8378-62804794c4cf",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0979c3-bbb8-491d-a059-ed693c82f266",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncRegistrantStatuses[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5d559347-b8a5-4430-9fd4-9c950ab8e50e",
                "name": "AddConfirmationInteractions",
                "item": [
                  {
                    "id": "9d80e9e2-a4ba-4bf4-b279-11756e0dcb40",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "307d161d-0bfb-46dc-b1b9-2c749417bf57",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56d04e5-3f2f-4d69-8077-61057ea0600a",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe8825f-9baa-4049-a2f5-7ffdd50c3761",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ad6d04-0f48-4ee7-981b-4d3b9fdec68c",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3253039-f691-4612-b65d-54dfb5b30935",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49b4043-3a33-4a32-a9c8-ad1a4b5240ab",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c2213f-416a-473c-85dc-f7acddffe3da",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d056dda-e851-4ede-b32c-917f9630f33c",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfdcec6a-ee0d-43ad-b89b-e4a103018d09",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87f9d50-49a5-43ee-8d5d-c325a899a30d",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "419e3196-8a3b-4be9-b543-a7ae4b9ed689",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "512c3645-2682-414a-8898-61c32a0e909a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "91b8cc36-1e04-4f88-bc11-72d47dd1f565",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "bb6280af-5dab-4f5e-ba9f-11f983e8c6df",
            "name": "Corresspondence",
            "item": [
              {
                "id": "e03bb951-779c-4d67-80b7-5dc0e6cedcfd",
                "name": "SyncInteractionsFromEngageOne",
                "item": [
                  {
                    "id": "8b54995d-2c30-4d98-9427-88074edd777f",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2558fe-ebbd-4096-8957-3ee1cd501839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb70ceb-9fbe-48df-9952-966bc095998d",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8bed37f-a90d-4ec4-980e-c874a843f37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9801a6-45ae-46f2-8637-baacdae5bfbb",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690e5d98-3c24-44a7-8e0e-dfc32607f704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ea2f43-a436-4ded-bd2d-2012438ee306",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b3181a-0548-4023-b6bb-d274977eded0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No roles assigned user Test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4f2d56-d5b3-44ad-8a77-59c33b14ff91",
                    "name": "No Body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f176a42-a476-4cb8-9ab7-deff21e5ad08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Body Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"A non-empty request body is required.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "12fae52c-7223-4fe6-88f8-f7f9cce61f93",
                    "name": "Blank date",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\":\"\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd589538-1209-4d8b-a73f-cac265ab704c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Blank date Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"String '' was not recognized as a valid DateTime.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f42da1fb-cd2f-4961-ae1e-3f4640394f0c",
                    "name": "Date not found",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74bdee0-7cd8-4562-bdc1-2e1abcb6de8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b738c639-a707-452d-8624-fdf9a2cba70e",
                    "name": "Invalid file format",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1e7a8e-7b57-4f6c-8df7-233bfc9b6cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "string",
                      "value": "{{TestAutomation}}",
                      "key": "password"
                    },
                    {
                      "type": "string",
                      "value": "TestAutomation",
                      "key": "username"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dca924c7-a68c-43c1-a736-8b715cbe0486",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "779e8976-b68b-444c-8ec4-84414992a1c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21019f0e-3760-4dcf-ba88-0af7289c0515",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "94b5efe7-d13e-4226-abb7-fe3c418c48d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "1db75027-34d1-48c5-9f3f-59880b08d6ed",
            "name": "Actions",
            "item": [
              {
                "id": "676ba46d-2b7f-4521-bdb3-53642f11742c",
                "name": "AddAction",
                "item": [
                  {
                    "id": "cf9a283a-ea2d-4dec-a317-c0f67ba6b066",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53ea59a-3a0c-4670-80ff-db431455b08a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ef7ec7-e47f-41eb-8995-8686cf67dcd8",
                    "name": "Incorrect account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f34726-cf3c-4af7-bb84-df403ca7705f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f30f83-f820-4d2b-9427-db6b79d415cd",
                    "name": "Locked account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3358d6ce-aa10-4e73-821e-873671b2b846",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8987fcc0-0b55-45da-be29-f4843597d11a",
                    "name": "New User account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9512c6c0-7d31-4634-a12a-29cbbd39e567",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New User account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f605dc0-03a3-4eaf-a5be-a51ad76930ad",
                    "name": "Empty Strings  test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"\",\r\n  \"action\": \"\",\r\n  \"actionDate\": \"\",\r\n  \"status\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da62a443-8b7b-4001-8d40-eed5a6ce73d9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action is required\");",
                            "    pm.expect(jsonData.messages[1]).to.include(\"Status is required\");",
                            "    pm.expect(jsonData.messages[2]).to.include(\"Action date is required\");",
                            "    pm.expect(jsonData.messages[3]).to.include(\"Source system is required\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3db218-1c2f-499f-b7d0-392ca656a2d2",
                    "name": "Incorrect source system test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"Ring Central\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "382797f5-5253-48ad-bf63-7ad54aa24b05",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect source system test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value Ring Central is not allowed for field Source System\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed615b6-f5ab-4a16-9913-3e16c25cb745",
                    "name": "Incorrect action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"$%#$%#$^%#\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f918bff-1a4b-43ef-877f-b3da19c13c08",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b3156e-6915-4062-b093-048673d1b478",
                    "name": "Incorrect action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{incorrectDate}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a90e90-b71b-47ce-a1b2-2467ce724f0c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Date \" + requestBody.actionDate + \" is not a valid date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93cc896-66e0-496c-b2e8-4e7fd9fc9926",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "incorrectDate = moment().format('DD-MM-YYYY');",
                            "pm.variables.set('incorrectDate', incorrectDate);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9311a0-9033-40d4-9a26-68ab42ddf223",
                    "name": "Future action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{futureDate}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ce2e7e-ddc2-4f07-9805-aae628a2f4ba",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Future action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action date \" + requestBody.actionDate + \" cannot be future date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cbfd25-5b60-4b02-975f-fb830e761d2d",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "future = moment().add(5,'days').format('YYYY-MM-DD');",
                            "pm.variables.set('future', future);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5905a1-5379-4471-a809-da30922a5013",
                    "name": "Current action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da47e13-7501-4b00-aa27-482a298e5f62",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3b5121-1d22-4da6-a605-23c0f4116cd6",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b92b3f0-bf2d-46bf-9b9c-a7e2132fdc45",
                    "name": "Incorrect status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fd1582-3d9a-4ecc-85a5-e872c759571c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value \" + requestBody.status + \" is not allowed for field Status\");",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ed7561-3e9b-4c0b-83fc-6629db0c6e32",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "28020b5f-57f7-46cd-85b5-b07cbe2ddfba",
                    "name": "Valid status action started test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42683842-24ea-4c27-adc3-b44e729219ad",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da54cb4-3f8a-4968-bb0c-9807ebc84bc0",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2baea4e-27c2-4754-b1dd-025877a4acb9",
                    "name": "Valid status action completed test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action Completed\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532f1743-ccc1-43a3-a683-1329a2885fec",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d6877b-3d9f-4a72-8524-378309c121c5",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "71180817-ce7e-4e2a-9359-4f82a53d00d7",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"SwiftDigital\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e23f78-4d31-44c0-8afe-b2238233c686",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55bf62c9-5baf-48b7-b871-e9dbc99bb3ae",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b39856cb-82ef-4af0-99ac-ed8821eaee60",
                "name": "AddActionV2",
                "item": [
                  {
                    "id": "8483e4b1-dbfb-40f8-b98a-1abf6d3e10f1",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a89e4ab-7ada-45cc-aaba-4469e2b8c4fd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdde726-31f6-44ed-9e1e-ba85d022bb23",
                    "name": "Incorrect account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed3f7fc-d2ff-4d67-9b44-dfa6cb824b66",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "77eda138-b23c-45a7-8acf-ca6242ace921",
                    "name": "Locked account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ee7d92-a6f7-48c1-abaf-2893573c9c4e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d4118d-f19f-412e-9747-ebd8131cd248",
                    "name": "New User account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a51b711-d9f1-45c9-957e-40213e928432",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New User account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53f0fe6-8ba2-4c96-b725-88cf124beacf",
                    "name": "Empty Strings  test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"\",\r\n  \"action\": \"\",\r\n   \"actionDateTime\": \"\",\r\n  \"status\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4519406c-7980-45dc-8552-24ed34677924",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action is required\");",
                            "    pm.expect(jsonData.messages[1]).to.include(\"Status is required\");",
                            "   // pm.expect(jsonData.messages[2]).to.include(\"Action date is required\");",
                            "    pm.expect(jsonData.messages[2]).to.include(\"Source system is required\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db86f1e-5a77-4d6c-b16e-6834d93f1d2f",
                    "name": "Incorrect source system test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"Ring Central\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ffc52a-aaaa-47eb-9c63-81f0afeb3b71",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect source system test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value Ring Central is not allowed for field Source System\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b62b21-3561-4138-9bd7-f28cc19bf373",
                    "name": "Incorrect action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"$%#$%#$^%#\",\r\n \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead1e793-e2f0-43d1-bdce-5c78e6550926",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a482b4-2f0d-4b34-9fbd-a4405302995a",
                    "name": "Incorrect action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{incorrectDateTime}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4b0569-fc11-46a1-812e-e973f2dff88e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Date \" + requestBody.actionDateTime + \" is not a valid datetime\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74b2d34-6d54-498f-81ce-5795fdb47d62",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "incorrectDateTime = moment().format('DD-MM-YYYY HH:MM:SS');",
                            "pm.variables.set('incorrectDateTime', incorrectDateTime);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "13554319-30f2-4e3e-a416-104825831cda",
                    "name": "Future action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "V2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n   \"actionDateTime\": \"{{futureDateTime}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e3aa94-22f0-4a55-a021-1be2ed4976a6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Future action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"ActionDateTime \" + requestBody.actionDateTime + \" cannot be future date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1136fd2-3ee0-4fd5-a964-912527fe4e46",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "var futureDateTime = moment().add(5,'days').format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('futureDateTime', futureDateTime);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d6211f-a365-4821-8848-92786971a0bf",
                    "name": "Current action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8019184a-fdb5-4826-8e80-495eb53ab522",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b85310-647a-4fd7-9d54-5d509754d588",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "60905470-4289-4c1a-9f82-601ef39aa61a",
                    "name": "Incorrect status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9235b3bd-bbb8-4f86-aac5-8c44873a80e3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value \" + requestBody.status + \" is not allowed for field Status\");",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2959a24-e992-489c-9fff-6b5081eef407",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD HH:MM:SS');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e283d8f-0caa-4ef8-8097-994ec242ca42",
                    "name": "Valid status action started test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c4e314-cf6c-4c2e-9495-dd3ef0e18f93",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d5e172-3b2f-4fb1-94d5-a523f221b169",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6606b5a7-c05f-4cac-8a4c-78467c7b2955",
                    "name": "Valid status action completed test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action Completed\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa434ba-265d-4544-ae7f-8b4d2c75c2d9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4977c2-fda3-48a1-ab95-f5900260ee12",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "609b0292-11fe-42de-bd6b-6e875b6f102f",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"SwiftDigital\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30360c51-b93b-4cf7-abc5-2fea72ab7d48",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453922d8-8894-446a-a841-dfe1721ded04",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52560fae-f0b1-4746-95c3-e2314d6b266c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56c6cdd8-5f00-4535-98d1-b0b004d53442",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "36e5b62b-0d2d-49c4-a1a3-91bf10830d4e",
                "name": "SearchActions",
                "item": [
                  {
                    "id": "7e35f24a-7c4e-47dd-9cea-6c9ae8cff4a4",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9cd48e-d612-4211-a7e6-67e214b121f9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d430db-f477-4db9-aa25-c324ea38b50f",
                    "name": "Incorrect account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cb1c80-996c-412a-ab87-5ec4623310a5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5f818e-84c9-4875-9be5-82273cfbd66e",
                    "name": "Locked account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e26f5d-1510-4712-ac87-60b6262fdfbf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f45cbc-fe01-4368-83ab-879e25697b57",
                    "name": "New account test ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "364d6aaf-1bc4-42df-a02d-af5c8f19f9d6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "63654cc0-ccfc-4041-ac3f-7501d6feda9a",
                    "name": "Only client Id test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501\r\n}\r\n\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2994fc2d-0262-4ee0-b746-e72a6340e295",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only client Id test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa2253f-0e0f-46bc-b6e2-dacba14d6b30",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6c14db-20b3-480e-9270-1228c9631710",
                    "name": "Only action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \r\n  \"action\": \"{{action}}\"\r\n\r\n}\r\n\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db223a2d-b51f-4afd-96e9-8fd1e3e5771c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e73bed1-e229-4349-b0b0-87d219827fd3",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e94c51-1c5b-4c0b-8eb5-68244f4077fa",
                    "name": "Only status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\r\n  \"status\": \"Action started\"\r\n\r\n}\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c062cf4-2d70-41ce-9c66-d4543dc0b095",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67409079-dece-45c2-9f8d-92fcf5b5e48e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ec9fae-2509-4768-8020-cabd633c49e0",
                    "name": "Only page size test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\r\n  \"pageSize\": 2\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db483db-7bcf-4be9-b1d7-8b89291884bd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only page size test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b845ad6c-c996-4123-838b-f0563974ccb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7ed711-fde4-4889-bc29-d92f94b5f252",
                    "name": "No body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e51cd7-4372-44cc-8e58-5d8ce215d90d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.false;",
                            "pm.expect(jsonData.messages).to.include(\"The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true. Path: $ | LineNumber: 1 | BytePositionInLine: 0.\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e0b156-58f4-47f2-abc5-17c6376b659b",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c82482-d322-43c0-aa9f-f94d91c71ccd",
                    "name": "Blank body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\t\r\n}\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a47fd49-c122-4ceb-a403-63d71c983c9e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Blank body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56103df-72ee-4b5c-9fc6-85f3a63247f5",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d37b2823-1963-468a-babb-3c49b5f28f47",
                "name": "SyncActionsToSalesforce",
                "item": [
                  {
                    "id": "436e2cb3-ef0a-4ca3-93ca-c37981aab508",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b710876-bd0a-45b3-8d05-cf2da71c4ff6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d17dc9-9b51-4b35-984b-0c0ba91a8e1c",
                    "name": "Incorrect account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d664c1c2-9a8b-4aaa-9272-4dca2a1b3bf3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c5a42c-0719-4f2d-9589-8fce899337d8",
                    "name": "New User account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7624aaee-4c03-4fe0-8d6d-9ec3ca679e80",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b0434a-a808-4935-8af2-fe11650ce2a2",
                    "name": "Locked account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5217eb30-5b01-40f4-9d4d-89d8eecd10f2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c43411-02ac-4be0-8be2-3831d7e3f6a7",
                    "name": "No access test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3122232-8405-4adb-85e9-ec3e200c6064",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No access test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2915f4f7-7305-4362-8432-ec89fa85b096",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1a6715-7126-4254-893d-830d1313c194",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No access test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.include(\"SyncActionsToSalesforce[INF] Sync complete.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da0c9bde-e559-48b4-803e-ed92f2ca8085",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b94c7f55-206f-4083-bc92-feac67a6ba02",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5a30a96d-8905-445b-9508-9c9915fa703f",
        "name": "EinsteinAnalyticsData",
        "item": [
          {
            "id": "797a1250-e2c4-4c6c-af20-fd96799d61ab",
            "name": "Einstein",
            "item": [
              {
                "id": "473d3fe8-85cb-4c9f-b401-099ed39741fc",
                "name": "ExecuteSPEDWHerokuMembers",
                "item": [
                  {
                    "id": "bd1a340b-4985-4205-a647-f11dbee7330c",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6763a19-27b9-4a4f-9f81-7cb6149db155",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933a5f01-9f6d-4e14-897c-8300eddaf5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "100db205-2293-481f-ab76-f637d5f5c771",
                    "name": "Blank stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e408369a-8703-4e54-8b8b-e039c1c9b722",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Blank stored proc test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c673bc48-4892-4803-b235-72840dc64bbc",
                    "name": "Invalid stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[usptionSFMemberAnalyticsFlat]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d83a697-096b-47b8-9a44-6a6413a3e37c",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Invalid stored proc test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"Could not find stored procedure 'wrk.usptionSFMemberAnalyticsFlat'. [wrk].[usptionSFMemberAnalyticsFlat]\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8542569f-3a69-49d7-8488-0ae86ebad77e",
                    "name": "Unauthorised access test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd8ecaa-9ca8-47dd-abd1-37f0bdd485cf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"Unauthorised access test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34970892-b8e7-4558-9284-2078f9ab98d6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"test\");"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "878c01af-a6e3-4963-8dc0-c87ef513bc35",
                    "name": "Blank body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3ec07c-769b-491f-bc5a-e2598e6c4526",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Blank body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d13d0a1-4919-4b87-b345-8f218a2e4688",
                    "name": "Another valid stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAccountTransaction]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf643f1-62de-4050-9d39-5b1ee05c5e43",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Another valid stored proc test\", () => {",
                            "    pm.response.to.have.status(500);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"Procedure or function 'uspIntegrationSFMemberAccountTransaction' expects parameter '@startDate', which was not supplied.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "18706abd-bafc-4c50-8f63-6e8fb4f03268",
                    "name": "Valid ExecuteSPEDWHerokuMembers test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAnalyticsFlat]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504d9c7d-b6f8-411c-8e26-029260a0e031",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Valid ExecuteSPEDWHerokuMembers request\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f6391d1-ea2b-4cde-9f03-83373f56c4ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b801ed98-51e1-430c-a3fb-a1c78faa935a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eafc03cf-e0a1-4f0c-9900-b2ff14b2b238",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b46dbc8-8c5b-410c-822d-eb05b5bf2b12",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "edb9d329-8576-49af-a21e-645cb4ee0032",
        "name": "FileConversion",
        "item": [
          {
            "id": "76a41407-f814-477d-9bfa-d5dbcc076c9d",
            "name": "NasFile",
            "item": [
              {
                "id": "85ae11d3-c2aa-430d-8a81-054e7eada8f6",
                "name": "ListInFile",
                "item": [
                  {
                    "id": "5d246560-0046-444f-803f-2b7039a42517",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05b7972-b788-43d2-8e1e-d6551b8685f5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e25e867-baae-42bd-92eb-97f77f051517",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a00482-360f-467b-911a-7f4375f903ed",
                    "name": "Username and Password not provided ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4085a3ec-687d-4a10-81d4-c68cf90666a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a35c40c-9f56-49cb-89e1-8511f6e00161",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "08cc7f90-5eb2-4741-8b0a-a5dda4deaf49",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00a603f-ca63-43c3-9b71-6f90cee09b3e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7e2a0c-6e45-4a57-9d87-6101534a9883",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e46d79-a6be-4e8b-b47f-e365f03ac309",
                    "name": "valid list in files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": ""
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0cc452d-edcf-4760-8680-0242de6dee37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\in\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName+ \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf22bbb9-88a5-4903-b643-95ed27654a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "d86055a4-748c-48ab-ba11-af87c1ce3e42",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9faa0fff-0ecd-47f2-ae63-b40353328a00",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f610fe7d-cacd-4da8-ab9b-d0d16d7926db",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "449a4097-f92f-46f1-9d4e-29341c070a85",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59448e84-32f5-4a9a-b92b-d68b226a4e0d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8f831e-64a2-4af0-a638-03241bddc4dc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c676a37e-83ec-4b42-b848-03ec200936a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "866605cb-a022-46e5-a99e-78460c99f8f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "aee7f0ef-0e06-45ff-9681-f61f52d73fc0",
                "name": "ListOutFiles",
                "item": [
                  {
                    "id": "6e1f28e5-cfd8-4aec-a9e9-b110b7c2edf7",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3667fc-4289-401d-91ce-5ddd59200593",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "835f44a4-f109-4182-80ea-c02c79421b86",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "87712b02-33d5-487c-9bdd-3a877577fe39",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5911d113-0e9f-48e5-9ad3-97d960a7d380",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71514f7-9c1d-4717-8a77-1fba48c6c1e9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c62007-81b2-4345-9f54-071e7fcc34f3",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fcf06e-788b-44d5-9215-437413881b7a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "637558e3-825b-4254-b0c5-2a5aaa00011b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca03591-3bc7-4919-b5b7-0ba95e3c0a5b",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427c9330-ea56-415c-bc77-da3bf902befb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39964fa1-b081-46a0-bb19-e066c6796961",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06c9ee4-d70b-4d05-81c1-ebd57ab75e09",
                    "name": "Username and Password not provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4114d42a-b056-4579-8511-fc7dd55456e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a618871d-6edf-4fb5-b5b9-1246a7e7287f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdf97cc-9486-4431-9538-e40fc0810189",
                    "name": "valid list out files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFIles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": ""
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432989b5-0e87-4459-b6be-08f0a8603a4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3ef946-fad1-4d7c-aa53-c0f18c62274a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list OUT files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\nas_staging\\\\out_staging\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e72c18f8-ff39-47f6-b7f5-e66d68a66a63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd8bf916-5592-471b-b3ba-9f4c882e31f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "00c8c0ef-0dd2-4fe1-9d60-593323a2235a",
                "name": "AddInvestmentOption",
                "item": [
                  {
                    "id": "aa9950aa-2d38-49bf-858d-6eb0f37badcd",
                    "name": "Only Fund Name is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundName\": \"ABCD\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0626eaa9-2b70-489e-bfba-f18673ff068a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Fund Name is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef82603-d98e-413c-a25f-f7edc39bb390",
                    "name": " Only Nas Fund Id is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"nasFundId\": \"QL81\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50185b6f-6e2b-4d22-a1d5-a42526898c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Nas Fund Id is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f736f5a-ca47-46f1-9518-b98ed1d7b9aa",
                    "name": "Only Fund ID provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"fundId\": \"QL81C1\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4121cca-ce10-4550-80e5-12b1773898ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When only Fund ID provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Name should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bb5588-97f5-4f88-94a0-6fcca8bda083",
                    "name": "Duplicate Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL82C1\",\r\n  \"fundName\": \"New CITY DB OPRTIONAL RISK RESRVE\",\r\n  \"nasFundId\": \"QL81C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734868f2-273f-41ff-ac3e-cd47962f8911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Nas Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2874bd2-62f9-41fa-bd38-e0764e7075af",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "user",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "user",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76be6ce9-42a6-41ab-b79c-99ef94ab9c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf8658f-2e92-48fc-86e0-feea89b4a473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Username and Password test\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "242ccefd-638a-4245-a019-7b808b9e3431",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae413b75-4024-442d-b02a-4411bf152b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "65afd941-77e3-427b-8312-1d098f9bc79e",
                    "name": "Invalid characters in Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"@#@{{randomId}}@#@#\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df0ef23-b00d-4d63-bcb4-5803d1a76575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ba597a-cbff-4d2a-af22-8b2c30eda208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff4d055-50b0-4ad9-82f5-4c6e259b6251",
                    "name": "Duplicate Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"QL81\",\r\n  \"excludeFromUPFile\":false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "497d749d-5436-4d94-9a77-34cdcceba7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "563879f0-6a19-4590-b9a0-7858cd582442",
                    "name": "User with no access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d2f626-d32a-4393-bb39-a6e5b3876ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd5287e-2b28-4af6-bd97-009037e97724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"User with no access\", ()=>{",
                            "    pm.response.to.have.status(403);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ce3e32-f202-4e57-9885-d3ba5addd0db",
                    "name": "User locked",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3001d91d-4605-4c34-8c98-db3090ba481d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd79344-67ca-49e7-9610-82d3335ecaec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked user\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6165966a-dc4b-474c-af1c-82f838ad512c",
                    "name": "Invalid characters in Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"$@#${{FundName}}#$#$#\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06de543-a403-436f-aee2-28c92530afc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund Name test\", () => {",
                            "   console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        ",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daecfd54-75ba-4349-be88-852c6bb97709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f411b36-c3a9-48d7-b81b-fece49d1b440",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d716b689-3e9c-42be-b8bd-514ab02bd4a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "648d4ff2-ca04-47f0-91f1-a42c667f133f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6bcd74-bf01-43c0-bb9d-e676f5cc62a5",
                    "name": "Empty Request body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09656bb1-3271-4358-abe9-049042109caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty Request body test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d0f877-bc74-43ac-8e59-c1e76bdc72ae",
                    "name": "Empty input fields",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"\",\r\n  \"fundName\": \"\",\r\n  \"nasFundId\": \"\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9214f41b-8b2a-4791-a7f6-1a5387711d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty input fields test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a744b0f6-0144-4f18-9662-6c97f4fe2af4",
                    "name": "Invalid characters in Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"%%{{randomId}}#$\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906c1481-fee5-497b-bb7d-37273cb1ff5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e834aa2-dcef-4fe9-8553-8633dfb1c244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f2a5ae-20ad-40c4-885f-8777c5363847",
                    "name": "Valid all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bbb786-796f-46ac-8435-a1ac8352d03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All valid parameters test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20dce26e-c2cf-4f8e-9465-623efff7e0bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6e3a92-0360-4c40-83b2-e50736ae4e68",
                    "name": "Duplicate all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"LG AGGRESSIVE ACCUM OPTION\",\r\n  \"nasFundId\": \"LG18C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff49d9a9-6282-4d83-8887-69917b7341c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All parameters Duplicate test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    ",
                            "    pm.expect(jsonData.response[0]).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Correct message validated: \" + jsonData.response[0]);",
                            "    ",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Test completed\");",
                            "",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50bc3a86-1dd6-4ed6-a667-7370dcd9015f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a06f85-95b8-46bb-8dfd-ec39edcd5f52",
                    "name": "Duplciate Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n   \"excludeFromUpFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e6952e-2c87-4496-a07e-bdb6f5275fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "  ",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30deb400-72b4-4ec5-a85f-2a245e8facc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a390ebc-46d4-4d11-9c4c-ce846f64aecd",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "15af0d5e-ec40-4173-91d6-13dbea64fc6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "857943a6-bb7e-4129-956d-b26c51ccc822",
                "name": "DisplayInvestmentOption",
                "item": [
                  {
                    "id": "b619e91a-2314-4167-bc39-3956b28abd36",
                    "name": "End  to end test - exclude from up file true",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6943d390-2740-4c39-a039-a7f0ed6d28cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(true)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b4d93a-7143-4841-a665-521a6e77077a",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: true",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c14793-d79a-4a54-8a27-b58c81990a96",
                    "name": "Valid  FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2314123e-21ee-4b5a-86c4-47be3ef3f54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Nas Fund Id displayed is: \" + jsonData.response.investmentOptions[0].nasFundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e867be-cea4-4c4f-adef-6708d243abb2",
                    "name": "Valid NasFundID and FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundId",
                            "value": "LGGBCY"
                          },
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0e1487-6544-49c7-97d7-ecb06eac5403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundId\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundId\")) + \" matched.\");",
                            "    }",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "43bb6e6b-c473-4c63-9ccb-0fbd7b30bf74",
                    "name": "Non-existing FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb05c4ba-91a6-47ac-bfef-ca9f7f4dca74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2deeefc-677d-4e8f-8616-930aed106644",
                    "name": "User with No Roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32669b5a-4e66-4198-8c3a-53a8b6a12c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2c788e-657e-471c-b5ec-53e73bc4b879",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef7e0e9-a839-4d83-9c90-96593b8cbcbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "46cf6841-ef51-4ffc-b605-11722dbd38a0",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "GBCYC1"
                          },
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe23198-00e0-4bd8-a713-62da452a003d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0971705f-33c0-48a9-a104-ccb4232ed1ff",
                    "name": "Incorrect username and password ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "incorrecty",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "incorrect",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349acedc-7e53-4c6d-92b8-4f944a4e5ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3f0bc0-97fb-4616-ba38-1bd97ddc92f6",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40aded8-f35c-4870-b6d7-dd3bbb44c90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabc5332-14b7-419f-9710-3bc6014ef20c",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "288a6da0-a210-4f76-bc2a-1308f9a9bb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8185319-27c1-4e4f-af62-d80b2f09a8eb",
                    "name": "End  to end test - exclude from up file false",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f882b87a-41bb-4c18-80ad-778678758ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72787bb7-10d2-43b1-aa30-dfb3d77a8af4",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: false",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "948e29a0-0e81-43fa-b3eb-8f8a58d10877",
                    "name": "Blank Parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5012239-b7d8-4b5b-9e1b-723f15c75859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const length = pm.response.json().response.investmentOptions.length;",
                            "    console.log(\"No of Investments options records:\" + length);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "80dd8cd0-ed5e-41d6-b2f7-6c39ee90fc29",
                    "name": "Non-existing NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87a7a14-c943-4163-bde9-a52730188ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9c875d-5bc5-49d4-9dd4-6351b6abe2d6",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4b98d7-05db-4482-95c9-bcb226501737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e7a5ed-003d-47e1-8fa2-271650dd1733",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66311356-3161-43ef-bbb1-41a75d59a58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "660b56a6-e7d0-4f2f-840d-8515c7a49ed6",
                    "name": "Valid  NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "LGGBCY"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abbbffa-fb86-45b5-8f61-596d996fdbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "231b1879-b703-4fab-aa38-7403dd2fa52d",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b6f2c41-abed-40a8-b4d1-f9f7e28f1835",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "bbfe9b66-1475-4568-89c4-e6b6086bec30",
                "name": "RemoveInvestmentOption",
                "item": [
                  {
                    "id": "70ad4508-48e4-4151-b3f3-28e5642cbf6d",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a3008b-b578-49f5-a9dd-53624352b5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e8b48c-b9f3-4ef1-920a-8c84f4e785eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "358c0122-e0ce-4dc8-a0b2-68ab33705cdb",
                    "name": "Incorrect username and password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c31143b-0895-4bcb-ad20-fc94c3ea72e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373b9b82-181f-4daf-9ace-8a1953139d17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "756fb3c2-b9d2-4b7b-bf50-d3b2a6960afc",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96091861-a3ec-44d2-bb44-4ddce1932413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7032e959-5497-48f7-a9d4-aa5e2a86656e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed7531b-fa58-4e60-8369-a088259901d0",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c69121-3120-4933-9ced-2ab36855f813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d749fcf-6999-44e8-be9b-5bafb8da5a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c74b81-d715-4b47-b993-fc2dec4cfedf",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57577b2f-8271-41d7-a302-1e4f95ea267b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf6cc97-67ca-4dcc-abb6-b294817df83e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "632cc73d-bd63-45a7-acd5-97265c08c162",
                    "name": "Blank parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": null
                          },
                          {
                            "key": "nasFundID",
                            "value": null
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d20e1af4-a0ac-450f-9afb-b2c6b8202c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response[0]).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "    pm.expect(jsonData.response[1]).to.include(\"FundId should be provided if NasFundId is empty\");",
                            "    pm.expect(jsonData.response[2]).to.include(\"NasFundId should be provided if FundId is empty\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b2e7fa-e06a-4b97-b807-fc66fca568cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46ab4d5-5efa-425d-873a-454250bef978",
                    "name": "Non-existing FundID ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9740aa0d-4237-40fd-8eec-d91328ad075d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257fd728-fab5-4399-8ff1-2dbe7ddbe079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea814a8c-fbc0-4878-955a-6350cea92f14",
                    "name": "Non-existing Nas FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f05b5a-21b9-47f6-85ce-832d5005e217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb76f6e-707b-4013-b444-9e01934d0db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a498e10-21e9-4529-9322-d958634c2401",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9d1272-e80b-4149-adab-47a676513d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc6149b-975d-4b34-a67d-797921c8365f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9df303-b35b-40ff-9f5b-859eaabe8e31",
                    "name": "Valid FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f47d1a4-8f5d-4134-8313-e5535a1dd5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId =  successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ce3235-03ea-4213-b23f-b67ebe13a16e",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a852c9e5-6372-4dc0-9801-25dc6ee5e2da",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3664c6e-c6b4-4095-950f-230e6df4230e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60184f84-1d8b-4255-8837-1ae0999ba4f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1a78f2-1c66-4832-942d-cacdeb57d7d7",
                    "name": "Valid FundId and NasFundId",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf8fbac-dc8f-40c3-a214-99328aaa5dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e3c27f-421c-4ae7-865d-64689b9bde92",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "876768c0-3825-4e8d-9973-0c8eb5945573",
                    "name": "Valid NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e70080-039a-44e6-9a1c-0248a6e65dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = , nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05adfe7-62c4-4331-aca9-278732654ebf",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c0ee11-bf08-4552-be9a-0aadbc4bad09",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682e5ae0-812d-47af-b32b-7cd3b538b08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa607aee-6ba8-4c0b-ba47-9c16be4b131d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d7b03aa-b2d4-4720-9c1f-f35424bc82f9",
                      "type": "text/javascript",
                      "exec": [
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b84b50ce-0583-4356-a844-8cccafc2bfc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b9bb127-7c57-4d03-83e5-3e5c73a4084e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64a36494-8bb8-4bed-a334-692b7c31f1b4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6da9278a-0213-454b-a516-1e4dacec749c",
        "name": "Swift",
        "item": [
          {
            "id": "c78cffc7-f553-4caa-be7b-117cba0b1fa1",
            "name": "SwiftFolderConfiguration",
            "item": [
              {
                "id": "6ee91696-0040-4383-81a4-61ab734364cf",
                "name": "Addfolder",
                "item": [
                  {
                    "id": "4716a6fb-12f2-4d3a-bf32-978ec94681c3",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f744178-75af-419b-bb6b-631c8ad3b4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "52b144e0-3315-415e-9dfc-912d5f56df74",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddec7c25-c208-4489-9500-c79e77eb5e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "88d5cc37-9279-489c-a7db-9a196a3f5d4a",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d40f22c-582f-4e73-b6ff-f0e7a45058aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "40a9d668-81a0-4107-808a-97b42a1b0c57",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba0f265-507a-4a8f-aae2-328f1281a85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "b173bba8-aeee-4cf8-9fa4-19eb9d9e4ab8",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec2e951-227b-454d-9149-9d5aecd44ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(405);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": []
              },
              {
                "id": "17201365-2b27-49ef-b67b-bc310d938fa0",
                "name": "Listfolders",
                "item": [
                  {
                    "id": "84a3f033-5433-4ae0-b3d7-dd47174e4567",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8608b1f-7611-4b1d-9926-782e0a4beda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b6ac46-d827-4345-b4c1-c0eb211fe69a",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "372c63a0-5512-4ca6-99c4-1383826e9671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5637ad-b1fc-4ca4-b625-0498b9a762db",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d4b053-c6e0-4a3b-8966-0f885b1800c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a23ad43-1cc0-4092-80ee-4b9aa2af3ac4",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377e0ec6-e72c-4be8-955d-25501d564195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d11e9e-1918-4718-a0d2-eeea5dcd4a96",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70640902-bdaf-4352-98b2-0017bf419b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "86413952-9f78-433c-a28e-4c09b3cf57f0",
                    "name": "Valid list",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee31fe8b-e5b9-4b65-9d46-fcb9bceebb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    ",
                            "    const numberOfRecords = jsonData.response.swiftFolderConfigurations.length;",
                            "    ",
                            "    console.log(\"Number of Records:\", numberOfRecords);",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9835a86f-9df3-45cd-a449-50b4d2ec39c5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b0bf71e-08dd-4e80-ba34-73df04efb48f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d815fbbf-4034-46b3-a308-8b647bd0c974",
        "name": "RingCentral",
        "item": [
          {
            "id": "bfbc63fd-78ad-4992-ac5d-833457856d3b",
            "name": "SyncCompanyCallLogs",
            "item": [
              {
                "id": "891c1971-28b2-413f-aba9-fb7b6c1efe37",
                "name": "Date time exact value with time zone ",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-07-12T14:10:26.2410000+10:00\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16d9836b-a8ed-42f9-b694-2354dd899c8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Date time exact value with time zone Test \", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21fb117c-e498-417a-ab58-e0fdc89b9986",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "c82d92f1-1ddc-4919-aff6-a2c5ae140252",
                "name": "Delta sync",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5cc93541-938f-4933-b2b5-bd2b496d5ee4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Delta sync Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + pm.collectionVariables.get(\"todaysDate\") +\"T00:00:00.0000000\");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "812b6331-13d1-4e35-845e-2305ca42996a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "2d85b274-3e83-4265-a912-3a5adbe9cb65",
                "name": "No auth",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f979cfc-f142-4b1b-a103-efcc17f6681f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No Auth test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "604b4316-3009-4672-8e0e-96496359fab1",
                "name": "Incorrect account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e315f85-f5a3-49f2-b321-0204bcafcce6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "076646a6-0eb5-4708-afe8-ca88a26a42fb",
                "name": "Hours ago",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58d69fe0-b27c-4f57-8792-b71dea8030d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Hours ago Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aceef537-61b5-48c5-8921-4a061c5368f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1f0d1d07-9871-4cfc-be1a-56bb2fe4a922",
                "name": "Locked account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b754fa15-0f9d-41fd-ada5-92141a67dcc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "6c95b823-a6b7-46ea-958e-d08cb6bce3d9",
                "name": "New account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "298cc957-2f94-4b64-85ee-e2f18f85ad22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "3abf4216-f4f2-4d50-bca5-a88f2445ec38",
                "name": "Sync all logs",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c8f94f3-8590-48a1-aa53-5d9ff4caa40d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Sync All logs Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31887a06-015e-4cf2-9b82-624e1d8a4d57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1d072f10-0cac-458d-a14f-01f91572b33f",
                "name": "No access account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c18d4ea-f39c-43e4-9a89-04700c01c496",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No access account test\", () => {",
                        "    pm.response.to.have.status(403);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "7b5d8046-bca2-44b5-ba13-bf63ec172c63",
                "name": "Blank body",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d750e42-44a3-47da-af35-0e302521a1ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank body test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"A non-empty request body is required.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "8444bf16-8b1d-4824-952d-f5fac7dc22de",
                "name": "Negative pagelimit",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": -100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35183b8e-f23d-43c9-ad49-658d103be65d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"negative page limit Test\", () => {",
                        "    pm.response.to.have.status(500);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"An unknown error occurred. Please contact support with the trace identifier included in this response\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.not.be.empty;",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6280589b-106c-469c-a8b3-835227eb458c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "5f9b7a96-ad41-4219-a01a-83f2cf7e52f7",
                "name": "Blank date from",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ee98216-38e0-4bd3-8d69-639db8b4df1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank date field test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 16.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "f89c7606-e196-4a7b-bb15-f9ed51032625",
                "name": "Blank date hour",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": ,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "646c06ed-6486-4d99-9fb2-64afc0d58fc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank hours test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"',' is an invalid start of a value. Path: $.hours | LineNumber: 2 | BytePositionInLine: 11.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "2f809e73-e37e-46d3-b3e7-fb168bb6da2f",
                "name": "Negative hours",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": -24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "20636895-46d7-4103-bdcd-cc6718afb7d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Negative Hours Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "   const requestBody  = JSON.parse(pm.request.body);",
                        "   const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32291cd1-3afb-4dda-8925-4a896ded2b30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "c1acedf0-0f13-4b00-b2ec-c6c40ea85a4f",
                "name": "Blank date pagesize",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": \r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c0ebe03-6eab-478a-b5b5-c7144ee9f397",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank pagesize field Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"'}' is an invalid start of a value. Path: $.pageSize | LineNumber: 4 | BytePositionInLine: 0.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "03480110-2d6a-4235-b70e-68651149c3f9",
                "name": "Invalid Date From",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"12-07-2021\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7a63aa3-cb52-45b4-91dc-223bce7f55ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Invalid Date from Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 26.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4aa481dc-7164-4e90-bc1d-10abc446ffd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d54b1d04-c06d-4503-9cec-baf694355b10",
                  "type": "text/javascript",
                  "exec": [
                    "const moment = require('moment');",
                    "pm.collectionVariables.set(\"todaysDate\", moment().format(\"YYYY-MM-DD\"));",
                    "",
                    "pm.collectionVariables.set(\"todayiso\", moment().format(\"YYYY-MM-DDTHH:MM:SSZ\"));"
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2e44c46-452e-4014-bb83-3c46838cfe38",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3a411d0a-5a13-43ac-8e41-c39e1dac174d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "841fd920-7be9-4e63-87d8-09ae40cdd493",
        "name": "LGIA.Internal.Sonata.Helper.V2",
        "item": [
          {
            "id": "942b153b-6c94-49af-8f06-204a1819c01c",
            "name": "DigitalByDefault",
            "item": [
              {
                "id": "5600b7ec-9cb7-4616-b85a-18fb6dab18cd",
                "name": "SubmitCurrentImportDataToSonata",
                "item": [
                  {
                    "id": "605685a7-3144-42d5-88a7-d47f97a63573",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65868c97-fd6a-427e-a308-d148391fae89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcbf0c5-8e33-4e55-ba63-2ad6db95ab83",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd61371-841c-45ae-a2f6-bbf0746e52cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4d5c15-7e94-4076-bf4b-be72f0c43073",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e550c49-8a34-438d-8f8d-643430f681fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "",
                            "    const responsedata = pm.response.json();",
                            "    ",
                            "    pm.expect(responsedata).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3366ce9b-1b0a-471f-8f0f-ea08a84da788",
                "name": "ReduceCurrentImportDataRows",
                "item": [
                  {
                    "id": "b8450f5e-e4e9-44d7-9a32-7a1c70d9dc50",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "704c27c2-b359-4efe-8ce5-b2a2e9501dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8028840c-db00-45eb-b8ea-18290cd47c41",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "10"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54de627-736f-4a71-a580-a0d648a03e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51c6fff-e0d9-4cf2-8569-fd8d1d513d14",
                    "name": "Incorrect rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "wewetwetwt"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33786e7d-e75b-4cda-a7da-785c7002f147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect rows to keep test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"The request is invalid.\")",
                            "    ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c07b361-6176-4d61-8c80-c697f7dfe74c",
                    "name": "Negative rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "-10"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ab4143-7939-4479-872c-3fcd77a34cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Negative rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.false;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8286914-4395-4d61-ae9e-e8fcaf8b2bb2",
                    "name": "Big rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100000000"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3671bf-b3f3-4205-a2d5-a94b2ac161cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Big rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.true;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea019b0-c245-417e-b320-4c9fda2f0c91",
                    "name": "Zero rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100000000"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6564a840-4ba0-4c5a-a8f0-9a550488095c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Zero rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.true;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "234ca032-5bc8-42ce-bc89-e084d41816b3",
                    "name": "Blank rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b37f2b-f719-4eb0-9b86-8e4492ceb3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Blank rows to keep test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"The request is invalid.\");",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a86f46e-ddef-4250-8076-5a76fc47930b",
                    "name": "No rows to keep test Copy",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24dc09e3-3c40-4bff-8c85-d333ea91dd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No rows to keep test\", () => {",
                            "    pm.response.to.have.status(404);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"No HTTP resource was found that matches the request URI 'https://intg-mcro.internal.lgsuper.org/sonatahelper/ReduceCurrentImportDataRows'.\");",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d554217-804d-460e-bf55-4b58766e9fe1",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80196880-1a99-4622-9967-a86efdb03377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    pm.expect(jsonData).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b465dc77-bcfe-4e2e-b626-e2d50bf66a37",
                "name": "ExecuteSPBulkImportData",
                "item": [
                  {
                    "id": "8df235b6-6964-4be7-af2d-958def170fbf",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d990f93f-ff08-4ad6-8a3e-70e1cd70af53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "725de433-faf0-43a1-bbde-16008c461bba",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e18a52b-6f42-4912-b20b-4effc01e2301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "80db6d30-aeb3-40cb-b627-b1a310d82024",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dc779b-7e1e-42ff-b7d3-1c6877e31cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "065dbff7-e802-45d7-bd56-95842fdb6f7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b25cc895-9fd2-4153-9dd6-c1f247c069eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "20e72dcc-cfa9-48bd-b5d6-038a790300bc",
                "name": "ExecuteSPDailyImportData",
                "item": [
                  {
                    "id": "ee080a6d-e8f4-4574-a285-8cf9d158afb1",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPDailyImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf232d0a-6e47-48db-bb1e-1fabb5e655b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2ed8a8-0826-4570-b686-f1966b491eae",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee09d3aa-43a0-4ad0-b853-49490b6a0cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "af725d2b-ddea-46b5-95a1-a7767c68ffec",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPDailyImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cfaef7d-e423-4ef0-a658-b31dff63cf83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3bef147-06d0-4855-9ad0-b0798257fc95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ea0e788-bcea-43a4-84bb-9313f2dfb08b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "e411e54c-9dd0-4fc0-b098-64998ffa9c79",
                "name": "SubmitBulkImportDataToSonata",
                "item": [
                  {
                    "id": "55ed2fb7-a38a-40c2-91c8-e8f71447b4c5",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1e638b-5e6a-4c2a-92ac-59678f3e3a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f030dc-5c9d-4bd7-b4d6-c26f3336e769",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da4eb28-e2b5-4dfa-8ce5-f4c8e9c2e930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1d2100-f1b1-40f6-bc8f-cc69ef2329cd",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed11c837-b31f-4586-bb2f-ae73a606c3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89e74eff-6752-4d6e-a232-90aa1cd77bf4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1301cf36-9bf9-4672-bc07-715d3454af93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "bdbe429c-54db-4c88-8293-4497bc939533",
                "name": "SubmitDailyImportDataToSonata",
                "item": [
                  {
                    "id": "85b244f9-f968-40a9-a837-7e6ae427e184",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6ee2e2-47d7-4996-a6f1-bc205ee46931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca235217-5b76-46a9-82f2-7e63f71c510a",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd580af-f1ff-424e-9a51-b6ec9bba2625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d88f5c-c8fd-48c9-9d0e-a1d26aa88d66",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b10171-c725-4cb6-9895-6a1e02aa0ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    pm.expect(jsonData).to.be.true;\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93f99f0f-e43c-4a81-994f-bc152b00c9a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3b0534d-b36d-4b58-ad22-9e27318ce729",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "f7d82861-9d56-46d7-8381-3417b1d7074c",
                "name": "GetCurrentImportData",
                "item": [
                  {
                    "id": "a37121f6-eefa-406e-b3bf-44905f9e477e",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5654ea4-4737-4c7d-ba4f-f4f85fe7726d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b642a506-4fb8-4890-b268-4c51225226f5",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2915e6b5-fa1a-49b3-b8cc-80ab66193469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6520728-2d6b-4858-af32-7bfa69b0db27",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055405fa-b80f-466e-a338-a050c0a061fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1187a6ff-8454-42e3-a9fa-ddd345fee9ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31868fb6-58b3-4488-8f62-14111f232929",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "e37b24b1-4502-4bf4-b9f8-364876bb0abf",
                "name": "ClearImportData",
                "item": [
                  {
                    "id": "cac8ac73-e8e5-458e-b5a1-2412855a3498",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457217ba-ddd7-4780-9f7b-23f235bb72b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6681e4af-d068-4f95-b40c-106a0f007388",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df801ee9-a83f-4abc-bf7a-5edbf29c7c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc0653a-86f3-4f6a-8770-de076bb9a74b",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce60f87-914d-4e4d-aae0-441580884574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3cf1ab8-206c-46c7-b909-822df3c3a9ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "20de377c-2a59-4a80-84a1-cffe77d13d5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "6cf3dab5-22de-4765-863f-789909f8d3ed",
            "name": "PmifInsurance",
            "item": [
              {
                "id": "379a4653-894b-4c42-97cc-5d10097540f6",
                "name": "PmifInsurance_SubmitPMIFOptInRequests",
                "item": [
                  {
                    "id": "aad86c17-1782-4e26-842b-fd210d95b868",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "497e2251-af4b-4705-abd5-781371456366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf40deeb-ca56-455d-83c5-d15e4855bd66",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80259851-0acb-4c97-a215-2b313d3c9948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88b26f7-f4a5-40ff-9a82-71cd0c001754",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0392f831-4150-4871-be6c-95f32e7e2cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid test test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        \r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "32a21bc3-6681-4fc8-b99f-b915cc0e5474",
                "name": "PmifInsurance_DeletePmifInsuranceOptIn",
                "item": [
                  {
                    "id": "2908eefe-f33d-4567-9e80-fed68235a3d6",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "3016"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671159e2-569b-4fa6-a02d-2cd268d81e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccc1fb4-61bf-4bfb-bbc9-e2d84cf658ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f7394f-a747-4738-88c7-24b79d74654e",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "3016"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2684837d-cf03-4817-8629-e18871af4645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98ddbc2-d92e-40c6-a59f-ed587b75c105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ec70a8-8d00-4138-889a-f2b041f796f0",
                    "name": "valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "{{optInId}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b156302-6b82-491d-851b-e01e6f42b497",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Create insurance record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56358522-abe2-4b8f-9e25-da92c78b750a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
                            "\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "45581ea1-f832-44a3-8ac1-304275c7e99e",
                    "name": "Special characters ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "@"
                        ],
                        "hash": "@$",
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9614930-c50c-4987-ada1-bd8bac50e2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b7c7fb-8f32-4070-a45d-8d7aa2e3d693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Special characters ID test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Message).to.include(\"The request is invalid.\");\r",
                            "\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9588c8-bb0c-4465-a07c-23bb60a13f21",
                    "name": "Non-existent ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "0001"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189203fe-fe7c-4c79-8434-e6325f2f8387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39bb1831-ead8-4fdf-9b0b-748db2ede9a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Non existent ID test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.false;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "34cbc80a-ce1d-4f18-98d1-ef88a92c6adf",
                "name": "PmifInsurance_GetPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "7ec66cfe-ba08-4cd8-9473-eb63fea899e9",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "154176"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f7c804-5bc2-48e4-a7b0-4eafe6b8d846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a37e65a-7dd5-4e3b-b710-0832fe211d05",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "154176"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8528580-0916-4d34-a9cf-a96d551a7967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "442de67a-0b16-4992-8292-7b0a773241c5",
                    "name": "Invalid ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "0001"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff928cd-72c9-453d-9b84-362adbf90e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.OptInRecords).to.be.null;\r",
                            "        \r",
                            "});\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb9edb2-11d8-4aa7-a7cc-880b6b886924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "59adcfb5-46cc-403b-9d73-b42ac5200510",
                    "name": "Non-existent ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "!1!1"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e6dbb5-8d67-4d78-a8ba-a0ef7ed2d9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Non-existent ID test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Message).to.include(\"The request is invalid.\")\r",
                            "\r",
                            "});\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dd8b90-7358-4a09-8153-b461e3bb6d80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d427c097-bb53-43d9-9680-7fc2e0b66973",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "{{optInId}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01add210-fc84-4efd-bc97-20afb26963b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.OptInRecords).to.have.length(1);\r",
                            "        pm.expect(jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID).to.eql(pm.variables.get('optInId'));\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "\r",
                            "});\r",
                            "\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f066365c-0ca6-40a5-b189-e363a62b3ed1",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance opt in record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5c7e41d6-7607-43d0-926c-6d122a725ed7",
                "name": "PmifInsurance_GetPMIFInsuranceAll",
                "item": [
                  {
                    "id": "18c71644-7d46-4cc5-a613-a3103a43bad8",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff06400-8035-44d8-b530-9463cde32377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ac4074-6a06-4a32-9b5b-8d060829cfe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d259bd-015c-4d8b-a4a5-804d68210a21",
                    "name": "Incorrect Auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a524ff8b-a3a3-44fb-8f78-959f7829b5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc53e50-09e0-4628-afbe-93775f73d842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66220d4-7246-4b17-ba5c-bc05ca31b3d4",
                    "name": "Valid asc test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72f72b9-4cf3-47cc-af36-8a8832674c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3d9fc1-c016-4201-a430-6f7060701f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        }\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f27b88c-3ca2-4846-b887-baab2132d646",
                    "name": "Valid desc test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f720ba3-8242-4582-8bfb-3623512529af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', false)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a87ef07-61d6-42e7-b881-617854b3db0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        }\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "68737aec-4f88-4262-89e6-f1496abd1940",
                    "name": "Valid one record test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfde177-e1e9-4147-9a3f-55dfbcd22845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 1);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebe8f4a-4ed7-4232-b941-e68b31bc8650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        \r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        } \r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "24ba349a-af0d-4c6a-bcfa-b1429034a02d",
                "name": "PmifInsurance_UpdatePmifInsuranceOptIn",
                "item": [
                  {
                    "id": "ec66ff4d-647a-4cd8-98bb-f5b913773b98",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8841e748-b7e1-41f4-a258-a251c1b9cc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db09d50-54c5-4b7f-841d-bc2b4684013b",
                    "name": "Incorrect Auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b504be67-f690-4772-9a9e-55078f99fb3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1741d3fa-0b14-462e-bab1-fc0f7a9b0446",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": {{optInId}},\r\n  \"ACCOUNT_NUMBER\": \"100002222\",\r\n  \"SOURCE_SYSTEM\": \"CCM\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8ca888-c3cf-4cf6-ad8a-852025da578f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 row updated\");\r",
                            "\r",
                            "        const getRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'GET',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(getRequest, (error, response) => {\r",
                            "        console.log(\"Record fetched\", error ? error : response.json());\r",
                            "        const resultId = response.json().OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(pm.expect(resultId).to.eql(pm.variables.get('optInId'))){\r",
                            "             console.log(\"Records updated correctly\");\r",
                            "         } else {\r",
                            "            console.log(\"Records failed to update\");\r",
                            "         }\r",
                            "\r",
                            "        });\r",
                            "});\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });\r",
                            "\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8dfe370-7747-440e-a447-70133405975a",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Create insurance record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "16495d87-ccdd-41ac-a051-4e1c3113a77c",
                "name": "PmifInsurance_DeleteAgedPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "32346157-e9f4-40eb-aaea-f47770384c8c",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70e4ded-b801-471e-82b2-17664e618320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ],
                          "_lastExecutionId": "fa2e2101-0a5c-4974-aecd-db894ac54b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef7bdae-7528-4454-9dee-e30baa73b938",
                    "name": "Invalid auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc994ffa-b4e9-4eae-b7ce-e91351fdec67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ],
                          "_lastExecutionId": "59ca6ba6-d6f3-4a74-ac0b-fd8b0ab07e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a73352-c286-43b2-a2c3-37320d318101",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "{{days}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf58fcf-f8a5-4746-a9b2-fa906187dfc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"0 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
                            "\r",
                            "});"
                          ],
                          "_lastExecutionId": "757ea85c-b215-47cc-a0e9-f814a9458f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bf3253-7e6f-4a28-941d-2f1c637b5352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('days', 100);"
                          ],
                          "_lastExecutionId": "cb10ee0d-0bb8-4e90-80b2-0e2d340d6499"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2a4822a3-9961-4ecb-a37f-23497c2d857c",
                "name": "PmifInsurance_RecordPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "6afec5a2-7395-435a-8d16-0c4ea378b954",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67b75a0-0c94-4b58-85d5-e92049921400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b714a0cc-6869-4199-9039-cea1cf1c3b9d",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c23241a-ce91-4988-8cb3-5a03c18f8b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7755ff-da16-4d0c-9e44-a2e67b4bbda3",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87b2e95-fcb8-4126-81bd-69f63b30be62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 row inserted\");\r",
                            "});\r",
                            "\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });\r",
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4e7ff168-c005-4aee-9da9-8eb4ffde8a8a",
            "name": "PysInsurance",
            "item": [
              {
                "id": "11c6bf36-4896-490e-a989-1afaacf127cc",
                "name": "PysInsurance_RecordInsuranceOptIn",
                "item": [
                  {
                    "id": "08e44a97-dda9-4461-bb9d-a86d7304dc36",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834f3eb6-31d7-499f-a14a-9ff7dd835539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d38e8cf7-2fd9-43e4-b579-a848e50b4f1a",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "228d75af-7962-4e6a-b6ab-1a4061f89267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc416d2-11db-4657-96b9-6a0c235f7cd2",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "334ed0db-9afb-49b7-b421-111d7c483f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        pm.expect(pm.response.json()).to.eql('true');\r",
                            "        \r",
                            "});\r",
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c306052b-ab00-448d-8706-4d5b44527031",
                "name": "PysInsurance_SubmitOptInRequests",
                "item": [
                  {
                    "id": "c78942ed-0585-43f4-8352-0a3a0497ff34",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b44fb5-3afe-41e4-9a35-10af013999c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a7b715-2658-427c-9707-287157819926",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59f32b8-5820-46f9-b905-66607112c486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8572ba-11f8-487d-9b46-0c2292450902",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "253f744e-aa63-457c-b974-f3f89d2f3efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"0 rows processed\");\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9faa5ce2-8531-4480-af2d-d50d9ea97c78",
                "name": "PysInsurance_GetAccountsForPYSInsuranceCancel",
                "item": [
                  {
                    "id": "e26acf68-43e4-4add-a1e9-5a9379ba4df2",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e121876-f841-4316-9fd9-20438dddc7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d071017a-7b97-4b20-9c65-25b332d6a0f2",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73203f8-0df2-4705-88c0-cb87531898d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7e4d36-fd1e-4e25-ac56-6a9c95c91f2e",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ff0856-48d3-4d2e-85ba-be40dbfdb2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6e7a6c20-d003-4888-aebb-a4db6f453304",
                "name": "PysInsurance_GetOptInDetails",
                "item": [
                  {
                    "id": "6ad848e2-7057-4b27-b42e-8d043bfc6d3f",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88864bf2-2ec1-41e4-869d-50616ad16f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "69079d3f-8abc-406b-aa2a-96b153d96db2",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b44863c-4378-4817-8d56-5a4454975302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70a26c8-76bb-4209-8087-10eebd800f9f",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "162577"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c19f9f3-d21e-4203-ab95-081694f6bd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2f2d8d5f-3892-4dc1-b750-36a65e7ecef0",
                "name": "PysInsurance_UpdateInsuranceOptIn",
                "item": [
                  {
                    "id": "733af427-f133-45a8-9e12-2c238a7d884e",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4430"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0d3f0d-d368-4b43-905a-5e031d06086a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b6262a-b475-43fe-bbcf-1a2d146a0724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3e668e-4be3-47a0-98ae-96b8d7f1ba04",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4430"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96b6e96-5fd0-4d91-a668-d09db635bfe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d672ee4-8b48-4e64-b264-4b98dbcb3b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "33fa523c-cfce-495b-826c-5d5193a31390",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4442"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd6acf1-aace-4a12-be33-feadf67725e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d22677-23da-4654-a625-ec797e2cbd0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(200);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b8f4a359-9c61-4864-aaf1-87934e852bab",
                "name": "PysInsurance_DeleteInsuranceOptInRecord",
                "item": [
                  {
                    "id": "bfd9a281-93cd-4382-b3a7-c8554f195093",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptInRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4444"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d13af1-d150-40e6-a570-c323c41d5c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5602afac-4d21-4c80-9e0a-71fa98467c91",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptInRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4444"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b59f71a-c7e8-4bc3-8149-67915c1ea32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6ba408f9-39f5-454c-92d2-d3ab33dd5e6e",
                "name": "PysInsurance_DeleteAgedInsuranceOptInRecords",
                "item": [
                  {
                    "id": "4ebf7120-fd05-4694-b152-132b6713b133",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThan",
                            "value": "365"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaef6663-ab79-481f-a7f3-e5b4b65965e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c352f7e5-eced-4a0d-9483-37fe317b9942",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThan",
                            "value": "365"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5260a2a5-4d7a-4ee2-8b67-9d38d896aa3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "type": "string",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "key": "value"
            },
            {
              "type": "string",
              "value": "Authorization",
              "key": "key"
            }
          ]
        },
        "event": []
      },
      {
        "id": "78313220-e8f3-467d-93a6-c096c1a46854",
        "name": "LGIA.External.Tal.Helper",
        "item": [
          {
            "id": "d2c3783f-bcf0-4ff9-8c7b-8002e0ffca96",
            "name": "TalClientInsurance",
            "item": [
              {
                "id": "24fd81e5-4960-49fa-a1c0-f1513df5b567",
                "name": "No auth test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8841c767-bafc-4de5-9627-1b08e38dbc56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No auth Test\", () => {\r",
                        "    pm.response.to.have.status(400);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "f64c0c52-567c-4668-956a-ba22738cdc94",
                "name": "Incorrect auth test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "apikey",
                    "apikey": [
                      {
                        "type": "string",
                        "value": "Basic",
                        "key": "value"
                      },
                      {
                        "type": "string",
                        "value": "Authorization",
                        "key": "key"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e070d71a-49f0-40f1-949b-c090a296b57e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth Test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "898f4009-7e25-416b-9bfc-4da5468f3881",
                "name": "Valid test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1f03e8f-c47d-4cca-af84-7c13c5119870",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Valid Test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "})"
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "c37a3492-97dc-437f-aad8-a6922bc79516",
        "name": "GetPmifDefInsuranceValuesAPI",
        "item": [
          {
            "id": "60514310-e756-4550-abaa-464770505282",
            "name": "DefaultInsurance",
            "item": [
              {
                "id": "ea668f29-b174-499c-8b0c-2d340423f5a6",
                "name": "Blank clientId test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0cefb66-94b4-4cf4-afea-9b327fc20935",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "12b0993d-0ee7-4a06-b5ae-ff14954db8cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank client Id test\", () => {\r",
                        "    pm.response.to.have.status(404);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "932b99f9-5bbb-4ea0-a78b-442f2afcdd2e",
                "name": "Incorrect authentication test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4b53a19-e230-42a3-ab64-6bac5aa1c3a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e3d7cd4-323c-4a91-91b0-4fca1547516b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "edf3d829-a8f6-4f06-9d3f-9166b857e0d3",
                "name": "No roles test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d485d718-5a28-4cf4-b6a8-8ec26bd422cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63bad794-9b44-4651-a6f5-8f7345da156b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No roles test\", () => {\r",
                        "    pm.response.to.have.status(403);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "22ca922f-027f-416f-89df-b2eeb856caa5",
                "name": "Locked User test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4dbed279-24da-445d-bbb2-2edea7e95f0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10dce257-5abd-443c-841d-9cbacc43dc16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "9d2dd592-9bb0-478b-aedc-ad8dd750901a",
                "name": "New Users test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b3bcece-34fd-4c1c-893c-160b9377c468",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd4b79f6-6e02-42cf-a0c6-34733b72143b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New Users test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "5af0d906-3060-448e-a390-08c57fb21352",
                "name": "authenticated valid  test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{TestAutomation}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "TestAutomation",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aef03d82-1d28-4b25-8b54-d2379a53b067",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4697ca1-26cb-4759-9b92-2c515d3bc2f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Authenticated user test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "5eabb343-56e9-4c6a-ac27-9fd41f3596b2",
                "name": "No account number test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5a9c15b-ea3d-415c-af8e-35bc92ac44f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', 101004749);\r",
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddb9ca21-1313-487f-980f-057fd66cf801",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No account number test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "ffbfb330-10b0-4cf9-ba7d-23d50831b364",
                "name": "No auth Valid test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3281d4f-7bc2-445c-8442-455b211e7630",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', 101004749);\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d60532d-8777-436c-a492-96e616728669",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Valid test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "5e8f5ede-fe52-4c85-add7-babe9be48432",
                "name": "New User test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f12cd475-9027-4fe3-9179-36d61a5008f4",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "80da4002-7bc5-4964-a99a-5a9adc8ad8b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "cf273a4c-b75f-4c14-ac05-e710e326b2a2",
                "name": "Incorrect auth test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d1718ef-7978-4022-9b47-79076ab4d204",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "13d9e62e-fb61-42b3-b37a-5b736989caab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "c6426ff2-6405-4175-a6ae-c93760cc6703",
                "name": "No roles user test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb731103-0dbf-404d-9cfe-cd52ec0fa1c3",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ac6989c-3c9a-4755-bea2-fa834fbd95b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No roles test\", () => {\r",
                        "    pm.response.to.have.status(403);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "6a53acf6-7051-4ca0-9ee1-e42004bd60d5",
                "name": "Locked user test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5579c124-12e4-4ab8-8fdb-b41cae021a30",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a21a071e-39d6-4145-80d0-4e72b90fa4c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "ed58f099-f3b4-4211-88ad-fddf5c38afcc",
                "name": "authenticated valid test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{TestAutomation}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "TestAutomation",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b603bddc-6f16-422e-bee2-07e986492833",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fdc3873-9d66-4ab4-8844-f84d93b0c529",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Authenticated valid  test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "\r",
                        "    pm.expect(jsonData.data).length === 3;\r",
                        "    pm.expect(jsonData.data[0]) === pm.variables.get('clientIds1');\r",
                        "    pm.expect(jsonData.data[1]) === pm.variables.get('clientIds2');\r",
                        "    pm.expect(jsonData.data[2]) === pm.variables.get('clientIds3');\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "ce13a5fe-b55e-4b7a-8f7d-87e96223a52d",
                "name": "No auth Multiple clientIds test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3156faf4-a1fb-4b4a-a718-225868201abf",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3edbc4d2-0643-497a-9ee5-d28a3cebfa58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Multiple client Id test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "\r",
                        "    pm.expect(jsonData.data).length === 3;\r",
                        "    pm.expect(jsonData.data[0]) === pm.variables.get('clientIds1');\r",
                        "    pm.expect(jsonData.data[1]) === pm.variables.get('clientIds2');\r",
                        "    pm.expect(jsonData.data[2]) === pm.variables.get('clientIds3');\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "01124c1c-3a6f-402c-bcc1-f5d1f5a089e9",
                "name": "No auth Multiple clientIds with duplicate test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de299e9c-c187-4fec-9210-69146de0b9f2",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101004487);\r",
                        "pm.variables.set('clientIds3', 101004487);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "30ffb0bb-9bfb-4731-a729-54da9d70806e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Multiple client Id with duplicates test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.false;\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      }
    ],
    "auth": {
      "type": "basic",
      "basic": [
        {
          "type": "string",
          "value": "{{TestAutomation}}",
          "key": "password"
        },
        {
          "type": "string",
          "value": "TestAutomation",
          "key": "username"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "56ec51c1-7817-4d33-8409-c4ed017a79bd",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "055b398e-78a0-4475-bdc0-983645474485"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "2e2527b1-98ec-42df-9d5f-086d7177bcf1",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "286d8d32-5b7a-4078-9eb7-be7af2ae89e2"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "2021-07-14T09:07:42+10:00",
        "key": "todayiso"
      },
      {
        "type": "any",
        "value": "2021-07-14",
        "key": "todaysDate"
      },
      {
        "type": "any",
        "value": "2021-07-24",
        "key": "futureDate"
      },
      {
        "type": "any",
        "value": "2021-07-15",
        "key": "now"
      },
      {
        "type": "any",
        "value": "no client id",
        "key": "action"
      }
    ],
    "info": {
      "_postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01",
      "name": "RegressionTests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2021-07-22T05:58:43.124Z",
      "postman_exported_using": "Postman/8.8.0"
    },
    "id": "00a98a20-0bb2-4b24-905e-a9cf2e1c1167",
    "name": "intg",
    "values": [
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/einsteinanalytics",
        "key": "einsteinanalyticsdata"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/fileconversion",
        "key": "fileconversion"
      },
      {
        "type": "any",
        "value": "TestLockedUser",
        "key": "LockedUser"
      },
      {
        "type": "any",
        "value": "shfq6-WNdzdnWseK",
        "key": "LockedPassword"
      },
      {
        "type": "any",
        "value": "TestNewUser",
        "key": "NewUser"
      },
      {
        "type": "any",
        "value": "btsWeW$zMmhJIjy",
        "key": "NewPassword"
      },
      {
        "type": "any",
        "value": "TestNoRolesUser",
        "key": "NoRolesUser"
      },
      {
        "type": "any",
        "value": "paKAxSI7FAoO52U",
        "key": "NoRolesPassword"
      },
      {
        "type": "any",
        "value": "UTy3VU",
        "key": "randomId"
      },
      {
        "type": "any",
        "value": "This is a new fund name for UTy3VU",
        "key": "FundName"
      },
      {
        "type": "any",
        "value": "00D1m0000008lFX!ARcAQDCdBUCN1z27ixKDs2.IVaT8TQtNqHa9PNE1HLyjsl8Xgx1Vd7apCciBpe517mK1gW.Tpsvb2kmSBlodoEnjn0p0YJKZ",
        "key": "SFToken"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/ccm",
        "key": "ccm"
      },
      {
        "type": "any",
        "value": "b-VBed!By7suveYBbaL",
        "key": "TestAutomation"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/swift",
        "key": "swift"
      },
      {
        "type": "any",
        "value": "VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA==",
        "key": "AuthKey"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/ringcentral",
        "key": "ringcentral"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/sonatahelper",
        "key": "LGIA.Internal.Sonata.Helper.V2"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/GetPmifDefaultInsuranceValues",
        "key": "GetPmifDefaultInsuranceValues"
      }
    ]
  },
  "globals": {
    "id": "292b8648-55a4-4208-b902-6625371b4e68",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 4,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61,
      "responseMin": 27,
      "responseMax": 125,
      "responseSd": 45.28428719397785,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1627011210293,
      "completed": 1627011213215
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "933f1696-d3cc-4fd6-afb7-f806e0b52609",
          "httpRequestId": "2b708fa9-086e-4614-ac92-9bdc49b51d6f"
        },
        "item": {
          "id": "32346157-e9f4-40eb-aaea-f47770384c8c",
          "name": "No auth test",
          "request": {
            "url": {
              "path": [
                "AgedPMIFInsuranceOptinRecords"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [
                {
                  "key": "olderThanDay",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e70e4ded-b801-471e-82b2-17664e618320",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No auth test\", ()=> {\r",
                  "        pm.response.to.have.status(400);\r",
                  "});"
                ],
                "_lastExecutionId": "fa2e2101-0a5c-4974-aecd-db894ac54b91"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "AgedPMIFInsuranceOptinRecords"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "olderThanDay",
                "value": "100"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bb6f61b2-9c42-46c2-aa51-1e92d3153468",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "31a85f77-6384-4b0d-8e95-cb6358a09f28",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:33:31 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 125,
          "responseSize": 0
        },
        "id": "32346157-e9f4-40eb-aaea-f47770384c8c",
        "assertions": [
          {
            "assertion": "No auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "21a4b4af-ce67-43a5-ae44-46a1124f5640",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2b3e720d-7c1b-4207-9145-30c35e780427"
        },
        "item": {
          "id": "6ef7bdae-7528-4454-9dee-e30baa73b938",
          "name": "Invalid auth key test",
          "request": {
            "url": {
              "path": [
                "AgedPMIFInsuranceOptinRecords"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [
                {
                  "key": "olderThanDay",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "Basic",
                  "key": "value"
                },
                {
                  "type": "string",
                  "value": "Authorization",
                  "key": "key"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc994ffa-b4e9-4eae-b7ce-e91351fdec67",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Valid test\", ()=> {\r",
                  "        pm.response.to.have.status(401);\r",
                  "});"
                ],
                "_lastExecutionId": "59ca6ba6-d6f3-4a74-ac0b-fd8b0ab07e7b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "AgedPMIFInsuranceOptinRecords"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "olderThanDay",
                "value": "100"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6ae4add3-40c4-4b34-84b5-8b385bda2a4c",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "Basic",
                "key": "value"
              },
              {
                "type": "string",
                "value": "Authorization",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "92d403b2-bbcd-4944-9449-ba771f187b6b",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:33:31 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 27,
          "responseSize": 0
        },
        "id": "6ef7bdae-7528-4454-9dee-e30baa73b938",
        "assertions": [
          {
            "assertion": "Valid test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "173f94db-90c4-44e1-8010-53430ccebd3d",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c3fb6360-7c68-46a7-9575-ee78343efbbc"
        },
        "item": {
          "id": "c2a73352-c286-43b2-a2c3-37320d318101",
          "name": "Valid test",
          "request": {
            "url": {
              "path": [
                "AgedPMIFInsuranceOptinRecords"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [
                {
                  "key": "olderThanDay",
                  "value": "{{days}}"
                }
              ],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1bf58fcf-f8a5-4746-a9b2-fa906187dfc6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Invalid auth key test\", ()=> {\r",
                  "        pm.response.to.have.status(200);\r",
                  "        const jsonData = pm.response.json();\r",
                  "\r",
                  "        pm.expect(jsonData.Success).to.be.true;\r",
                  "        pm.expect(jsonData.Message).to.include(\"0 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
                  "\r",
                  "});"
                ],
                "_lastExecutionId": "757ea85c-b215-47cc-a0e9-f814a9458f98"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a2bf3253-7e6f-4a28-941d-2f1c637b5352",
                "type": "text/javascript",
                "exec": [
                  "pm.variables.set('days', 100);"
                ],
                "_lastExecutionId": "cb10ee0d-0bb8-4e90-80b2-0e2d340d6499"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "AgedPMIFInsuranceOptinRecords"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "olderThanDay",
                "value": "100"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "725f8b63-345e-4da2-8a35-966557c3d85c",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                "key": "value"
              },
              {
                "type": "string",
                "value": "Authorization",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "83e72bb4-ad20-4d4c-8b2d-f7c82cbe50c8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:33:32 GMT"
            },
            {
              "key": "Content-Length",
              "value": "119"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              48,
              32,
              80,
              77,
              73,
              70,
              95,
              73,
              78,
              83,
              85,
              82,
              65,
              78,
              67,
              69,
              95,
              79,
              80,
              84,
              95,
              73,
              78,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              40,
              115,
              41,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              59,
              32,
              48,
              32,
              80,
              77,
              73,
              70,
              95,
              73,
              78,
              83,
              85,
              82,
              65,
              78,
              67,
              69,
              95,
              79,
              80,
              84,
              95,
              73,
              78,
              95,
              69,
              82,
              82,
              79,
              82,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              40,
              115,
              41,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 31,
          "responseSize": 119
        },
        "id": "c2a73352-c286-43b2-a2c3-37320d318101",
        "assertions": [
          {
            "assertion": "Invalid auth key test",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 119
    },
    "failures": [],
    "error": null
  }
}