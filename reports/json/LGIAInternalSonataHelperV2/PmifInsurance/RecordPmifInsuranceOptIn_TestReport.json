{
  "collection": {
    "_": {
      "postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01"
    },
    "item": [
      {
        "id": "31d6e261-2b86-4f50-ab58-352802b680e1",
        "name": "CCM",
        "item": [
          {
            "id": "ca54dd5c-eac5-4f09-a7eb-b0bbee69fb2e",
            "name": "SwiftEvents",
            "item": [
              {
                "id": "89d0238e-c711-46d6-b6db-3ebc1d0034ad",
                "name": "PullDataFromCsvFiles",
                "item": [
                  {
                    "id": "2f893cf9-e1eb-4ea9-a272-c10a38afa56c",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eefb789-bf5a-4ab9-9d0c-2756c6ab3012",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "093127e5-aaa9-4552-bd0d-49f70395564b",
                    "name": "Username and Pasword incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e83a4b8-87b7-4ea5-964c-04a9e99c9b5f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6b4f76-dc7e-4d0f-89c1-fc4f4545c2b4",
                    "name": "Username and Pasword locked ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee6b964-a388-4088-8e06-f911af94e790",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Account Locked\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3dc1a7-f166-4c10-ad2b-f06312558b34",
                    "name": "Username and Pasword new account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98b65b8-b458-4eb3-8eed-5fc023d32412",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68e9701-c24e-46b2-902e-0cbdfca4e19e",
                    "name": "Username and Pasword insufficient privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188e8521-76e0-457f-92b1-41ba839a657f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4d5468-9e95-43bc-8f40-8e9f2d7b658c",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574179d7-2a7a-4fbf-80d2-b6b5e1fee74c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('PullDataFromCsvFiles[SUCCESS]');",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4fb59da7-1a8a-4d7f-9483-99a70ecd0661",
                "name": "SyncSwiftEventsToSfCampaigns",
                "item": [
                  {
                    "id": "70d27f4e-8b7e-4ae4-9561-dda4475a53e0",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55767ea2-4a57-4b85-95e6-4f74e6963160",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c5fee9-0016-483b-874d-8c5b5228b80e",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a72a278-d8cf-439e-855a-403f70d07296",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa599a78-6d4b-4105-a49f-dc590379ea4f",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708cba23-4c1d-4e3b-ac03-a3b8b04077f0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "283a5212-a846-4f35-8921-ece66363f9f1",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2f26ed-40ca-43f9-bd22-ed563c78c6ec",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfaa541e-81ce-475a-84f7-14ca8bc253b1",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c69ded9-6a1a-4d5d-8c6f-16172e5a388d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ab46dc-7f86-4f99-af5d-f2882443ba6c",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c359df5f-e702-4e10-8a2f-62766554d19b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncSwiftEventsToSfCampaigns[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9ad2c07f-b93c-4606-a3f3-249b56256ef2",
                "name": "SyncOpportunitiesOrLeads",
                "item": [
                  {
                    "id": "088292b8-8795-4b2d-b81f-0e3570d75ecd",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a31627-7b27-41dd-b691-2ade8171efdd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1debc566-b76b-4f44-a041-e7e2814905d7",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc33ea8d-544e-4248-9732-13e1de4ac25c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "897c5bb7-4c51-4f40-b465-75202d0991b8",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8354e687-2f66-417a-a981-6b4c2478c0a0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ae1fca-689b-42ee-a760-c2b6e18dba2a",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2e88f9-eea7-480c-b98a-db4180705d34",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6ea171-872d-433a-aa51-86ce626f8816",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f369b764-f46b-4a90-bc07-0e688e3ae4e1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ddf008-7938-4bbb-a2a6-0931fdb24d74",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d016432-5af6-42d7-8002-57cd344c0843",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncOpportunitiesOrLeads[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c6bd2f2-f652-4201-af95-0b3c91946ab0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63001195-6fbb-4222-8b57-9844c1e7859d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "6a249719-b60b-452d-a163-37b47acda07b",
                "name": "SyncRegistrantStatuses",
                "item": [
                  {
                    "id": "6e812192-ccd5-419c-9017-2344d089f31d",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c83fed3-6c84-47b4-8704-da988d09eafe",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc73cd34-87c7-4761-8e12-3e14bc99e52b",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "341a2e31-61a4-4294-9e78-3673037387a3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbc2f2c-9f3c-49b0-9b9f-5a2791ddcfd5",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d088f3aa-70a4-458a-8713-ffeff1efb50c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "db4f1202-3794-43fd-9845-d63d295f053f",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8178da46-45b8-4cfc-b1b3-bf3f74fec591",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7594246-7b14-4c38-a40b-beca8cf6c316",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40b9501-e268-40b5-a04e-35a98c483126",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1f8664-074b-4fa6-bda5-ab9ea1a7b7be",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ac553d-85b3-4d4e-bdcd-f2f1d289f5bb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncRegistrantStatuses[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "09b74c44-7e9b-456d-b139-0c21d9cc216b",
                "name": "AddConfirmationInteractions",
                "item": [
                  {
                    "id": "b322c1c2-8f39-4216-82a1-5049b375c59b",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766e41eb-cfc6-4321-871b-16e65414bd47",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c671df-7a2d-4be1-b4cc-7b8e64052d33",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2bd52a-3d6b-4dc7-9f20-f974a8959e16",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d125bfb1-ccc1-4741-8418-9fcdd8794260",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e70d0d9-b676-418c-b4c1-870967f72c36",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fdfe6fc-28d8-4029-aca4-6015bede25f9",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6514738b-3cd2-42a4-8126-ba4d157e1bca",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4e12fb-533a-4110-b039-c82419d03775",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "561a551c-d815-405f-b86b-bfe1def58568",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc3a17c-ed83-476f-81ad-8f50ca542fb2",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee01bbd-7e30-4461-b2e9-754600a4279c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bcc3065f-8169-45bc-a959-85fdb80400bd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6567a505-254a-417a-abc1-4680292da601",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "f0e29ecb-4eb0-414b-b245-00efaf595e0d",
            "name": "Corresspondence",
            "item": [
              {
                "id": "92fc9d5f-fd1e-40bd-9953-4c9cb84811aa",
                "name": "SyncInteractionsFromEngageOne",
                "item": [
                  {
                    "id": "901d461b-d1e7-4ca7-86d1-a6e816846c8c",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0266e2-42aa-4218-85df-667a0f8be6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7afe9f7-49f4-4c2d-8878-84aa786018ac",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77b4ffc-e958-4b23-9a59-f494a32b3871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c650aa4-370b-491e-ba2b-ba66a0768ef2",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c832d3-ed65-4542-8a20-17700a452544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f62013b-ebd8-421d-ae07-90b1088c7216",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "779494c5-d97d-4a25-9555-60d65f1b2d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No roles assigned user Test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7038423a-ab1d-40e7-841a-61237de16906",
                    "name": "No Body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7417ef-7e77-4da3-99e1-d1d6a5d3c50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Body Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"A non-empty request body is required.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "feae8f69-5d79-4d7f-b2ea-c5150da0f4d7",
                    "name": "Blank date",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\":\"\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd560770-8d40-466d-b403-51e0cf02163b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Blank date Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"String '' was not recognized as a valid DateTime.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "949f2121-0546-48ea-8067-1b72997c1102",
                    "name": "Date not found",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34046880-28c0-44a3-9b02-20a9b11a12fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e7a86a-9e6f-4720-8b19-e30d0a5f40e6",
                    "name": "Invalid file format",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed52769-26c8-414c-b722-07c9df05d0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "string",
                      "value": "{{TestAutomation}}",
                      "key": "password"
                    },
                    {
                      "type": "string",
                      "value": "TestAutomation",
                      "key": "username"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24c7c409-da4d-4c59-a45a-b4fa67753ad3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4764e9e-5551-4f0f-8b7b-bbeefb50ef06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7135ff61-058c-4e2c-b5af-3a0698b1abf6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "251f210e-b293-422b-8841-bcc5c2cfce92",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "59138a4d-8170-4f86-9e1c-9679127d4ac5",
            "name": "Actions",
            "item": [
              {
                "id": "24856b95-dd8d-44f8-8d4c-69588aa65acc",
                "name": "AddAction",
                "item": [
                  {
                    "id": "32165c91-1dac-4970-b00f-45f72be88130",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56db9e7d-0d71-485f-9616-5ce0de71cd00",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe0c206-5a92-4bfe-9d3b-c14ea09613c3",
                    "name": "Incorrect account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c126e91-231f-41ac-bdb8-c303e322e8dd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "793c32fa-e9d5-4bf2-bf64-09f04ad86e94",
                    "name": "Locked account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffd075c-982a-4b1d-a9d0-6dc60a383d52",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "64bae2ee-1bde-4d5b-a7b8-9f9cff3ef75d",
                    "name": "New User account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a02d9e4-68f0-4716-ae13-d13f6c2dd4b3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New User account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "625627e8-e638-43d4-bd99-76db7fc0558e",
                    "name": "Empty Strings  test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"\",\r\n  \"action\": \"\",\r\n  \"actionDate\": \"\",\r\n  \"status\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47eb9bd-c61d-496a-b9b0-8045011fb992",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action is required\");",
                            "    pm.expect(jsonData.messages[1]).to.include(\"Status is required\");",
                            "    pm.expect(jsonData.messages[2]).to.include(\"Action date is required\");",
                            "    pm.expect(jsonData.messages[3]).to.include(\"Source system is required\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a4dded-2ec2-4989-9a7b-ed4ffee2756f",
                    "name": "Incorrect source system test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"Ring Central\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee36355-f4bb-462b-81ed-06bb2cbaaf72",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect source system test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value Ring Central is not allowed for field Source System\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae53a0e2-5abd-427c-ba2a-38d7d796bd4a",
                    "name": "Incorrect action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"$%#$%#$^%#\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77aefc78-b6a4-4a00-b78b-94a29442c020",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d29765-22ec-463a-97c4-6f9e4265f1c1",
                    "name": "Incorrect action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{incorrectDate}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cf4574-16c9-4a0a-bf99-430f00aa57df",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Date \" + requestBody.actionDate + \" is not a valid date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4702820-9290-445c-8bd8-fa3beb8a284d",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "incorrectDate = moment().format('DD-MM-YYYY');",
                            "pm.variables.set('incorrectDate', incorrectDate);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb895b6-2678-44cf-8c17-bf9bd46b14c6",
                    "name": "Future action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{futureDate}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd35728-5dee-43f5-aee2-50a4d39966cf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Future action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action date \" + requestBody.actionDate + \" cannot be future date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427dc123-f25a-4e53-801c-63b452bddf1c",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "future = moment().add(5,'days').format('YYYY-MM-DD');",
                            "pm.variables.set('future', future);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2502a30-49ab-413f-82fb-727e2ba6d8c1",
                    "name": "Current action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3a1cc5-4cc7-410c-8094-cd1f72a23d0b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b571f80d-a2f5-49aa-a156-6d9b725f42f6",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f51538f-7789-4763-b811-434f7a38e202",
                    "name": "Incorrect status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac221e6-6eef-4bdd-8302-8f3a62403858",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value \" + requestBody.status + \" is not allowed for field Status\");",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c52d908-2e5d-4f15-991e-44d80dc0e87b",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3f10fd-f147-49bb-a0cd-d23a83c318ba",
                    "name": "Valid status action started test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d0d374-0a88-4439-99df-29781cfdea2d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743f8bdb-9646-40c8-9a5e-74762e3a0744",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1ad667-24c8-4681-8f87-f1e7bae5bc29",
                    "name": "Valid status action completed test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action Completed\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ae76e0-0215-465d-a0db-1226819a7751",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6c4cb2-0598-495e-8923-26f917042683",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0fe94e-6c1b-45ae-a858-09da4abc5157",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"SwiftDigital\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab59cf33-0a35-4160-8544-05f3b56754b9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67220136-4041-433f-baf2-dce1cff78bd4",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fc1b7011-3f0e-4351-a9bd-8c9f583d7d19",
                "name": "AddActionV2",
                "item": [
                  {
                    "id": "7c1ddac2-fe23-4830-b5a9-a1ca3139beba",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adfe1acc-9d42-4773-957f-a81a7df697c5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "924c07cf-3dab-4344-9500-4c9e041dff10",
                    "name": "Incorrect account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb40c9c8-21a6-4443-8ba7-72caf3041b7a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1b89cd-2d94-4cc2-bb43-aa3cc32cfaea",
                    "name": "Locked account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b776eef-0a0b-4032-b9f4-b832c6e4d8c6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "516f38f8-0389-4278-97d2-89aa7c50626a",
                    "name": "New User account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df29fc4-bd5e-4137-b96c-fbd3d35235a7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New User account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "00eb8ceb-4cbb-49d4-b625-6d9f4fdf090c",
                    "name": "Empty Strings  test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"\",\r\n  \"action\": \"\",\r\n   \"actionDateTime\": \"\",\r\n  \"status\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859c65be-0947-482f-84cc-ee2f1721ae76",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action is required\");",
                            "    pm.expect(jsonData.messages[1]).to.include(\"Status is required\");",
                            "   // pm.expect(jsonData.messages[2]).to.include(\"Action date is required\");",
                            "    pm.expect(jsonData.messages[2]).to.include(\"Source system is required\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d6842f-616f-4310-9bd6-46d5211926bd",
                    "name": "Incorrect source system test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"Ring Central\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9221aa68-1c12-41ce-a97a-b0302787768a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect source system test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value Ring Central is not allowed for field Source System\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee26073-c6cd-4e6f-8fbd-dbfab0ddc480",
                    "name": "Incorrect action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"$%#$%#$^%#\",\r\n \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2a7331-14e0-4c58-81ff-5bc02bbb3c6d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a753c077-7035-4018-aa0c-fbf328e0a080",
                    "name": "Incorrect action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{incorrectDateTime}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2e487b-40c9-4a78-9c55-9c560ca8b116",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Date \" + requestBody.actionDateTime + \" is not a valid datetime\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ccb2b5-8152-4408-84f0-e152483a4b23",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "incorrectDateTime = moment().format('DD-MM-YYYY HH:MM:SS');",
                            "pm.variables.set('incorrectDateTime', incorrectDateTime);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "672bf003-ced2-4778-b4c6-33e6b0b0a738",
                    "name": "Future action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "V2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n   \"actionDateTime\": \"{{futureDateTime}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44413691-adb9-40d2-be90-4ab34fc81586",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Future action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"ActionDateTime \" + requestBody.actionDateTime + \" cannot be future date\");",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7098346-f674-41ba-87b8-0be5052c5f57",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "var futureDateTime = moment().add(5,'days').format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('futureDateTime', futureDateTime);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "56db5554-f72f-4985-94d0-91a03903714d",
                    "name": "Current action date test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bcef7d-7be8-412b-b3c2-aa20526732e9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea7d764-e36c-4c94-8ac7-ecc5ccb4a4e2",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb6460a-b18f-4bf8-8acf-f5f224aceb6b",
                    "name": "Incorrect status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4657dd37-5ac9-42a8-8f95-6c593c287bb1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "    pm.expect(jsonData.messages[0]).to.include(\"Value \" + requestBody.status + \" is not allowed for field Status\");",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c14177c-b277-4cf6-a824-7a94ab5d6f31",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD HH:MM:SS');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "70dc67b0-04ab-47a0-9a96-23b528828b1e",
                    "name": "Valid status action started test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc6500a-aaa6-4cfd-867a-b417297f29f4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e181c3-6ac6-4145-8e15-d76e111e3b2e",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "386cea86-1153-46b7-82e1-65da2ec8bafc",
                    "name": "Valid status action completed test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action Completed\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c772b3f8-6f2a-49de-9d2e-b1a44b8c2271",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb56548-f3e3-41fa-8887-eceb29a91bf1",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddf7079-880c-4916-b76c-aa2a4a980494",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "v2",
                          "AddAction"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"SwiftDigital\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682edf14-7a73-428d-b40f-880b2cf26643",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Current action date test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "     ",
                            "    const jsonData = pm.response.json();",
                            "    const requestBody = JSON.parse(pm.request.body);",
                            "     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
                            "",
                            "",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78409f23-c2b8-4ae6-b668-c2539390b88a",
                          "type": "text/javascript",
                          "exec": [
                            "var moment = require('moment');",
                            "",
                            "now = moment().format('YYYY-MM-DD 00:00:00');",
                            "pm.variables.set('now', now);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8773941c-bcf0-40ad-8ea4-13b4d84ff439",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb8ad828-2232-4753-a621-c85eb87b6f88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "c2cef87f-cb8d-47f2-8874-669407af7efa",
                "name": "SearchActions",
                "item": [
                  {
                    "id": "cc67c279-890d-4eda-9406-134d231c3a68",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4646196c-feed-4a1f-bd8b-3ed0d8665dfc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf56f14-f271-43d7-877a-eef1a49a472b",
                    "name": "Incorrect account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c604214-a84f-4fc0-86bc-966b5a1e9a2d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "47085fb7-6554-4a77-b2ff-e292444257b1",
                    "name": "Locked account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10addb9b-40ac-4c45-9539-c81f2ff703e0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "798183ea-a2aa-4c7f-be4c-fad86e3707b6",
                    "name": "New account test ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a8b81f-7a4d-4b23-9609-ea086540e9ee",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca5e734-1d82-4364-8f19-65b208639e9a",
                    "name": "Only client Id test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"clientId\": 807964501\r\n}\r\n\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcae2da-69c1-4d93-885b-8033adb543e3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only client Id test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7702ab81-34b9-4a0c-a0a1-66257bc9f0e5",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "484053ea-b034-4ade-9f50-7c3e30744254",
                    "name": "Only action test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \r\n  \"action\": \"{{action}}\"\r\n\r\n}\r\n\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a723b8-ccee-4833-a1cd-5a16433d3187",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only action test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8148b6b-53b6-4e1a-8d4d-c3c1d58b6b66",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bb3fd8-3429-4940-85c2-6495ac6107b4",
                    "name": "Only status test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\r\n  \"status\": \"Action started\"\r\n\r\n}\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fb1f23-45a8-4816-b5ee-015fb1013c1a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only status test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00d690f-dc64-4d4f-8241-94728c023e0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f28c2bc-c00d-4c54-b4eb-1e20b00a4050",
                    "name": "Only page size test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\r\n  \"pageSize\": 2\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08e3d10-7ec7-4c29-a7f7-6122e53607b7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Only page size test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae84fa3-a426-491c-93a1-8de65e675186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "72347d66-e85d-40cb-b0d2-6878ef480596",
                    "name": "No body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cf71de-6612-4d05-bd6e-e1e9fca6e17b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.false;",
                            "pm.expect(jsonData.messages).to.include(\"The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true. Path: $ | LineNumber: 1 | BytePositionInLine: 0.\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77d217b-9838-436d-b559-125f7a400954",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b130b41-82c7-4dc0-9496-87c497abc3d4",
                    "name": "Blank body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SearchActions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n\t\r\n}\r\n",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1982bb0-0efb-45d7-b16e-afdd6fb4fbc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Blank body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "const jsonData = pm.response.json();",
                            "const requestBody = pm.request.body;",
                            "",
                            "pm.expect(jsonData.isSuccess).to.be.true;",
                            "pm.expect(jsonData.data).to.not.have.length(0);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf781ad-94ab-4462-83ef-b222f27365d6",
                          "type": "text/javascript",
                          "exec": [
                            "const moment = require('moment');\r",
                            "pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
                            "\r",
                            "pm.collectionVariables.set(\"action\", 'no client id');\r",
                            "\r",
                            "\r",
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    clientId: 807964501,\r",
                            "                    sourceSystem: \"RingCentral\",\r",
                            "                    action: pm.collectionVariables.get(\"action\"),\r",
                            "                    actionDate: pm.collectionVariables.get(\"now\"),\r",
                            "                    status: \"Action started\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
                            "        });\r",
                            "        "
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5b877026-9912-47c5-9af3-e26c98069606",
                "name": "SyncActionsToSalesforce",
                "item": [
                  {
                    "id": "e6bfbbe8-31fe-4f32-9177-f74c94740d18",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe82fd9a-9f0e-4583-97fb-3f8fe3341fdf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9674b8-5944-421a-8c08-4c9e255836b3",
                    "name": "Incorrect account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58beb247-ac80-4b5b-a861-59494897765c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "58126954-68e4-434f-8345-b6f54e08f91a",
                    "name": "New User account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "153d70b3-ddf3-453a-a253-166faa761742",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "261caec9-e202-4d4f-802e-aaa416f980b3",
                    "name": "Locked account test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d499ac-a75c-432f-8a45-49701763e74f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked account test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d08fcda-e7fb-4d2a-9618-fc68018ef34b",
                    "name": "No access test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104555d5-1a1d-42c9-9c26-70163e85e9e7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No access test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98282fa-3822-4b8c-8618-02dcefaf568f",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Actions",
                          "SyncActionsToSalesforce"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb14db2-6c74-479c-8539-4b309cb8ea60",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No access test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.include(\"SyncActionsToSalesforce[INF] Sync complete.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "852dc879-3378-4d55-92cb-c2fcd0f6bed0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02315786-231e-4d9d-9ca2-c66742fd77b2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "660bdfd7-9317-41d1-b106-fe017bb45163",
        "name": "EinsteinAnalyticsData",
        "item": [
          {
            "id": "4204e500-717a-4cbc-9ed4-94b52755c523",
            "name": "Einstein",
            "item": [
              {
                "id": "eae5ab87-6544-4bfc-ae3f-6bfb9c028c0d",
                "name": "ExecuteSPEDWHerokuMembers",
                "item": [
                  {
                    "id": "68e0b14f-6cf4-47c7-968b-1a04074b2fc0",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1215a5-0b50-4c43-8359-3ef21b94a02e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fb3aa2-2952-4654-a1b6-b99abb6565da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f04890-9eda-40a7-b835-1a31819d0ae1",
                    "name": "Blank stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac42d69-936e-43ed-ae06-aa5920254a1b",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Blank stored proc test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4054b57b-80f8-49e7-93e3-eb6967ee1912",
                    "name": "Invalid stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[usptionSFMemberAnalyticsFlat]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "078ee613-faec-444e-a28b-10c74631e36c",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Invalid stored proc test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"Could not find stored procedure 'wrk.usptionSFMemberAnalyticsFlat'. [wrk].[usptionSFMemberAnalyticsFlat]\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0ed2a5-5cdc-49a4-9127-455532d91db9",
                    "name": "Unauthorised access test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3360c14e-0c72-4a9a-837f-54f7a92f6472",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"Unauthorised access test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3e58d6-0627-4511-90b3-f13382ce41c7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"test\");"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c9ad20-8c90-4ba0-ae26-9235a7e101f1",
                    "name": "Blank body test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e485c3d-f952-4861-a834-c0f3b237fc85",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Blank body test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8729c626-298b-46d3-80c1-733c164899f7",
                    "name": "Another valid stored proc test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAccountTransaction]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14dedae3-4553-4e4e-9eb8-4544b54d9bb8",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Another valid stored proc test\", () => {",
                            "    pm.response.to.have.status(500);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.messages[0]).to.equal(\"Procedure or function 'uspIntegrationSFMemberAccountTransaction' expects parameter '@startDate', which was not supplied.\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6091606-0f82-463d-957f-15a060eac2d6",
                    "name": "Valid ExecuteSPEDWHerokuMembers test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Einstein",
                          "ExecuteSPEDWHerokuMembers"
                        ],
                        "host": [
                          "{{einsteinanalyticsdata}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAnalyticsFlat]\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c21522-8e37-4507-9df4-339dcc0eccbc",
                          "type": "text/javascript",
                          "exec": [
                            "const jsonData = pm.response.json();",
                            "",
                            "pm.test(\"Valid ExecuteSPEDWHerokuMembers request\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5483aa8e-d2b8-4e8d-914c-2ee953734fb2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5b4b445c-aace-4fdd-9f2d-01e595415780",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d1a22f2-c4ea-4db8-8d06-6ed8a3a21e73",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00de3cbe-1b37-4285-9f8c-a753c8b1aae5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c00132e6-ca89-4a39-806d-72189d735200",
        "name": "FileConversion",
        "item": [
          {
            "id": "8de1ac81-326b-4fef-8d88-151e203d7b63",
            "name": "NasFile",
            "item": [
              {
                "id": "5fb7bcbe-9667-4d1d-ab77-ed430cafe880",
                "name": "ListInFile",
                "item": [
                  {
                    "id": "dbe204ac-6afc-4a92-8ba1-0e0d956b385d",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140fda30-32f4-4c21-a1e2-e452a8909239",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e85c47a-c5c9-4691-9f89-a2ac555aa65a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3199be2c-706c-4da2-ae30-b2fd3aebb421",
                    "name": "Username and Password not provided ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3db515f-d5ae-426a-9a56-f3b1d7d476e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaedcec-c3d1-4ae2-9c71-faad72641ac0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c845e465-a37b-4fbe-be2d-b2e94a67965e",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c90930-f2fb-4d52-afd5-27d354dd3081",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0266a2-9b70-4e57-884d-40bde7527df4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ae8e85-adc6-476a-8278-6cbf380273da",
                    "name": "valid list in files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": ""
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e50dcc-3e88-4e25-b384-38b5dd8ebc8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\in\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName+ \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f11a62-ce73-4727-b239-1d95fc5bb3ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "1dd3876c-39fb-4e14-a040-a790d5a854e9",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a0d636-f044-4505-98c7-bc4d3f3c916c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf7bf09-ec0c-4655-a7f9-c0c41f212c50",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "14602e91-a35a-4ca8-9cc4-e42bdc25e7c4",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c36f3e9-f510-44b3-82a7-1a6d0315ac43",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b4a91b-f4e6-43ec-9271-977ff4908e13",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dee9e826-0d00-4b1f-9476-e7be017e0ac7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57244afc-cb6e-4cdd-8c5c-3d5e4d99a131",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "542bd9c8-5c65-4076-a259-f3893fe5540c",
                "name": "ListOutFiles",
                "item": [
                  {
                    "id": "d4b9dd02-91fc-4745-abbf-90fb08e2ba63",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4263a8ab-3a62-4c92-8c1e-ef2a0481020d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cd4efb-5756-4955-93e2-330d3d19e33d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2db934f-b095-4fd7-b1eb-d713d0f107e6",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6203a85-a081-45d0-b14c-972f7b874766",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a36e31-c8af-4c47-878f-ee1554e1ae09",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4642da00-cc3e-47b3-82ef-1c6f6ba0aa93",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f9c796-9e00-4719-ab07-4e73f622d2fa",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45df0f9f-e067-4fc5-9a96-81f0c64087c9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e0a17e-1f88-43e6-9ff0-98821f45f75f",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653dfd29-d6c4-46c9-94fe-3ccbc12dc519",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"test\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec69c2e-dc71-402f-b77b-984d23230f15",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "14acd81f-6af8-49a7-bac5-3e5029c697cf",
                    "name": "Username and Password not provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16513125-058a-4135-8394-b26e27077004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79bf844-7869-42fd-b400-3e9db01f975a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "61129ebe-3903-4d04-9346-9496fb642162",
                    "name": "valid list out files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFIles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": ""
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90df69ec-ec6a-4b29-8cae-c147a989066e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f451f171-c8bd-4eb4-ba33-a380b144e16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list OUT files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\nas_staging\\\\out_staging\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ea9b9c6-d6af-48ca-91e9-b1e312d5aade",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41ba6db0-c4fc-44f8-9e5a-0d1fed9145dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "55f39fb6-a63d-4904-8beb-dd8635d66cae",
                "name": "AddInvestmentOption",
                "item": [
                  {
                    "id": "00ca5fd6-739a-46df-afda-b2cd93a2d6b9",
                    "name": "Only Fund Name is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundName\": \"ABCD\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de56b0b8-1bda-45de-840e-cb8fb3f4c949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Fund Name is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4da1175-6541-498f-bcbc-7722757cbdb0",
                    "name": " Only Nas Fund Id is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"nasFundId\": \"QL81\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8eda062-0bde-4d1a-9009-31200a54e081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Nas Fund Id is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "be83d9b3-4a73-4ad6-b533-9d02a98728a6",
                    "name": "Only Fund ID provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"fundId\": \"QL81C1\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a084f9-9e6e-4f02-9ab8-1aeae441695e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When only Fund ID provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Name should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61d6e85-9620-42b2-8f28-01342a8bab2a",
                    "name": "Duplicate Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL82C1\",\r\n  \"fundName\": \"New CITY DB OPRTIONAL RISK RESRVE\",\r\n  \"nasFundId\": \"QL81C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e3754d-6cb6-48dc-8a30-ae1389e539df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Nas Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa2cc1d-b98b-44c4-9ed7-688f24f5822c",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "user",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "user",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd3a7fc-2ebf-4627-9e13-71fdb099a135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76389c61-7ab0-42dd-b2d0-34000958ed68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Username and Password test\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e16912-5a8c-49b3-b8aa-abcb0b564d47",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2245ce-bec2-438a-8d59-baa11977608c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "29dbce5e-29ab-4960-9996-351fbf57215e",
                    "name": "Invalid characters in Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"@#@{{randomId}}@#@#\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85df8070-f7e9-4e1d-8daa-54067d6678d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33a763e-92a9-421d-9fa6-9b6d46c2349b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "673c722c-2c02-4393-830b-830dea421721",
                    "name": "Duplicate Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"QL81\",\r\n  \"excludeFromUPFile\":false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9f07f6-a969-4ada-beac-5ef3f9b85d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12bf29b-7eb8-4d17-bd07-e816a7ab71e5",
                    "name": "User with no access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169676fb-3d69-48a5-991d-d84dcf79a79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f322e94-485b-4e82-801c-5b70540bb659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"User with no access\", ()=>{",
                            "    pm.response.to.have.status(403);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a37774a-cb52-467a-bbc6-4ab98b75700f",
                    "name": "User locked",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280f8af7-960b-4680-97a2-c1c3fcecdcf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a12a40-70f9-4f4b-9bdb-6ad972038eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked user\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "486404fc-5f7e-464b-b754-e63341702171",
                    "name": "Invalid characters in Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"$@#${{FundName}}#$#$#\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e768629-0164-474a-9d4c-51215a7d0d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund Name test\", () => {",
                            "   console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        ",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdd37ac-90e4-4289-a6e0-0cee8333354b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e4176a-d1d6-4d91-8cbf-0b51e93e4718",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95b92d7-7f84-4a24-8d5f-9ee922cc8092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e17924-2193-486a-ad19-9bdfa311236e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db6a127-878d-409b-921f-d62d4ef0e425",
                    "name": "Empty Request body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b73b966-348e-4a2f-b83a-07c7b5544891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty Request body test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d526ee75-7078-4c01-8f45-cae511911187",
                    "name": "Empty input fields",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"\",\r\n  \"fundName\": \"\",\r\n  \"nasFundId\": \"\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b92b37d-7310-4032-861a-47ee960d41af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty input fields test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fbd527-1892-491a-a69d-bc6d07f89dd5",
                    "name": "Invalid characters in Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"%%{{randomId}}#$\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf079cb6-9147-45b5-bc26-15cbeb042e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393d096e-4367-4cb7-8ad1-e97be429e1ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "40fc2421-8753-415e-8396-7f764e974bf7",
                    "name": "Valid all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6619b0d3-8f28-4536-a408-124fa205c167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All valid parameters test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe58abe-3eaa-46a3-8895-c62faca1bf5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e41fb9-2476-4c0b-991b-82f1b22a5a81",
                    "name": "Duplicate all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"LG AGGRESSIVE ACCUM OPTION\",\r\n  \"nasFundId\": \"LG18C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c707727-465e-4aab-95b0-9ae3e52826cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All parameters Duplicate test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    ",
                            "    pm.expect(jsonData.response[0]).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Correct message validated: \" + jsonData.response[0]);",
                            "    ",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Test completed\");",
                            "",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d077d5f9-cc71-4091-bebf-f9b69a0e978a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27a040d-13f7-4468-8e18-61be35d5e342",
                    "name": "Duplciate Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n   \"excludeFromUpFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "181a633b-364a-4622-9005-8ad7ea2e7e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "  ",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3017d9-f49b-4255-937e-211d46d78109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ffd0116-6b2c-402c-96b3-ef9ac01e6f14",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ec2944b-3325-434a-bd68-a30b1895dbfe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "570f86ea-eae7-4123-969b-16f75fb78ca6",
                "name": "DisplayInvestmentOption",
                "item": [
                  {
                    "id": "889df0b2-efd3-4854-a51d-94a2783678fc",
                    "name": "End  to end test - exclude from up file true",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea079870-6318-4383-81dd-dfc8432b5f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(true)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3af5ec-08fe-445c-9202-9868d5d804bd",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: true",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a3cc36-0208-4f5d-97a1-49d63735fdd1",
                    "name": "Valid  FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16b58eb-7952-4926-a9f0-ca7b286b2f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Nas Fund Id displayed is: \" + jsonData.response.investmentOptions[0].nasFundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7682698a-1cd2-4c91-ad0a-27df4d4392c4",
                    "name": "Valid NasFundID and FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundId",
                            "value": "LGGBCY"
                          },
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecaa3dce-8386-465a-8e9d-01427ffcebdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundId\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundId\")) + \" matched.\");",
                            "    }",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8050baf-c9fc-4c58-82c1-5ee5ae1b6997",
                    "name": "Non-existing FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8447b6-c8a2-4fc8-b7d7-932b76ab3d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6979179c-3d67-41d7-80de-1eba181919fd",
                    "name": "User with No Roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71589b90-3499-4abd-a598-cb3b682a9f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "62327047-1a6e-4c5b-a649-269fe0fe6551",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb224a2-f410-4064-8ed8-4065aae142c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd419835-976c-4e4d-9f4d-dd5438098a6f",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "GBCYC1"
                          },
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d748d2-ee8e-4f56-9792-11b4960f5f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b78ae02-e87c-4439-98b5-268514688762",
                    "name": "Incorrect username and password ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "incorrecty",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "incorrect",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c472364-ff1f-4075-8b2a-a5f2d752b496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0452d991-5be4-49ba-8ebd-1dad72050b59",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea11d686-de6a-49d6-a5f6-9cbf590c4fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d49794d-9668-4753-8fa1-1ea5b17165d0",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93f87c6-d740-446e-bf03-d091128b4e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d172d91-eb7b-4aa7-bb70-a6f546dd1379",
                    "name": "End  to end test - exclude from up file false",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b6703c-ea66-467e-b100-31fc5041d56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419b5273-0571-420a-bf85-89b5a79bdc70",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: false",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b25090b-34b6-4ca8-85d2-6855af583af0",
                    "name": "Blank Parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bd3a1f-4fb2-4a31-ba8c-661773a781ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const length = pm.response.json().response.investmentOptions.length;",
                            "    console.log(\"No of Investments options records:\" + length);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee0ea89-623f-4b5a-9993-fc54f656cb80",
                    "name": "Non-existing NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3e4813-b470-4306-9a7a-8c826a428b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc2ff37-b0d0-476b-bf4d-e43eaf2b12a1",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e06e83-ed29-4388-8a8f-57f8c84e2e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f1c958-3c94-4393-9af6-d77089fafe7a",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01385f5d-120a-421d-853f-2c44a73164af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cbbce77-780d-457f-9b9b-d6a6ffef7732",
                    "name": "Valid  NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "LGGBCY"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daec4949-0109-4a78-b8e7-d11a8681be0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "292c80ba-e328-4fe4-a137-2a200fb1618a",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58accb5a-0526-4023-ac7d-406c6a26f9f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "5e3697ba-dce1-474f-b57e-0676ec1a4694",
                "name": "RemoveInvestmentOption",
                "item": [
                  {
                    "id": "be04b2c6-7fbc-4d29-bf4e-46af134765d2",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1301731-1807-499e-b282-451b41417f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2805a4bb-58e8-4924-85e9-e045ffa8ed46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0653bfb-cfe9-4ae6-978f-a4e68573f37f",
                    "name": "Incorrect username and password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d05345-4184-4ab1-bc33-6ccb7596e4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382633c3-2bde-4a46-b525-fc1eb2309c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a8873f-d75c-4ed1-8baf-e6e8d4b6bb3e",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3b7bcb-cac9-4f4f-889e-c01c45b34a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf35acdf-519d-417e-8d02-fce6aaba54fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30ac2f5-6bd2-4226-930a-417b6d6e5818",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05d1081-7fc0-4de6-bb1d-216310f3a7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c29c9c4-6397-441f-9db0-7c231ca86a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e81f32-37ff-48d0-a06c-2e2a2309d46b",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3988362-7f0a-4a85-85a1-3616a2dcfa6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708b13b0-8c73-4882-917e-2234a28eed84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e72b9f-caea-44b3-8d37-3939fa43a080",
                    "name": "Blank parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": null
                          },
                          {
                            "key": "nasFundID",
                            "value": null
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb710195-a12f-47ea-a939-3bec50f37a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response[0]).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "    pm.expect(jsonData.response[1]).to.include(\"FundId should be provided if NasFundId is empty\");",
                            "    pm.expect(jsonData.response[2]).to.include(\"NasFundId should be provided if FundId is empty\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff5640d-7122-4776-b883-0c84fec0b5d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf001eb8-63d8-4c3e-bfc3-14bf66e72382",
                    "name": "Non-existing FundID ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7e9ed6-90cd-4747-b6c0-c9b5f5216aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5438406-e6fd-44cc-900e-03c7ae7b0daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9e4303-055a-4512-a436-d893a417382d",
                    "name": "Non-existing Nas FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40b9d8f-85de-40d1-8076-dce650826647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6d61e0-6133-410f-a6fc-8144dfcfa284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b841ab32-effa-4bf1-8507-5ae40e836ec1",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b7b456-ce47-4e7d-a79d-3a93b41e62ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c60d84-3c92-4635-9584-43c5c85f8c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d76a901-d44e-4f27-a5e0-5fac114a505d",
                    "name": "Valid FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1f91da-8a50-473d-adbf-c7112cf38253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId =  successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67e6a8d-f56e-4d8f-9c42-bff72e6d141b",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fef87be-d010-4219-8eaa-71ac32b9e90d",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b6f6cc-6ce7-4b78-a0b2-d2e1ff491ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d7474f-1542-40fb-a73a-6aca952b8741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9290b07-8960-4fc0-adce-f1780a50cbee",
                    "name": "Valid FundId and NasFundId",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e812aae2-6473-4bdb-aaea-cd39c135ea21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d012e11-ce14-4fb1-9334-0e71440c2729",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48c6aed-3e2c-4e4a-b12d-fc080367a988",
                    "name": "Valid NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6419646e-ccdd-4b02-b7db-0aaaee2af13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = , nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f970744-3eb1-4608-a086-ca9b6f753261",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4925f297-1679-4ca2-b195-90b57ec04baa",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55f4b90-d7c7-4265-b61c-ae63c8926612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf9adec-e8ca-4adb-a3a7-7316a0a3c643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4353f6f-c53e-407e-932e-4770077b3089",
                      "type": "text/javascript",
                      "exec": [
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c53bed63-84eb-46b3-aad6-d1ef89651338",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ec84bc8-da27-4016-967a-37b21e0c646e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8eb94fc4-079b-4624-8676-6d6d7293c768",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "57d79402-37d4-4251-9c9e-1c50a63621be",
        "name": "Swift",
        "item": [
          {
            "id": "3fb72277-25bd-4208-bbe3-7a007f0add25",
            "name": "SwiftFolderConfiguration",
            "item": [
              {
                "id": "397c168e-ce3b-4e9d-86e3-88fde049f4f2",
                "name": "Addfolder",
                "item": [
                  {
                    "id": "e47aee5b-3a5d-4613-b77e-ee1d2ff02284",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6326962b-d8e4-4443-8f8d-faf9f6ec107c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "8adee115-e551-44a7-8ba2-a23226ce303e",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ec2ccf-a98e-4ed6-a2ea-60ffd6670253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "4a03d326-479b-4d91-8d94-a137fc92e608",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ea185f-ce23-40e9-a768-2e423efb340e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "d3b3f263-a97e-4f10-88c0-3b54499007ba",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb60f9ee-7640-4e7b-8bfc-9479ad0a18b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "14ae7c0a-beda-4f89-9e8b-0796c9b35163",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f2b684-8060-4e76-9810-b1b4000e6b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(405);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": []
              },
              {
                "id": "6f8fa6c8-2308-43d3-8cbc-b70406083def",
                "name": "Listfolders",
                "item": [
                  {
                    "id": "44b1546f-5307-405f-8e77-930f225ea7bc",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb09581-08bb-448e-bb6e-718c3f41ffd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e150f84-6eb5-457c-bca1-e380817e264d",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f886cbd7-f365-4596-b035-c69695480380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7677d3c-af9f-4d23-b6bc-4df2df9f5974",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "test",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "test",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b40b1a0-8f61-4c4f-a238-b5913f419961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf2fd5a-0464-4f22-8d0a-48be8701ecd6",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577f08e3-6b69-4b53-a945-55c0b20f24fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ef2f51-8a46-4c4a-adc8-fc3ee3230738",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc476e8-ab12-4b95-bcfa-4f02db3deb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49861c0-8020-4a82-948d-8a94f0fd1eab",
                    "name": "Valid list",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa93ca7-ea23-418b-bd57-efea61b81af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    ",
                            "    const numberOfRecords = jsonData.response.swiftFolderConfigurations.length;",
                            "    ",
                            "    console.log(\"Number of Records:\", numberOfRecords);",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a533d3c-0650-444b-adc8-d135f2d50fd8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1077633-0c1b-4344-aa44-816dff452fbc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c8390153-24f6-4f25-bad6-78700510ee8b",
        "name": "RingCentral",
        "item": [
          {
            "id": "7c7a1129-bc96-4191-b2c9-6c562deeb140",
            "name": "SyncCompanyCallLogs",
            "item": [
              {
                "id": "227cff73-5848-48c6-a6f2-fad230e202ab",
                "name": "Date time exact value with time zone ",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-07-12T14:10:26.2410000+10:00\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b813d5c-ec01-4bd6-bd7d-426cd54af495",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Date time exact value with time zone Test \", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "036f8eb5-8839-4321-ad13-d13d95ccfe23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "6dd09573-df7f-49a8-b76c-07cab8858f8a",
                "name": "Delta sync",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b2d3840-d3c6-4ead-94ad-e8333bb8f1d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Delta sync Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + pm.collectionVariables.get(\"todaysDate\") +\"T00:00:00.0000000\");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3465fd93-74e7-420c-9773-643cb9dcd48f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "61a45384-21cd-48ab-acb8-e1e45c38762c",
                "name": "No auth",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cac5770a-b817-4611-99b8-73209a62f50c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No Auth test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1a0613d1-6dbf-4531-adf9-48bed3f3bbc3",
                "name": "Incorrect account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93da3ce8-2fb2-4d76-a6a1-c281be161217",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "0b57dadf-1f02-4867-a72a-1246dc83fee0",
                "name": "Hours ago",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3aae42e1-d832-4e00-8c28-f120a2a795dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Hours ago Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "442aa92a-f7ae-4253-85af-b827f5f25011",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "f5459a58-fde8-4e16-b764-72f0a6fc09c2",
                "name": "Locked account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2af25b93-5ffc-4704-ab67-6682ad13ebdd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "2aa2ef4f-7d50-45d8-bb5b-328f72a2e49a",
                "name": "New account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64280135-f358-41b2-a8a4-481804d2a11f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "33474365-67ca-4575-8e55-ae75502f95b7",
                "name": "Sync all logs",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73c804c6-3689-4069-a386-6c42c4654c6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Sync All logs Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c517b69f-45ca-4d78-b73f-88b98df58e4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "fb229615-d4be-4885-acce-0fe527f4dd99",
                "name": "No access account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "313583f5-acd7-433e-ac23-e3b3928b0b6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No access account test\", () => {",
                        "    pm.response.to.have.status(403);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "4c131b64-d9b8-4736-b64b-fb08f75b2c49",
                "name": "Blank body",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2aeb8308-f421-4366-8763-1d4b5c3a44c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank body test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"A non-empty request body is required.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "476d02cd-5231-4e84-9352-7d5119365b64",
                "name": "Negative pagelimit",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": -100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb8cf93f-4d5a-4869-a32f-e6aa06528cd4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"negative page limit Test\", () => {",
                        "    pm.response.to.have.status(500);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"An unknown error occurred. Please contact support with the trace identifier included in this response\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.not.be.empty;",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "844b9b1c-ecf6-4524-8922-7f3251ce17fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "bc1fa089-513b-4ffa-9d84-5946dcb3a270",
                "name": "Blank date from",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e986659-f6ff-41c2-aac3-abffde5d6c1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank date field test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 16.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "e4e74828-8bfe-4aa2-963f-bdc40970962a",
                "name": "Blank date hour",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": ,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b351076-3265-4823-a0bc-615df722b2c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank hours test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"',' is an invalid start of a value. Path: $.hours | LineNumber: 2 | BytePositionInLine: 11.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "6b05299d-4213-42cd-8dec-bf22877176f3",
                "name": "Negative hours",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": -24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c4916ab-e1d3-4606-b40f-7f73d31a971e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Negative Hours Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "   const requestBody  = JSON.parse(pm.request.body);",
                        "   const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "988c41da-a8c4-41f1-b09e-6f2c7272d6c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "69c0e21a-4ffe-4441-b33f-640a61fe3526",
                "name": "Blank date pagesize",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": \r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55459193-1215-439a-a053-f5c060f52cb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank pagesize field Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"'}' is an invalid start of a value. Path: $.pageSize | LineNumber: 4 | BytePositionInLine: 0.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "0b23508c-386d-4da7-96f1-c94b990cdbe1",
                "name": "Invalid Date From",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"12-07-2021\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14d4e71b-0508-4aaa-bc24-df31cb626a8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Invalid Date from Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 26.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1a8256b-09a9-4d20-9050-127330953ebd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7c01de50-8aff-448b-addb-9b004f80fbc9",
                  "type": "text/javascript",
                  "exec": [
                    "const moment = require('moment');",
                    "pm.collectionVariables.set(\"todaysDate\", moment().format(\"YYYY-MM-DD\"));",
                    "",
                    "pm.collectionVariables.set(\"todayiso\", moment().format(\"YYYY-MM-DDTHH:MM:SSZ\"));"
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{TestAutomation}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "TestAutomation",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "103db5f8-8491-490f-9764-936d038e14cb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39ba8014-3053-41c5-85b9-933a1c51371c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a926e1ca-fb03-4a1c-a31f-c684716dd037",
        "name": "LGIA.Internal.Sonata.Helper.V2",
        "item": [
          {
            "id": "d91b5929-05da-4f99-8894-8600669ca9ab",
            "name": "DigitalByDefault",
            "item": [
              {
                "id": "1e08fbe1-d50c-47e1-86c0-e02a2cdc5a33",
                "name": "SubmitCurrentImportDataToSonata",
                "item": [
                  {
                    "id": "aad5664c-cfed-416e-8275-f9e422ca167f",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a650a5-0480-43fc-9934-7fd912bdace9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ef8ffa-9213-473d-b58d-67ce06713225",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed44ac90-2b83-42fb-8c75-6999995839ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d0dafa-64a4-4b91-89e7-685a47626c45",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitCurrentImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd1a5e2-0edb-4d9f-a005-fd7ff4b5b5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "",
                            "    const responsedata = pm.response.json();",
                            "    ",
                            "    pm.expect(responsedata).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c0bc0fb2-be31-4240-8be6-d6bb845bd0c1",
                "name": "ReduceCurrentImportDataRows",
                "item": [
                  {
                    "id": "6249d075-eb95-4c44-9af6-5040df147181",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3401a873-fbb3-42bc-88e0-addf0648cf98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf475f03-f923-4c66-aa86-936380ce66e1",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "10"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e4d85b-6888-4078-9280-76034dde1509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d20203-c7d4-4911-96f7-d6a409cabfed",
                    "name": "Incorrect rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "wewetwetwt"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44881634-105b-44e3-8521-ca2223eace29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect rows to keep test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"The request is invalid.\")",
                            "    ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "effe3af0-9ade-4e0d-b187-28f3c41b1e2d",
                    "name": "Negative rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "-10"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cccaa92-e1e9-4f2a-a680-b8932530f651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Negative rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.false;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b436aecc-2bbe-4da0-a56d-d3f9014737ff",
                    "name": "Big rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100000000"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237c7a17-9adc-47ff-b86e-f3be2f69e2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Big rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.true;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a45806-4a04-4e4c-9e6c-1a1719f5337c",
                    "name": "Zero rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100000000"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5bbbbd-fba3-4bc2-b778-d34b8786cc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Zero rows to keep test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData).to.be.true;",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18b5080-8a7d-409b-a4fc-8350a4211c20",
                    "name": "Blank rows to keep test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a794a54c-f692-4bf5-a718-b2d607b06693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Blank rows to keep test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"The request is invalid.\");",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1cbef56-1e3d-416c-b6fb-8d618e7b58c4",
                    "name": "No rows to keep test Copy",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01259b96-8a58-43e0-b96c-e6df88045d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No rows to keep test\", () => {",
                            "    pm.response.to.have.status(404);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.Message).to.include(\"No HTTP resource was found that matches the request URI 'https://intg-mcro.internal.lgsuper.org/sonatahelper/ReduceCurrentImportDataRows'.\");",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "30625655-5006-4a93-a317-241bc46e236d",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ReduceCurrentImportDataRows"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "rowstoKeep",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74af6972-6bfa-478d-b10c-f8a5dba85b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "",
                            "    pm.expect(jsonData).to.be.true;",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b5d4e2e7-440b-40df-bf9f-8e2d890e3aeb",
                "name": "ExecuteSPBulkImportData",
                "item": [
                  {
                    "id": "ec70ae6d-877a-4ae5-b5dd-3328dbaf643b",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4bb61b-1bbf-41ce-bd1c-b07c34dc1a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b5803c-52f8-4091-8dea-36fc2afa578e",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ae5ee9-0410-4cdd-87bf-42144c936e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcc4924-0a3a-44ee-a5e5-c8a2089876e7",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99707ec-d0f5-40e9-91cd-d2f5e227f158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a984054-d124-479d-998f-9385972453e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "21b42b57-25cd-4648-adc6-ee5b3bb2ce18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "a6e4ee3a-0dbb-41ac-8d89-0799d62321d1",
                "name": "ExecuteSPDailyImportData",
                "item": [
                  {
                    "id": "d29df16c-ccf5-422e-b5bc-ef8291948c20",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPDailyImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b6a3c2-bd90-4cd1-9baa-029ac67836dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3b4897-2089-42a3-ab69-06e1919b75d0",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPBulkImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "576792f8-e674-47bf-a838-18df06fb60bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "063c41e3-e35c-4919-881b-ae6089168073",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ExecuteSPDailyImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83065bdb-2e2e-48dc-b10e-6c98d785bf21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "484c3c19-456b-44a0-948a-818ae18b4629",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e266184-71cc-48d5-bcdc-67c92c414d92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "915f07d6-c0bf-42d9-9b36-67f1f6931517",
                "name": "SubmitBulkImportDataToSonata",
                "item": [
                  {
                    "id": "8ec844e5-4a53-4941-927f-98d4c0d8e3e1",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578a4f9a-8f27-4b35-a850-f302c887e5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15fb25f-bd7a-4e62-85cf-b39f0081e66b",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe45679a-0e10-45bf-8011-9f0da548287d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9034bead-611a-438a-8433-36527f094154",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitBulkImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a29698b-6170-477b-bbca-f3054826841b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e78f5a3a-7048-4242-b5a6-dbbb060dd9b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f71e3681-1fc7-49c1-b0dc-c3f508bd3d34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "0f7f8348-11fc-4191-910e-6ef0a3d18210",
                "name": "SubmitDailyImportDataToSonata",
                "item": [
                  {
                    "id": "2b9636a0-735c-44bc-9094-84a2c8235acd",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3876bc0-5c04-4531-b601-a1ade6089a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3d9bfc-9dae-497f-a750-5effe85e4db3",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f84f9f0-d046-4152-8b63-e635b91d623f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c672274-1c66-45dc-b199-39e06441c776",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitDailyImportDataToSonata"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c787b5-9e1f-432c-91ec-303eec0542bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    pm.expect(jsonData).to.be.true;\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e638612-95ca-413d-ab82-7417dee12a85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "92050811-326d-4c22-b190-51022fa85c7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "2751de5c-d1ba-4988-82d8-f0128f6055cb",
                "name": "GetCurrentImportData",
                "item": [
                  {
                    "id": "b9a433d5-9624-4126-a945-1ef64ccb27d2",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4555513a-e6b2-4d31-934b-92fb2efb1393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "796d0553-7442-4662-8ca5-f93cc403592b",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3ee58b-31c8-4344-ba46-1174c7278a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad092d9-3194-4da6-905e-63f3d9f159cf",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetCurrentImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239e17ce-2d97-44af-bcdf-0419b6d2254e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90383eb4-08a6-400c-bb79-25868a1b6cb1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "008205e1-ba02-474f-bb43-797f29e49da2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "b23c0294-7a66-4a2a-839e-b6d727492f89",
                "name": "ClearImportData",
                "item": [
                  {
                    "id": "af57d21a-004f-43d2-949a-e74d72cd627d",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1761cb04-1e7c-4f94-bbad-61bab3229c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {\r",
                            "    pm.response.to.have.status(400);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "066934b9-85af-47dd-8da7-4d455f676d9b",
                    "name": "Incorrect Auth Key test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e1a3e1-a010-4f17-8998-0152ea98a4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Auth key test\", () => {\r",
                            "    pm.response.to.have.status(401);\r",
                            "\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b66d827-d410-4f5b-9823-45db327009c5",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "ClearImportData"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd90bbee-6fb2-4ce7-a597-812bf792f1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", () => {\r",
                            "    pm.response.to.have.status(200);\r",
                            "    const jsonData = pm.response.json();\r",
                            "    console.log(\"Length of records: \" + jsonData.length);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "Authorization",
                      "key": "key"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d901d3e-2c4c-418b-820d-a3d117d22536",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a20d6b90-eb3e-433a-9487-f0056dc3239d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "16f9d02e-61a7-44ac-99a0-246dee2a12ea",
            "name": "PmifInsurance",
            "item": [
              {
                "id": "3c192e07-f446-4c0d-aa6e-c790be2dc4fe",
                "name": "PmifInsurance_SubmitPMIFOptInRequests",
                "item": [
                  {
                    "id": "650ea97a-0f91-4c5f-86fd-524c34d7b92e",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e759a4-2d77-44ab-a74b-397565d8771f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb60866a-258c-4957-88a2-3872833072c9",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289f399d-4ae7-4b4f-bcd7-dcfa8edbaefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "06efae8d-56de-46f0-8023-4b978b628e80",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "SubmitPMIFOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "216df23c-9d2f-4840-9b0a-4ad8668919a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid test test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        \r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d993b276-6c08-410f-a3e1-a8fdbca7e3f0",
                "name": "PmifInsurance_DeletePmifInsuranceOptIn",
                "item": [
                  {
                    "id": "3cc7bd38-86e0-49be-b04e-327335d6cb16",
                    "name": "No Auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "3016"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39fd8b7-dfb4-42f1-b3b7-5a1bfcaf8476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88b7c61-4b1f-4d5a-bf24-075a97c8036c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7eb591-8105-42ee-a107-b760384c319e",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "3016"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic ",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d1e6a0-c97d-4927-baec-4e61a631b73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b14df4d-4f01-4cee-857e-ac168296353b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c348260d-86de-408a-aa33-c78863cc8cac",
                    "name": "valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "{{optInId}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8878798-8c6c-4e1e-bde4-6589e8c27690",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Create insurance record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168f404e-b140-4830-961a-7cee3d103d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
                            "\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3ab825-8bac-4475-9135-dba3e73d393f",
                    "name": "Special characters ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "@"
                        ],
                        "hash": "@$",
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209df544-eb67-4bd7-9293-c0f465e0e354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c9f410-a994-4a9b-9b64-ae025be652db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Special characters ID test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Message).to.include(\"The request is invalid.\");\r",
                            "\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f004b92-c751-47c2-84fd-395a736316bb",
                    "name": "Non-existent ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "0001"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714c7a13-f690-4a76-bf69-eddc7cca39bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af819077-86f8-4f5b-9751-9abca8f12909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Non existent ID test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.false;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "927a4461-703d-491f-b6b2-3085a02a56e2",
                "name": "PmifInsurance_GetPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "6007f1f5-7de7-49da-b9ef-df77e9f86873",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "154176"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed3d608-c1c8-48ed-b46a-fb280ae8a250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d9cf9d-93eb-47cf-8ea6-52b9e6443428",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "154176"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3585781f-0273-4f17-971c-7650aa1bfad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28484e9-7c76-474e-bc56-76a5deadd319",
                    "name": "Invalid ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "0001"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4488b0-327c-4df8-9667-4517c906215e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.OptInRecords).to.be.null;\r",
                            "        \r",
                            "});\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cebafc1-f00f-4ae4-8f10-e4687c9ee514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f6b5da-4920-4fab-8211-9b10e578ee07",
                    "name": "Non-existent ID test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "!1!1"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d1ba4c-a62e-4429-8d6a-819f7f9579f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Non-existent ID test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Message).to.include(\"The request is invalid.\")\r",
                            "\r",
                            "});\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97d01c2-f157-4fb5-981d-21e45967059d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a764fedb-45b9-489e-8a72-0b2bb0c90209",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "{{optInId}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f14f63-40b2-445f-9c99-fec6ce042ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.OptInRecords).to.have.length(1);\r",
                            "        pm.expect(jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID).to.eql(pm.variables.get('optInId'));\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "\r",
                            "});\r",
                            "\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a2ecb2-e806-4d62-976f-c7567dafb271",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance opt in record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f53ae5b4-cad4-4b73-9cbe-9be47ace0c23",
                "name": "PmifInsurance_GetPMIFInsuranceAll",
                "item": [
                  {
                    "id": "f70d58a5-077d-45ba-b9fa-1f0d17e1e72c",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc761598-4c39-4ee7-a754-4ef4fe0caf7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5a43ef-85d0-45d8-bba7-a4e6ab5879fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3594d7c-11b5-41aa-b40d-12b65dbfddd6",
                    "name": "Incorrect Auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc205150-8461-4a1f-8538-4c62f333a648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f27cc48-b706-4a38-92ab-9f9b2b5f4499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c8358e-465f-45b2-89a1-3a6e338ffcd4",
                    "name": "Valid asc test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fa6db2-012c-4173-b2e6-303a53483765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d20d2eb2-187d-4bb0-abe2-b203b2d872f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        }\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "262ac006-69fa-4897-81fb-ce0cecfd1522",
                    "name": "Valid desc test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c949842-cc76-484d-9392-9aeefd440358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 10);\r",
                            "pm.variables.set('asc?', false)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5f5c02-4300-4b91-b015-27ab0e8d53a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        }\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f2f49f-dc5d-4153-a6db-7c341af2afd9",
                    "name": "Valid one record test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance",
                          "PMIFInsuranceAll",
                          "{{limit}}",
                          "{{asc?}}"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e4b4e6-5f46-47e6-a407-b618892c9dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('limit', 1);\r",
                            "pm.variables.set('asc?', true)"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8285d1e0-9505-447d-9a32-17181491ffe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
                            "        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
                            "        console.log(\"The number of records are in the range: \" + result) ;\r",
                            "        const lengthOfRecords = jsonData.OptInRecords.length\r",
                            "        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        \r",
                            "        if(sequence) {\r",
                            "            console.log(\"Sequence is ASC\");\r",
                            "        } else {\r",
                            "            console.log(\"Sequence is DESC\");\r",
                            "        } \r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3b2dc4d7-54cc-44e4-8897-50aaefabc7a0",
                "name": "PmifInsurance_UpdatePmifInsuranceOptIn",
                "item": [
                  {
                    "id": "48ef50e1-5481-4aaf-99fc-7413af77053f",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8a7ead-714f-4857-96f0-405fe1bc4777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "83013523-b3f3-4d44-a8cd-5aed7b1b714d",
                    "name": "Incorrect Auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dc8196-7fbd-4364-b070-1997247eef86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fc1d13-a7f0-47c2-92cb-039fb9087c16",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "PATCH",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": {{optInId}},\r\n  \"ACCOUNT_NUMBER\": \"100002222\",\r\n  \"SOURCE_SYSTEM\": \"CCM\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d559997-7cb8-456a-8581-858c19b68913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 row updated\");\r",
                            "\r",
                            "        const getRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'GET',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(getRequest, (error, response) => {\r",
                            "        console.log(\"Record fetched\", error ? error : response.json());\r",
                            "        const resultId = response.json().OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID;\r",
                            "        if(pm.expect(resultId).to.eql(pm.variables.get('optInId'))){\r",
                            "             console.log(\"Records updated correctly\");\r",
                            "         } else {\r",
                            "            console.log(\"Records failed to update\");\r",
                            "         }\r",
                            "\r",
                            "        });\r",
                            "});\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });\r",
                            "\r",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9242c8e-fdfe-4ad5-8f72-c4e503be935d",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
                            "        method: 'POST',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        body: {\r",
                            "            mode: 'application/json',\r",
                            "              raw: JSON.stringify(\r",
                            "                {\r",
                            "                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
                            "                    SOURCE_SYSTEM: \"Web\",\r",
                            "                    ACCOUNT_NUMBER: \"100001234\",\r",
                            "                    STATUS: \"SUBMITTED\"\r",
                            "                })\r",
                            "            }\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(postRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Create insurance record\", error ? error : response.json());\r",
                            "        \r",
                            "        });"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c55b6065-35dd-41c0-bf6b-603a07b0c0f5",
                "name": "PmifInsurance_DeleteAgedPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "390a13cc-f1f5-4153-83f1-f3f26a823aa6",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d03dad-2b36-4668-bea5-e829b503041a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4a9829-550a-4901-b904-b9936b020a9e",
                    "name": "Invalid auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "100"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766aa6bb-6cc0-4381-b8bf-70ab193894a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7019478e-003a-4321-9867-5d223cf331ee",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedPMIFInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThanDay",
                            "value": "{{days}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd262690-b517-4d7a-b3b6-dfa09a854838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid auth key test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "        const jsonData = pm.response.json();\r",
                            "\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"0 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
                            "\r",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91020c40-816c-4cb6-9ca0-b6f64621e48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set('days', 100);"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ed8cd2b1-1b52-4002-ade3-06dd2aa4125b",
                "name": "PmifInsurance_RecordPmifInsuranceOptIn",
                "item": [
                  {
                    "id": "236d297a-0854-4442-a0a4-fbf55de0f557",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed69df30-e498-42b3-908c-6fef2145645b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ],
                          "_lastExecutionId": "e408f25a-0880-46f4-aa1a-cfc98601284a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5686ef4c-c5bf-493c-8151-481ade358d66",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1c5aa7-d968-4d16-a2e4-aa193b89b865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ],
                          "_lastExecutionId": "cd53c6ce-bdc7-41ad-ae22-6dc493296d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c859e6-4bfe-4fe8-b9d3-4a094de0b5a4",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "PMIFInsurance"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887a09c3-06b6-4e08-90d8-7014982eed9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"1 row inserted\");\r",
                            "});\r",
                            "\r",
                            "const deleteRequest = {\r",
                            "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                            "        method: 'DELETE',\r",
                            "        header: {\r",
                            "            'accept': 'text/plain',\r",
                            "            'content-Type': 'application/json',\r",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                            "        },\r",
                            "        };\r",
                            "\r",
                            "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                            "        pm.variables.set(\"optInId\", response.json().Id);\r",
                            "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                            "        \r",
                            "        });\r",
                            ""
                          ],
                          "_lastExecutionId": "afbc0263-d1c8-42b6-a15f-a164a1c1dfaa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bc62eba8-a1fa-487a-9768-746b0aca6162",
            "name": "PysInsurance",
            "item": [
              {
                "id": "986021e1-5a1a-4c91-8d0a-b0cc36dca832",
                "name": "PysInsurance_RecordInsuranceOptIn",
                "item": [
                  {
                    "id": "f102c752-42de-49d8-98ed-beb90ebcf8b2",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de64c78-69e9-4be4-b3a9-4d7f92473bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac2cbf5-56c8-4794-bdcc-ed8e2d1e781b",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64cab3c-bee9-458e-a41f-e0c1e50be71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91db837-d101-408d-801c-ff5274ad9152",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "RecordInsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf301b6a-3761-40e5-81d6-888dfa4ae38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        pm.expect(pm.response.json()).to.eql('true');\r",
                            "        \r",
                            "});\r",
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4d5124d2-d91b-4f58-b52c-ea49d82f2eba",
                "name": "PysInsurance_SubmitOptInRequests",
                "item": [
                  {
                    "id": "28975744-03cd-4944-8a0b-145bbfaa5231",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662696b1-4e93-4b2f-84ff-90b47c47dc23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc69b1b-fa52-4961-bca0-35abdb779f3b",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c32da0c-7ce5-42de-a001-8afa75f6c89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "800708da-4e40-4d51-9dac-7f0baaa6a18a",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "SubmitOptInRequests"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef91038-a958-4bee-a977-720740abebb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.include(\"0 rows processed\");\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "070adb32-dc35-4d1e-96fd-a6a732cd8547",
                "name": "PysInsurance_GetAccountsForPYSInsuranceCancel",
                "item": [
                  {
                    "id": "0ed378ce-5836-468f-8658-189437c5109c",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46eeaa8-d628-4b60-a323-635bbf5dff7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8783209-76cc-41a8-b65f-7513d881c3a4",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867c06fd-b0cb-4870-bed4-9458a7c621fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df82cf9-0a3c-485d-a222-fe519b5680c2",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetAccountsForPYSInsuranceCancel"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ccf2b7-c252-44cc-ad11-5e7ea82a1ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Valid test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "\r",
                            "        const jsonData = pm.response.json();\r",
                            "        pm.expect(jsonData.Success).to.be.true;\r",
                            "        pm.expect(jsonData.Message).to.be.not.empty;\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db352c72-f8d4-4ee5-99ed-50b660ddc4f1",
                "name": "PysInsurance_GetOptInDetails",
                "item": [
                  {
                    "id": "65018147-cedc-4eaa-9ee2-61d1cf012b56",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f706ec-d802-44a6-8813-7f8d3396a101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", ()=> {\r",
                            "        pm.response.to.have.status(400);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5e9fad-3286-4361-befb-c87295cf1bc4",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559d0966-91c8-4abe-87c1-83b0912e8f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(401);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "115d1e12-21ae-421e-abdc-c9490963b307",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "GetOptInDetails"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "accountNumber",
                            "value": "162577"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5cf874-3b08-439f-8432-c9eaba24724f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", ()=> {\r",
                            "        pm.response.to.have.status(200);\r",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b6c7332f-ae5d-4cec-9b93-95c7582467b7",
                "name": "PysInsurance_UpdateInsuranceOptIn",
                "item": [
                  {
                    "id": "34d96272-96c5-4b5e-b84e-c17f9c46a2ea",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4430"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0789ada8-e1aa-4016-a502-fc1ddc53a574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c069b975-be2b-4fbc-a406-e3c50ae8f8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "53101046-f3a2-4a0c-b0a7-96d0c7e8e290",
                    "name": "Incorrect auth key test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4430"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261110a4-00a7-4580-8d65-6594cf55b1f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc20dd33-ef42-4115-bf52-63dc7be84963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b558f2f2-6462-4620-b1a4-b802beaaa921",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptIn"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4442"
                          },
                          {
                            "key": "accountNumber",
                            "value": "100001234"
                          },
                          {
                            "key": "sourceSystem",
                            "value": "Web"
                          },
                          {
                            "key": "status",
                            "value": "Submitted"
                          }
                        ],
                        "variable": []
                      },
                      "method": "PATCH"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35609734-6d6d-491c-8a83-9b9961c45097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d84fef-f469-463e-bf73-40512f9041d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(200);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8ce662a3-f3cb-4c7d-aae6-29e68e4f3abf",
                "name": "PysInsurance_DeleteInsuranceOptInRecord",
                "item": [
                  {
                    "id": "893e25c2-ec82-4abf-b29d-1d182602a458",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptInRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4444"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c23456-731f-4424-acab-e2cd0b5b3229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf7c9f3-ee0a-4676-b314-c0a253f38012",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "InsuranceOptInRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "pysInsuranceOptInId",
                            "value": "4444"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef649fea-7cb9-48ff-ad16-3c33e683cc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "48547cc8-1550-43ca-9ce5-40b35443c254",
                "name": "PysInsurance_DeleteAgedInsuranceOptInRecords",
                "item": [
                  {
                    "id": "933f6533-df2c-4edb-ad1c-9aecb4aafda9",
                    "name": "No auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThan",
                            "value": "365"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be1515c-2fe7-4667-9eda-063a3d1fa313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () =>{\r",
                            "     pm.response.to.have.status(400);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d26aca6-06cf-49aa-8627-344b2529f259",
                    "name": "Incorrect auth test",
                    "request": {
                      "url": {
                        "path": [
                          "AgedInsuranceOptinRecords"
                        ],
                        "host": [
                          "{{LGIA.Internal.Sonata.Helper.V2}}"
                        ],
                        "query": [
                          {
                            "key": "olderThan",
                            "value": "365"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "auth": {
                        "type": "apikey",
                        "apikey": [
                          {
                            "type": "string",
                            "value": "Basic",
                            "key": "value"
                          },
                          {
                            "type": "string",
                            "value": "Authorization",
                            "key": "key"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d24eca-e56c-4863-9c61-dd9545b5caf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect auth test\", () =>{\r",
                            "     pm.response.to.have.status(401);\r",
                            "})"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "type": "string",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "key": "value"
            },
            {
              "type": "string",
              "value": "Authorization",
              "key": "key"
            }
          ]
        },
        "event": []
      },
      {
        "id": "b346809a-700d-45b9-a1a8-20097ee6f3c8",
        "name": "LGIA.External.Tal.Helper",
        "item": [
          {
            "id": "2507a8b2-4542-437f-bff0-4d4c775dba08",
            "name": "TalClientInsurance",
            "item": [
              {
                "id": "380f5295-5447-43d7-8160-dc06a4361f09",
                "name": "No auth test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec1286e6-b2f6-4add-9e7e-23110cd0451d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No auth Test\", () => {\r",
                        "    pm.response.to.have.status(400);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "07baee9c-2cc1-46c6-bfad-e963f4e6e64b",
                "name": "Incorrect auth test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "apikey",
                    "apikey": [
                      {
                        "type": "string",
                        "value": "Basic",
                        "key": "value"
                      },
                      {
                        "type": "string",
                        "value": "Authorization",
                        "key": "key"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16462b72-1afa-494f-b075-54ad3929c23c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth Test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "9539017a-a879-4ea8-b9c5-f42239038918",
                "name": "Valid test",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "moltalexternal",
                      "GetClient"
                    ],
                    "host": [
                      "intg-mcro",
                      "internal",
                      "lgsuper",
                      "org"
                    ],
                    "query": [
                      {
                        "key": "clientId",
                        "value": "101004487"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c326921-810e-4357-b8d0-75f8e6faa6a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Valid Test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "})"
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "530c0851-feb7-45d7-b036-fdcb5b37bdd6",
        "name": "GetPmifDefInsuranceValuesAPI",
        "item": [
          {
            "id": "49c5143b-273d-4d46-852e-4673185d7883",
            "name": "DefaultInsurance",
            "item": [
              {
                "id": "8f695ca5-effd-4047-93af-4b5e3fbfbe2b",
                "name": "Blank clientId test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2319c6a5-866f-4e95-808f-c4d37d824cfc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd5500ec-4bd5-4cf7-b469-03ddbfe8c0ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank client Id test\", () => {\r",
                        "    pm.response.to.have.status(404);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "55b134d6-f65d-4e3e-9252-fe4510e00b53",
                "name": "Incorrect authentication test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac27999f-12db-4391-acbc-0042afbf9967",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "522c72f5-ba6b-492b-8c58-813b9345aa79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "24fe3920-c298-4dc4-a7f7-4fa012c50139",
                "name": "No roles test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "214a7be1-b69d-4831-b1bf-e8d08a73c0ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c4e97c7-f19d-450d-a4dd-025871ed56a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No roles test\", () => {\r",
                        "    pm.response.to.have.status(403);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "75296199-4a7c-477d-88ae-a16d1f7fc5f0",
                "name": "Locked User test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7df634d-94b5-4eb9-8817-30915f88ad1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d16a444-8504-40c4-b098-145ddab2fb89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "fe6f21b1-d2ae-43cb-80c8-140d56a4fec5",
                "name": "New Users test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "992f367b-6c11-415b-85b7-08b9592e3e21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28b9b98c-6287-4ef2-8d10-0f8c728c6840",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New Users test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "463a35e9-4a41-49d5-b983-daeeb7076c58",
                "name": "authenticated valid  test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{TestAutomation}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "TestAutomation",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7ec96ab-6388-4ade-b767-2083cf2de064",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId',101004749 );\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bfeb4af-33e6-4995-92ca-9941c049a2e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Authenticated user test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "bbb51d20-3397-495e-8805-1f392949bc2c",
                "name": "No account number test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38b2754c-c3fc-4708-a9ce-70e6f9dabd4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', 101004749);\r",
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d72db4ad-0c71-4e6d-8af5-7845dc27bc35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No account number test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "df5ee797-95a2-4dbf-a024-d9d2a52c6071",
                "name": "No auth Valid test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance",
                      "{{clientId}}",
                      "{accountNumber}"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "accountNumber",
                        "value": "{{accountNo}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbff4156-783d-4878-959c-8df61bb70658",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('clientId', 101004749);\r",
                        "pm.variables.set('accountNo', 100006032);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c628bff-5a09-44b1-a1ea-d25948beb499",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Valid test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "1d017ac7-75c5-4953-82d4-8fac74774fb3",
                "name": "New User test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d9dc6c0-cd14-4bae-b696-149c806ab9d0",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0828074-8795-4461-98cb-fcb81b177976",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "864c40be-cf1d-48b0-af05-ae46e70726fe",
                "name": "Incorrect auth test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "test",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "test",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b92f004-d158-4a18-bf69-bffb56b51e61",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "364f4740-79dc-42ca-91fe-02ba15032d5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect auth test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "55bb605d-1be5-4fd9-9e53-453a4bb4f888",
                "name": "No roles user test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cfc7728-e25e-4faf-ba5d-6f0d28a875f6",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e50bf146-8343-4ad3-8028-5e4863ee63d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No roles test\", () => {\r",
                        "    pm.response.to.have.status(403);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "40f2994d-b908-448b-bafd-7ee40265a9df",
                "name": "Locked user test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7e5a53c-48c7-48f4-a231-25201a85dbb4",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6bc3b4b-5ccf-4808-8284-614ef6be020d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked user test\", () => {\r",
                        "    pm.response.to.have.status(401);\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "03a8d1de-b81c-4c3a-a5f8-8e5e9ed54725",
                "name": "authenticated valid test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{TestAutomation}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "TestAutomation",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ddc22c1-d2a9-46b7-b9ef-416cf5fc72f8",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fed49fb4-c5e2-4fc7-8ec5-7e4aa1dd487e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Authenticated valid  test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "\r",
                        "    pm.expect(jsonData.data).length === 3;\r",
                        "    pm.expect(jsonData.data[0]) === pm.variables.get('clientIds1');\r",
                        "    pm.expect(jsonData.data[1]) === pm.variables.get('clientIds2');\r",
                        "    pm.expect(jsonData.data[2]) === pm.variables.get('clientIds3');\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "7e1a3e42-2fed-4e8c-b7e9-7a797d93fbf3",
                "name": "No auth Multiple clientIds test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08a7f7c3-6329-4595-9a2d-5247bbfdd802",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101005991);\r",
                        "pm.variables.set('clientIds3', 101008226);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d46f25e1-0be0-46de-b93c-ff22c5bd0c06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Multiple client Id test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.true;\r",
                        "\r",
                        "    pm.expect(jsonData.data).length === 3;\r",
                        "    pm.expect(jsonData.data[0]) === pm.variables.get('clientIds1');\r",
                        "    pm.expect(jsonData.data[1]) === pm.variables.get('clientIds2');\r",
                        "    pm.expect(jsonData.data[2]) === pm.variables.get('clientIds3');\r",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "77a759b0-86a9-454f-bbf9-00e12b8cc4d9",
                "name": "No auth Multiple clientIds with duplicate test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "DefaultInsurance"
                    ],
                    "host": [
                      "{{GetPmifDefaultInsuranceValues}}"
                    ],
                    "query": [
                      {
                        "key": "clientIds",
                        "value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
                      }
                    ],
                    "variable": []
                  },
                  "method": "POST",
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4acee22-b901-4ecc-af7f-4c0533da84fc",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.variables.set('clientIds1', 101004487);\r",
                        "pm.variables.set('clientIds2', 101004487);\r",
                        "pm.variables.set('clientIds3', 101004487);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "14a01744-287b-439d-bb7f-8fb0e97cb9ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Multiple client Id with duplicates test\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "    const jsonData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(jsonData.isSuccess).to.be.false;\r",
                        "\r",
                        "})"
                      ]
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      }
    ],
    "auth": {
      "type": "basic",
      "basic": [
        {
          "type": "string",
          "value": "{{TestAutomation}}",
          "key": "password"
        },
        {
          "type": "string",
          "value": "TestAutomation",
          "key": "username"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "e2316ee9-7bc4-40e5-9f74-b85ab7f9049c",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "847c2a37-4aa7-4a82-81d2-830e2dafc72d"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "3c0c3d76-3cb9-49fd-affa-eaa2974ad803",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "335604ba-59e1-4b33-bcd1-0b4649688917"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "2021-07-14T09:07:42+10:00",
        "key": "todayiso"
      },
      {
        "type": "any",
        "value": "2021-07-14",
        "key": "todaysDate"
      },
      {
        "type": "any",
        "value": "2021-07-24",
        "key": "futureDate"
      },
      {
        "type": "any",
        "value": "2021-07-15",
        "key": "now"
      },
      {
        "type": "any",
        "value": "no client id",
        "key": "action"
      }
    ],
    "info": {
      "_postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01",
      "name": "RegressionTests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2021-07-22T05:58:43.124Z",
      "postman_exported_using": "Postman/8.8.0"
    },
    "id": "00a98a20-0bb2-4b24-905e-a9cf2e1c1167",
    "name": "intg",
    "values": [
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/einsteinanalytics",
        "key": "einsteinanalyticsdata"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/fileconversion",
        "key": "fileconversion"
      },
      {
        "type": "any",
        "value": "TestLockedUser",
        "key": "LockedUser"
      },
      {
        "type": "any",
        "value": "shfq6-WNdzdnWseK",
        "key": "LockedPassword"
      },
      {
        "type": "any",
        "value": "TestNewUser",
        "key": "NewUser"
      },
      {
        "type": "any",
        "value": "btsWeW$zMmhJIjy",
        "key": "NewPassword"
      },
      {
        "type": "any",
        "value": "TestNoRolesUser",
        "key": "NoRolesUser"
      },
      {
        "type": "any",
        "value": "paKAxSI7FAoO52U",
        "key": "NoRolesPassword"
      },
      {
        "type": "any",
        "value": "UTy3VU",
        "key": "randomId"
      },
      {
        "type": "any",
        "value": "This is a new fund name for UTy3VU",
        "key": "FundName"
      },
      {
        "type": "any",
        "value": "00D1m0000008lFX!ARcAQDCdBUCN1z27ixKDs2.IVaT8TQtNqHa9PNE1HLyjsl8Xgx1Vd7apCciBpe517mK1gW.Tpsvb2kmSBlodoEnjn0p0YJKZ",
        "key": "SFToken"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/ccm",
        "key": "ccm"
      },
      {
        "type": "any",
        "value": "b-VBed!By7suveYBbaL",
        "key": "TestAutomation"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/swift",
        "key": "swift"
      },
      {
        "type": "any",
        "value": "VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA==",
        "key": "AuthKey"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/ringcentral",
        "key": "ringcentral"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/sonatahelper",
        "key": "LGIA.Internal.Sonata.Helper.V2"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/GetPmifDefaultInsuranceValues",
        "key": "GetPmifDefaultInsuranceValues"
      }
    ]
  },
  "globals": {
    "id": "e60f78a8-4663-488c-806f-7bd541c202a5",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 173.75,
      "responseMin": 41,
      "responseMax": 456,
      "responseSd": 167.20103917141185,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1627011353821,
      "completed": 1627011357285
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5bf2397f-d3b2-4c9a-bc95-f9e93071df04",
          "httpRequestId": "9d5066f0-cb1a-4b83-a044-3a4a2390487f"
        },
        "item": {
          "id": "236d297a-0854-4442-a0a4-fbf55de0f557",
          "name": "No auth test",
          "request": {
            "url": {
              "path": [
                "PMIFInsurance"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed69df30-e498-42b3-908c-6fef2145645b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No auth test\", ()=> {\r",
                  "        pm.response.to.have.status(400);\r",
                  "});"
                ],
                "_lastExecutionId": "e408f25a-0880-46f4-aa1a-cfc98601284a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "PMIFInsurance"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4bef7d34-d259-443a-bd79-23a2a35635ae",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "f4821ff9-2bd2-4bfe-9485-526b49900005",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:35:54 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 140,
          "responseSize": 0
        },
        "id": "236d297a-0854-4442-a0a4-fbf55de0f557",
        "assertions": [
          {
            "assertion": "No auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5efae10b-4fa3-40ad-953d-19b8d5c4401a",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "326d5298-95ed-4a3b-8160-e8d816771ed8"
        },
        "item": {
          "id": "5686ef4c-c5bf-493c-8151-481ade358d66",
          "name": "Incorrect auth test",
          "request": {
            "url": {
              "path": [
                "PMIFInsurance"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "Basic",
                  "key": "value"
                },
                {
                  "type": "string",
                  "value": "Authorization",
                  "key": "key"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dd1c5aa7-d968-4d16-a2e4-aa193b89b865",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Incorrect auth test\", ()=> {\r",
                  "        pm.response.to.have.status(401);\r",
                  "});"
                ],
                "_lastExecutionId": "cd53c6ce-bdc7-41ad-ae22-6dc493296d97"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "PMIFInsurance"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic",
              "system": true
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "037f9076-24b8-473b-a655-49a889e6db25",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "127",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "Basic",
                "key": "value"
              },
              {
                "type": "string",
                "value": "Authorization",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "88bf736b-17f4-4f96-9135-72ddffad1d67",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:35:54 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 41,
          "responseSize": 0
        },
        "id": "5686ef4c-c5bf-493c-8151-481ade358d66",
        "assertions": [
          {
            "assertion": "Incorrect auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e4fdb312-7704-435e-95b3-f67ff748e087",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d1fb0a0a-b8eb-477a-bd19-205c0b41f3c3",
          "scriptId": "887a09c3-06b6-4e08-90d8-7014982eed9c",
          "execution": "afbc0263-d1c8-42b6-a15f-a164a1c1dfaa"
        },
        "item": {
          "id": "d6c859e6-4bfe-4fe8-b9d3-4a094de0b5a4",
          "name": "Valid test",
          "request": {
            "url": {
              "path": [
                "PMIFInsurance"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "887a09c3-06b6-4e08-90d8-7014982eed9c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Valid test\", ()=> {\r",
                  "        pm.response.to.have.status(200);\r",
                  "\r",
                  "        const jsonData = pm.response.json();\r",
                  "        pm.expect(jsonData.Success).to.be.true;\r",
                  "        pm.expect(jsonData.Message).to.include(\"1 row inserted\");\r",
                  "});\r",
                  "\r",
                  "const deleteRequest = {\r",
                  "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                  "        method: 'DELETE',\r",
                  "        header: {\r",
                  "            'accept': 'text/plain',\r",
                  "            'content-Type': 'application/json',\r",
                  "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                  "        },\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                  "        pm.variables.set(\"optInId\", response.json().Id);\r",
                  "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                  "        \r",
                  "        });\r",
                  ""
                ],
                "_lastExecutionId": "afbc0263-d1c8-42b6-a15f-a164a1c1dfaa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "PMIFInsurance",
              "undefined"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "content-Type",
              "value": "application/json"
            },
            {
              "key": "authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5b24f834-9003-497b-ad8e-4bb270f2862f",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "a66ddd83-dc08-4095-8a39-dd1da7952c0a",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:35:56 GMT"
            },
            {
              "key": "Content-Length",
              "value": "37"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 58,
          "responseSize": 37
        },
        "id": "9d836692-a3e7-4e1e-8c99-25ed9d47f89c",
        "assertions": [
          {
            "assertion": "Valid test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e4fdb312-7704-435e-95b3-f67ff748e087",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d1fb0a0a-b8eb-477a-bd19-205c0b41f3c3",
          "scriptId": "887a09c3-06b6-4e08-90d8-7014982eed9c",
          "execution": "afbc0263-d1c8-42b6-a15f-a164a1c1dfaa"
        },
        "item": {
          "id": "d6c859e6-4bfe-4fe8-b9d3-4a094de0b5a4",
          "name": "Valid test",
          "request": {
            "url": {
              "path": [
                "PMIFInsurance"
              ],
              "host": [
                "{{LGIA.Internal.Sonata.Helper.V2}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "887a09c3-06b6-4e08-90d8-7014982eed9c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Valid test\", ()=> {\r",
                  "        pm.response.to.have.status(200);\r",
                  "\r",
                  "        const jsonData = pm.response.json();\r",
                  "        pm.expect(jsonData.Success).to.be.true;\r",
                  "        pm.expect(jsonData.Message).to.include(\"1 row inserted\");\r",
                  "});\r",
                  "\r",
                  "const deleteRequest = {\r",
                  "        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
                  "        method: 'DELETE',\r",
                  "        header: {\r",
                  "            'accept': 'text/plain',\r",
                  "            'content-Type': 'application/json',\r",
                  "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='\r",
                  "        },\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(deleteRequest, (error, response) => {\r",
                  "        pm.variables.set(\"optInId\", response.json().Id);\r",
                  "        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
                  "        \r",
                  "        });\r",
                  ""
                ],
                "_lastExecutionId": "afbc0263-d1c8-42b6-a15f-a164a1c1dfaa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "sonatahelper",
              "PMIFInsurance",
              "undefined"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "content-Type",
              "value": "application/json"
            },
            {
              "key": "authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5b24f834-9003-497b-ad8e-4bb270f2862f",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "a66ddd83-dc08-4095-8a39-dd1da7952c0a",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-AspNet-Version",
              "value": "4.0.30319"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Fri, 23 Jul 2021 03:35:56 GMT"
            },
            {
              "key": "Content-Length",
              "value": "37"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 58,
          "responseSize": 37
        },
        "id": "9d836692-a3e7-4e1e-8c99-25ed9d47f89c",
        "assertions": [
          {
            "assertion": "Valid test",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 90
    },
    "failures": [],
    "error": null
  },
  "consoleLogs": {
    "e4fdb312-7704-435e-95b3-f67ff748e087": [
      {
        "cursor": {
          "ref": "e4fdb312-7704-435e-95b3-f67ff748e087",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c7402764-4a8e-45f3-9c9c-f9e834fab0cc",
          "scriptId": "887a09c3-06b6-4e08-90d8-7014982eed9c",
          "execution": "afbc0263-d1c8-42b6-a15f-a164a1c1dfaa"
        },
        "level": "log",
        "messages": [
          "Created insurance record deleted after test",
          {
            "Message": "The request is invalid."
          }
        ]
      }
    ]
  }
}