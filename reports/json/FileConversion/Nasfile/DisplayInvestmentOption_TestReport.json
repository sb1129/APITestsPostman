{
  "collection": {
    "_": {
      "postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01"
    },
    "item": [
      {
        "id": "81b1afa1-ad64-4859-8538-1327cf999cd2",
        "name": "CCM",
        "item": [
          {
            "_": {
              "postman_isSubFolder": true
            },
            "id": "851a5486-418a-466e-9f53-cb335b489736",
            "name": "SwiftEvents",
            "item": [
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "e7de7aac-6b03-42b3-8672-3641086bedc6",
                "name": "PullDataFromCsvFiles",
                "item": [
                  {
                    "id": "d5ce03c1-55ea-4602-b4e3-0f21bfabd6e1",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b86d8c6-6ea2-4e72-b8cd-a119f0a46132",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d5fe3a-82f8-4aea-8789-949dc76ce9f2",
                    "name": "Username and Pasword incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8df114-c56a-41fb-9d5d-0b70e557c87e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a74e9b5-eb90-4f23-b190-38972737917d",
                    "name": "Username and Pasword locked ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8df114-c56a-41fb-9d5d-0b70e557c87e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Account Locked\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "589260ea-c376-49d5-b51d-fc8924f6967e",
                    "name": "Username and Pasword new account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8df114-c56a-41fb-9d5d-0b70e557c87e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55eb405-6853-4135-a36d-813a19f016ae",
                    "name": "Username and Pasword insufficient privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8df114-c56a-41fb-9d5d-0b70e557c87e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "84fedffb-4b22-4fcd-80c7-73b1cf5db178",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8df114-c56a-41fb-9d5d-0b70e557c87e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('PullDataFromCsvFiles[SUCCESS]');",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "4d6e28c3-8237-4edc-9d74-714434fed488",
                "name": "SyncSwiftEventsToSfCampaigns",
                "item": [
                  {
                    "id": "d6df7bf8-94f3-4a52-b88f-94c56466e902",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eed9e90-365f-4043-b6f0-4b03b86bda44",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18c1451-cb4e-411d-9f20-a82ee4c48272",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9095b3-567e-43da-bb3a-d7befac64ab1",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b849cbb-23ef-44b0-8d37-c8c419c1cdbe",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f7ab15-1ae4-4002-a715-4e3cae5b3905",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncSwiftEventsToSfCampaigns[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "90a056ea-9fd0-45c4-a0d1-e3d9223d7567",
                "name": "SyncOpportunitiesOrLeads",
                "item": [
                  {
                    "id": "278c97bc-e00b-4d2e-abb3-20e5c9634e65",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb61e8e1-7f2d-4399-b524-e9b0831a8274",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a81439-82df-42a0-b0e9-869929596909",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "29adb78b-6c9a-439e-bad8-a65d4d9eb872",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3091ca-4c4f-4c89-85ec-2033e5ce7a5b",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "def2308e-df46-4b43-843a-ffb78b7abde2",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncOpportunitiesOrLeads[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d193a0d0-8271-486a-8c4e-3e2dd0c243b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87999d85-669a-4b55-a1b8-da367666d2fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "64e1c829-27a2-4023-bc20-bfe5e9dcd6a3",
                "name": "SyncRegistrantStatuses",
                "item": [
                  {
                    "id": "b5adbb4b-cb70-4c29-bb74-8f18c63bc307",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4f2614-feb7-42c8-b1a9-dda154452fb2",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "685d82b2-ee1d-49f1-a48c-9aea8da7de3c",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6596f1d-a780-4bee-bfff-52d53a4ae12c",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "143928f8-ca5e-4881-9eb5-fdc4442abf1b",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "338cadcb-ac63-457f-8a54-6bfd16f092d4",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncRegistrantStatuses[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "474b91d7-8fcc-4b9f-84a1-034a0d0b3b4b",
                "name": "AddConfirmationInteractions",
                "item": [
                  {
                    "id": "8c46b73c-a1d4-4399-a3c9-97e957660529",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8ccd81-26f1-4b84-a879-09f055202f58",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "88fe47c6-6a8c-4039-91f4-0214fb051e46",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c086ef-045f-4a02-bfab-2f44557cfd01",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fec648-126a-4f8f-8592-84ed5aaa1466",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "955c2760-e305-4d03-81b0-b723b5788532",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "protocolProfileBehavior": {}
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c739edba-146e-46e1-9f96-9cf38f583a4c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cb60f76c-d25d-4e7b-9a1f-02775075a459",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "protocolProfileBehavior": {}
          },
          {
            "_": {
              "postman_isSubFolder": true
            },
            "id": "8f271347-bca9-4936-bd27-1b47966e7834",
            "name": "Corresspondence",
            "item": [
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "147b603e-585e-43ac-9cf2-d45a38516634",
                "name": "SyncInteractionsFromEngageOne",
                "item": [
                  {
                    "id": "b3bd97ee-a687-448e-9485-91502cf6db3f",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2a11df-7acd-4a6b-b4f3-92341724d5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc7f0d0-9aa8-43a9-8a26-93ee6c925871",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20ca366-238d-4dbd-b4dc-9e1f9ad00040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1e41fb-f3df-4dfa-af99-e89e2edef1ce",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a55106-6b68-41f0-ab98-bbc15ca47bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba1d4bf-2b51-43de-8529-96c713b45eef",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c58189d-7865-44b6-b641-bc665737b3fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No roles assigned user Test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b58e7c-9dec-4153-a0b1-d85611bea5dc",
                    "name": "No Body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e31787-e67f-47fc-8796-9336a7c94b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Body Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"A non-empty request body is required.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72e9996-b68b-4bf3-9db0-5def7e905069",
                    "name": "Blank date",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\":\"\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38322c37-a4e7-42bc-ad17-aaaa603b9807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Blank date Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"String '' was not recognized as a valid DateTime.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "47682a12-6810-4b43-ad34-6877ab40e2bf",
                    "name": "Date not found",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1a518c-a240-476c-84dc-c3e40d911ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "781a64e9-c09e-46de-be90-6363a0a863c9",
                    "name": "Invalid file format",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae16395-7757-4841-ae46-8144358a34eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "string",
                      "value": "{{bshree}}",
                      "key": "password"
                    },
                    {
                      "type": "string",
                      "value": "bshree",
                      "key": "username"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94b88229-218b-473b-a5ea-10c03f31d8ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4b4fa58-ef6d-40af-baee-c16e6e9a6e8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4c3bae07-edeb-4853-be62-eebc8250c55f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b1fe0628-9d8e-4f23-8a93-70770274ef14",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "protocolProfileBehavior": {}
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{bshree}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "bshree",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a42f94e4-18c6-44ee-a780-d0578a057482",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c89b425f-0052-44ef-a232-c5ce2b236116",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ],
        "protocolProfileBehavior": {}
      },
      {
        "id": "483021b2-06e8-4509-a9e2-f41c340d3a48",
        "name": "EinsteinAnalyticsData",
        "item": [
          {
            "_": {
              "postman_isSubFolder": true
            },
            "id": "e45d649b-9205-404c-8d65-bfe403f6f380",
            "name": "Einstein",
            "item": [
              {
                "id": "7f137100-878a-492d-9552-612087fdf4c1",
                "name": "No auth test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "",
                        "pm.test(\"No auth test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84466f33-36dd-49ea-9ba2-bdafd57c1b48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "e6943438-48c9-46ad-bb44-9f2ef43d2146",
                "name": "Blank stored proc test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "const jsonData = pm.response.json();",
                        "",
                        "pm.test(\"Blank stored proc test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                        "});"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "edc3f296-765c-4ed7-a864-e9934de928d0",
                "name": "Invalid stored proc test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[usptionSFMemberAnalyticsFlat]\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "const jsonData = pm.response.json();",
                        "",
                        "pm.test(\"Invalid stored proc test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.messages[0]).to.equal(\"Could not find stored procedure 'wrk.usptionSFMemberAnalyticsFlat'. [wrk].[usptionSFMemberAnalyticsFlat]\");",
                        "});"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "c66fb801-88a9-458f-aa6f-4ce8f2c3a682",
                "name": "Unauthorised access test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "",
                        "pm.test(\"Unauthorised access test\", () => {",
                        "    pm.response.to.have.status(403);",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84466f33-36dd-49ea-9ba2-bdafd57c1b48",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "pm.environment.set(\"username\", \"shree\");",
                        "pm.environment.set(\"password\", \"shree\");"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "05cc5b2e-20c3-4137-ad84-d876b0a6e73c",
                "name": "Blank body test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n\t\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "const jsonData = pm.response.json();",
                        "",
                        "pm.test(\"Blank body test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                        "});"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "82c34f1c-82b8-4e83-b3f1-c63df53598aa",
                "name": "Another valid stored proc test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAccountTransaction]\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "const jsonData = pm.response.json();",
                        "",
                        "pm.test(\"Another valid stored proc test\", () => {",
                        "    pm.response.to.have.status(500);",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.messages[0]).to.equal(\"Procedure or function 'uspIntegrationSFMemberAccountTransaction' expects parameter '@startDate', which was not supplied.\");",
                        "});"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "0c2c15d6-e431-4881-bd4d-da987d6150e2",
                "name": "Valid ExecuteSPEDWHerokuMembers test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAnalyticsFlat]\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "const jsonData = pm.response.json();",
                        "",
                        "pm.test(\"Valid ExecuteSPEDWHerokuMembers request\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "});"
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bac567c6-000d-48cf-b9a6-247aeaaacf3a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9a3badf1-a6d6-4475-ae71-a48e63014570",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "protocolProfileBehavior": {}
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{bshree}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "bshree",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a39bae8c-50ff-486f-97d8-0bc3c849633c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07a20f7f-f477-4935-828b-d30f5d0f8bce",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ],
        "protocolProfileBehavior": {}
      },
      {
        "id": "491168ae-5553-458b-af9c-643e43787553",
        "name": "FileConversion",
        "item": [
          {
            "_": {
              "postman_isSubFolder": true
            },
            "id": "8928bdd3-66a3-45df-bb74-70225fe08400",
            "name": "NasFile",
            "item": [
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "7a383e32-ad3a-4a5e-accb-a4e03463dd5d",
                "name": "ListInFile",
                "item": [
                  {
                    "id": "572d592e-ebdb-4b52-93cb-18a86bb5f293",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"shree\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd56bcd4-b5f9-45e9-9d49-38722aac7751",
                    "name": "Username and Password not provided ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "56206515-6041-45df-88b9-055c92394c4e",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba45052f-da23-4dbe-807a-e5c3bde9053c",
                    "name": "valid list in files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "",
                        "options": {
                          "raw": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb3de75-2698-4923-abce-6d28d0171f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\in\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName+ \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2d41a0-3f08-4d0e-af3d-19184c817637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "b917ae44-0918-4697-b889-4f9a4c260736",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c78220-1e7d-41a4-b8e1-0013fe694eda",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "519b042c-60c0-4f92-9290-ec73e77f674f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d35db42c-cdcb-4a5e-98cc-33e60e119ebe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "f0952889-9273-4d6b-95d4-4a508f855e59",
                "name": "ListOutFiles",
                "item": [
                  {
                    "id": "3583677d-3472-4806-bb7c-f5f4508ac088",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0be714-3fb4-45d5-a07b-c970caeca1db",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd1ac13-88f0-4320-9512-46a54eea8e29",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d447c5b0-548c-4019-96f0-0c1be0aec764",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"shree\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e8017d-7833-4a55-ba8c-7115de5f2d8b",
                    "name": "Username and Password not provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8328fd-7af1-41c7-b9cc-537ccba683d0",
                    "name": "valid list out files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFIles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "",
                        "options": {
                          "raw": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277f597c-6ee2-47ec-bc93-0cda16dbbd05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a537bc-f9f6-4579-9175-87dde8a656ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list OUT files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\nas_staging\\\\out_staging\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66a8236c-a43b-418d-94c8-3758585f7704",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4598a5a-6228-44da-9506-9e7ce396eee8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "b6ea808a-24c1-4494-a907-50a77b8ffcf1",
                "name": "AddInvestmentOption",
                "item": [
                  {
                    "id": "cfcbaabb-49c1-43cb-ad49-26fe38e78c6a",
                    "name": "Only Fund Name is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundName\": \"ABCD\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Fund Name is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "296f132c-c2f7-45f8-a29d-ef028f81f236",
                    "name": " Only Nas Fund Id is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"nasFundId\": \"QL81\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Nas Fund Id is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e1fdfa-0c58-42df-836a-3a68d65f4c9a",
                    "name": "Only Fund ID provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"fundId\": \"QL81C1\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When only Fund ID provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Name should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c82aab-dbe5-4bd2-a553-96953c4f22dc",
                    "name": "Duplicate Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL82C1\",\r\n  \"fundName\": \"New CITY DB OPRTIONAL RISK RESRVE\",\r\n  \"nasFundId\": \"QL81C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Nas Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a782d288-7c7c-4918-93fc-ccebb26f5a94",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "user",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "user",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be5318a-6b15-4740-963d-a16682c5c56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f7f9e8-5a5d-4fcb-8cd9-737b81137f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Username and Password test\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5cbcf5-67ec-47e2-a3ca-25840ac61c55",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f15d5e7-9f25-443b-b385-6d25d246d8aa",
                    "name": "Invalid characters in Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"@#@{{randomId}}@#@#\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "516f449d-9608-4d65-9f28-ea56e7d951bd",
                    "name": "Duplicate Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"QL81\",\r\n  \"excludeFromUPFile\":false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efbaf80-5f5a-4c38-9806-548a9b13e5f7",
                    "name": "User with no access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be5318a-6b15-4740-963d-a16682c5c56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f7f9e8-5a5d-4fcb-8cd9-737b81137f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"User with no access\", ()=>{",
                            "    pm.response.to.have.status(403);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "64eb61a3-cf84-435e-bade-f00674490ece",
                    "name": "User locked",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be5318a-6b15-4740-963d-a16682c5c56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f7f9e8-5a5d-4fcb-8cd9-737b81137f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked user\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f3827b-fec0-4cfc-b762-6955d972f441",
                    "name": "Invalid characters in Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"$@#${{FundName}}#$#$#\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund Name test\", () => {",
                            "   console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        ",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7469ae7-69d4-46cd-80c8-8712c52ff7c7",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be5318a-6b15-4740-963d-a16682c5c56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f7f9e8-5a5d-4fcb-8cd9-737b81137f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f74b52-7d6c-4583-ae98-fffa8a088a6e",
                    "name": "Empty Request body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty Request body test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd711d5b-1560-4ced-89b9-514547891a29",
                    "name": "Empty input fields",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"\",\r\n  \"fundName\": \"\",\r\n  \"nasFundId\": \"\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty input fields test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "335d2b46-b75e-42ea-b76d-725ea21c5c40",
                    "name": "Invalid characters in Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"%%{{randomId}}#$\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c55f4a-2f5a-470b-be1b-2ee1b328c28b",
                    "name": "Valid all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All valid parameters test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d185e2-0844-437a-baac-23214759f114",
                    "name": "Duplicate all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"LG AGGRESSIVE ACCUM OPTION\",\r\n  \"nasFundId\": \"LG18C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All parameters Duplicate test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    ",
                            "    pm.expect(jsonData.response[0]).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Correct message validated: \" + jsonData.response[0]);",
                            "    ",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Test completed\");",
                            "",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f4a266-9ae4-4c32-947e-7511e20e7aab",
                    "name": "Duplciate Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n   \"excludeFromUpFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "  ",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf979d09-feed-48e0-849e-fc3b31b91d19",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a7d2c2d-0bc3-4518-a596-ddb972782385",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "4cf59b8f-ab11-4ab6-bf80-4be5ca9f13d5",
                "name": "DisplayInvestmentOption",
                "item": [
                  {
                    "id": "fadb7082-dd1a-4f66-b664-fba747f2ceec",
                    "name": "End  to end test - exclude from up file true",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(true)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ],
                          "_lastExecutionId": "56af03bf-109d-4fea-a219-412edec21f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a27690a-c636-46c6-925b-065ee8e1ab4c",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: true",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca0267e-8a76-4cd8-9b19-cbe3cb58dc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3175a24c-a715-4f95-9533-1b42182e7da6",
                    "name": "Valid  FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Nas Fund Id displayed is: \" + jsonData.response.investmentOptions[0].nasFundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ],
                          "_lastExecutionId": "1cc765ac-6bb8-4f48-b4d4-1c68627af4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886517aa-0172-4b50-98e4-9396e05096de",
                    "name": "Valid NasFundID and FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundId",
                            "value": "LGGBCY"
                          },
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundId\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundId\")) + \" matched.\");",
                            "    }",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ],
                          "_lastExecutionId": "1b07daa7-ee77-4050-87cd-2d8952d8ff26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe94189-d3a6-43ca-89c7-5b2ac720c6aa",
                    "name": "Non-existing FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ],
                          "_lastExecutionId": "a981d903-b524-4b71-b0cf-5dff15db28d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92289de-7ec9-42ce-9df3-aaf647182efc",
                    "name": "User with No Roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "",
                            "});"
                          ],
                          "_lastExecutionId": "3351c102-efce-40fe-aa8b-f4cb402faa82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163174b8-b288-46fa-8cff-046c707fe1f4",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ],
                          "_lastExecutionId": "f1b24028-cea4-48fd-8149-923d48c6308c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec2855d-3828-4a81-ae21-497eea1acff4",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "GBCYC1"
                          },
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ],
                          "_lastExecutionId": "f851d532-df96-4ba6-b204-a1931ec204aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453fab36-53af-4968-8fb6-5085e1917cf6",
                    "name": "Incorrect username and password ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "incorrecty",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "incorrect",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ],
                          "_lastExecutionId": "55fa34d6-3bd4-41ed-b044-a7c8ca29b066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aeccf59-ebf3-4ab6-a7e5-29eed5b4045e",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ],
                          "_lastExecutionId": "a92eb62e-7c69-4dfc-9272-7faf782feca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4515832f-61d6-4328-989e-675eae041f3e",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ],
                          "_lastExecutionId": "c8b5aafe-7fa5-4822-acb2-386447a5a11b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad3c648-da6a-4a6b-a31d-d46da10b44ca",
                    "name": "End  to end test - exclude from up file false",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ],
                          "_lastExecutionId": "fd2e9ba7-5d45-46f1-9164-c5c4a921adca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a27690a-c636-46c6-925b-065ee8e1ab4c",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: false",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de798734-8228-4b0e-8f05-c83af4ee6b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d63939-b835-47a3-9976-035cf13d975d",
                    "name": "Blank Parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const length = pm.response.json().response.investmentOptions.length;",
                            "    console.log(\"No of Investments options records:\" + length);",
                            "});"
                          ],
                          "_lastExecutionId": "63e6a818-4b74-4cc1-b3be-48eb08afc67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a965849f-ebbb-42dc-998b-6c508ea167db",
                    "name": "Non-existing NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ],
                          "_lastExecutionId": "fd20ec09-7be1-4e55-a948-e94230506dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0652bb42-b005-4100-a029-9b4685766735",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ],
                          "_lastExecutionId": "518fc836-713d-400c-936a-c753e464970a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ac9bf7-067e-4753-898b-e776a370284f",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ],
                          "_lastExecutionId": "225cb9ff-fab5-4e39-8044-5df40bdbedc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f54253-deaa-48f0-a55a-6800f35f61d6",
                    "name": "Valid  NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "LGGBCY"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ],
                          "_lastExecutionId": "10ed7f31-35ad-4ec5-99f8-8619639dcadc"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a04eaaf5-3571-4ae3-9221-5f2df0ce2147",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ],
                      "_lastExecutionId": "c8b2271d-efd3-42ce-a914-abf29b242889"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3929f0d9-b10a-4f14-9160-c880bbd3dfe7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3be04ff-8063-45dd-aff5-617e47d2b8ab"
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "52ac08e0-d8e1-4698-8fbe-54600856700c",
                "name": "RemoveInvestmentOption",
                "item": [
                  {
                    "id": "38c9b48c-cb80-4ae0-b3d0-ec8a67509270",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf79eb85-67fa-4714-ac2b-bb5b630ca9f9",
                    "name": "Incorrect username and password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41372ca-e11a-456a-9ab8-93603017cc7b",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e97f65c-5ec8-42b5-af52-f61f186c962f",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ecfdc38-2ae8-443e-b960-eb63692d85aa",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d733564f-0231-4d97-838d-2bd422cb9ae6",
                    "name": "Blank parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": null
                          },
                          {
                            "key": "nasFundID",
                            "value": null
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response[0]).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "    pm.expect(jsonData.response[1]).to.include(\"FundId should be provided if NasFundId is empty\");",
                            "    pm.expect(jsonData.response[2]).to.include(\"NasFundId should be provided if FundId is empty\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d11225c-b93f-4ed5-84d8-09ef7f5a6baf",
                    "name": "Non-existing FundID ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "65227342-aafb-46bb-8fa9-aae80c4b5a04",
                    "name": "Non-existing Nas FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfcbde46-8514-473d-af1b-f63f67d8539a",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "26add7c2-66ab-4473-be77-4c7fa0e4b725",
                    "name": "Valid FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId =  successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "67fed32b-9ad6-4710-a0bb-fd5502134269",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d284de2-2937-4b44-a478-2f831409e33d",
                    "name": "Valid FundId and NasFundId",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a93cbb-d681-4fd4-8265-651d450dd2ac",
                    "name": "Valid NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = , nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8661b96-b1b0-43dd-ab1e-c3eacfa75d36",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61ee8ffa-a86a-4daf-96b6-dda09b15e0e6",
                      "type": "text/javascript",
                      "exec": [
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbbcbae3-5464-4f11-a539-556a90895730",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              }
            ],
            "event": [],
            "protocolProfileBehavior": {}
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{bshree}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "bshree",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed5b4cf4-de8d-4ab0-b563-ee6d13a9bff9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ce56c0a-84c6-466c-aa5f-674b6d1f659c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "131d9765-4c1d-4521-a66d-38eb1755e8eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "613cd357-0102-4a89-9b96-187b2670166d"
            }
          }
        ],
        "protocolProfileBehavior": {}
      },
      {
        "id": "dbe68d46-4f35-4394-8334-9be76e4fe94b",
        "name": "Swift",
        "item": [
          {
            "_": {
              "postman_isSubFolder": true
            },
            "id": "00477fd0-0e91-4a6c-b585-8aeff8798187",
            "name": "SwiftFolderConfiguration",
            "item": [
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "ed937ebd-7aec-4b88-918b-95dcf7c21a35",
                "name": "Addfolder",
                "item": [
                  {
                    "id": "4ecf1026-0dd2-4820-bd5a-b2e8d7778b77",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "142a601b-d898-488d-8ae9-e464c69c83b6",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "96f30b35-3862-43b6-889d-147ca3d2bfd4",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "4a6b9237-ba0e-45e3-b685-6c71b6b8e397",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "02c79a87-2717-433f-9eb3-18a26f902717",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5278e2c4-296c-4db1-965c-4a5deffa3e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(405);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": [],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "42c2b3f3-13c6-4898-87d0-bac7745e488a",
                "name": "Listfolders",
                "item": [
                  {
                    "id": "806feedc-31d9-432a-ae88-c4ea2985aaee",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0279f7d-69a6-404c-a2c2-c72b49cbb8d7",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "782cb81a-0cc5-4137-b991-7851a1bd9047",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d0eb07-3dae-4207-846f-b4e0aff50b9b",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18aad0f-2ebb-4dc8-8286-c17ba74afe1d",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5278e2c4-296c-4db1-965c-4a5deffa3e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "206fa56e-68d5-4067-bfe1-0b092f94cc8c",
                    "name": "Valid list",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    ",
                            "    const numberOfRecords = jsonData.response.swiftFolderConfigurations.length;",
                            "    ",
                            "    console.log(\"Number of Records:\", numberOfRecords);",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "protocolProfileBehavior": {}
              }
            ],
            "event": [],
            "protocolProfileBehavior": {}
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{bshree}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "bshree",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fde1ab87-9239-4b9b-9e48-a06517cdb080",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b4ac04d-6d72-47a8-a692-5dfd25f4714b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ],
        "protocolProfileBehavior": {}
      },
      {
        "id": "91fd4b61-5236-4520-b606-2526e51e2a0a",
        "name": "RingCentral",
        "item": [
          {
            "_": {
              "postman_isSubFolder": true
            },
            "id": "bfbc3bd2-955f-4586-9b98-189c85bfe5ff",
            "name": "SyncCompanyCallLogs",
            "item": [
              {
                "id": "aaafad9f-daf2-4742-99a5-34ba9a9a4711",
                "name": "Date time exact value with time zone ",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-07-12T14:10:26.2410000+10:00\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Date time exact value with time zone Test \", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "45ee5b41-dcf9-4bcb-8bc7-f34393160aa4",
                "name": "Delta sync",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Delta sync Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + pm.collectionVariables.get(\"todaysDate\") +\"T00:00:00.0000000\");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "7e55632e-004a-490a-92df-039ae905d024",
                "name": "No auth",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50e1913f-81f4-47bb-9c35-af3c9ea3ade8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No Auth test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "c88d6961-8571-4178-b99e-3d9dad4bb6f6",
                "name": "Incorrect account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "shree",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "shree",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3ef6003-d25d-483f-8794-e2bc03215f0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "45d2676e-10a1-4260-ac0a-b8f76da221fc",
                "name": "Hours ago",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Hours ago Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "060653ea-34a8-4866-a5eb-78396079b4b9",
                "name": "Locked account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd7344c6-8545-4ee3-9463-69ea597b61f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "21b66e94-e5c6-4931-a9c7-5094e6262e8e",
                "name": "New account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c31dfbef-93f3-4024-8db3-7d9b4ad0ce81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "7480aa62-5cc1-4551-aa4d-55d1ce5ee952",
                "name": "Sync all logs",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Sync All logs Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "37f7be21-8552-415b-970b-c803925f05de",
                "name": "No access account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No access account test\", () => {",
                        "    pm.response.to.have.status(403);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "5bc62366-20c9-4f13-bfa6-8e6fc0c635fd",
                "name": "Blank body",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank body test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"A non-empty request body is required.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "987effe2-3f52-42e7-8e38-141dc823214b",
                "name": "Negative pagelimit",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": -100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"negative page limit Test\", () => {",
                        "    pm.response.to.have.status(500);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"An unknown error occurred. Please contact support with the trace identifier included in this response\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.not.be.empty;",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "734e1c49-84a4-4536-9c3d-42629b37729a",
                "name": "Blank date from",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank date field test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 16.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "503106e9-f23f-4ef6-a2a3-fe089265b154",
                "name": "Blank date hour",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": ,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank hours test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"',' is an invalid start of a value. Path: $.hours | LineNumber: 2 | BytePositionInLine: 11.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "aa8782c4-5175-4d0c-a009-245fbfde2d8a",
                "name": "Negative hours",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": -24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Negative Hours Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "   const requestBody  = JSON.parse(pm.request.body);",
                        "   const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "dc12e2fd-66a5-481c-a7ac-41f60971951c",
                "name": "Blank date pagesize",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": \r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank pagesize field Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"'}' is an invalid start of a value. Path: $.pageSize | LineNumber: 4 | BytePositionInLine: 0.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "112c2845-6706-4dfd-88c0-c0a1282549fb",
                "name": "Invalid Date From",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"12-07-2021\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Invalid Date from Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 26.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b3c06c5-cd6c-45e0-ae2a-abb71ba41426",
                  "type": "text/javascript",
                  "exec": [
                    "const moment = require('moment');",
                    "pm.collectionVariables.set(\"todaysDate\", moment().format(\"YYYY-MM-DD\"));",
                    "",
                    "pm.collectionVariables.set(\"todayiso\", moment().format(\"YYYY-MM-DDTHH:MM:SSZ\"));"
                  ]
                }
              }
            ],
            "protocolProfileBehavior": {}
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{bshree}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "bshree",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bda65e00-097d-49ad-a712-96cb0f3b5214",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdcea0bb-4de7-4e8f-b1a8-e6329a19ac69",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ],
        "protocolProfileBehavior": {}
      }
    ],
    "auth": {
      "type": "basic",
      "basic": [
        {
          "type": "string",
          "value": "{{bshree}}",
          "key": "password"
        },
        {
          "type": "string",
          "value": "bshree",
          "key": "username"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "4469c3af-cec7-492c-b64c-b8d2d5485b74",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "1f416074-eda4-48a2-958a-00e3f60ecb71"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "93221e99-43be-4e2a-96a1-b92ab86ab911",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "87dc99e6-2dc0-4c1b-922d-b57e87fbd0de"
        }
      }
    ],
    "protocolProfileBehavior": {},
    "variable": [
      {
        "id": "8e0a1cba-ddd0-4bf6-aaec-1a14514584da",
        "type": "string",
        "value": "2021-07-14T09:07:42+10:00",
        "key": "todayiso"
      },
      {
        "id": "eea3f58e-b45a-46ef-b65f-5e300ddb6466",
        "type": "string",
        "value": "2021-07-14",
        "key": "todaysDate"
      },
      {
        "id": "2db97d47-33a4-4246-b3f4-77139bda046c",
        "type": "string",
        "value": "2021-07-24",
        "key": "futureDate"
      }
    ],
    "info": {
      "_postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01",
      "name": "RegressionTests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2021-07-13T23:29:46.198Z",
      "postman_exported_using": "Postman/7.18.1"
    },
    "id": "00a98a20-0bb2-4b24-905e-a9cf2e1c1167",
    "name": "intg",
    "values": [
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/einsteinanalytics",
        "key": "einsteinanalyticsdata"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/fileconversion",
        "key": "fileconversion"
      },
      {
        "type": "any",
        "value": "shree",
        "key": "username"
      },
      {
        "type": "any",
        "value": "incorrect",
        "key": "password"
      },
      {
        "type": "any",
        "value": "TestLockedUser",
        "key": "LockedUser"
      },
      {
        "type": "any",
        "value": "shfq6-WNdzdnWseK",
        "key": "LockedPassword"
      },
      {
        "type": "any",
        "value": "TestNewUser",
        "key": "NewUser"
      },
      {
        "type": "any",
        "value": "btsWeW$zMmhJIjy",
        "key": "NewPassword"
      },
      {
        "type": "any",
        "value": "TestNoRolesUser",
        "key": "NoRolesUser"
      },
      {
        "type": "any",
        "value": "paKAxSI7FAoO52U",
        "key": "NoRolesPassword"
      },
      {
        "type": "any",
        "value": "idCqwb",
        "key": "randomId"
      },
      {
        "type": "any",
        "value": "This is a new fund name for idCqwb",
        "key": "FundName"
      },
      {
        "type": "any",
        "value": "00D1m0000008lFX!ARcAQDCdBUCN1z27ixKDs2.IVaT8TQtNqHa9PNE1HLyjsl8Xgx1Vd7apCciBpe517mK1gW.Tpsvb2kmSBlodoEnjn0p0YJKZ",
        "key": "SFToken"
      },
      {
        "type": "any",
        "value": "https://dv-mcro02.internal.lgsuper.org/ccm",
        "key": "ccm"
      },
      {
        "type": "any",
        "value": "ehUs$9697fWC-JyL!K",
        "key": "bshree"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/swift",
        "key": "swift"
      },
      {
        "type": "any",
        "value": "YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
        "key": "AuthKey"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/ringcentral",
        "key": "ringcentral"
      }
    ]
  },
  "globals": {
    "id": "fafc0be8-a78e-461b-a527-9a6176e4232b",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 114,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 64,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 50,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 30.2,
      "responseMin": 13,
      "responseMax": 112,
      "responseSd": 27.487451682540524,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1626225339460,
      "completed": 1626225342742
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 16,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cf298eb7-b332-44d8-b66b-8d980a9c90c7",
          "httpRequestId": "a4b64f8a-66b5-4eed-930b-44244f52c1e1",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "56af03bf-109d-4fea-a219-412edec21f26"
        },
        "item": {
          "id": "fadb7082-dd1a-4f66-b664-fba747f2ceec",
          "name": "End  to end test - exclude from up file true",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "nasFundID",
                  "value": "{{randomId}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Display Investment options - End to End Test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.be.null;",
                  "    ",
                  "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                  "    {",
                  "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                  "    }",
                  "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(true)) ",
                  "    {",
                  "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                  "    }",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                  "    ",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "   //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "56af03bf-109d-4fea-a219-412edec21f26"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2a27690a-c636-46c6-925b-065ee8e1ab4c",
                "type": "text/javascript",
                "exec": [
                  "const postRequest = {",
                  "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                  "        method: 'POST',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'content-Type': 'application/json',",
                  "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        },",
                  "        body: {",
                  "            mode: 'application/json',",
                  "              raw: JSON.stringify(",
                  "                {",
                  "                    fundId: pm.environment.get(\"randomId\"),",
                  "                    fundName: pm.environment.get(\"FundName\"),",
                  "                    nasFundId: pm.environment.get(\"randomId\"),",
                  "                    excludeFromUpFile: true",
                  "                })",
                  "            }",
                  "        };",
                  "",
                  "        pm.sendRequest(postRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                  "        });",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "dca0267e-8a76-4cd8-9b19-cbe3cb58dc4c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "wWERSj"
              },
              {
                "key": "nasFundID",
                "value": "wWERSj"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ead36cb9-0057-48ab-9c5a-014acee5385c",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "b692bfa2-4720-4406-8d1a-6eaeab44a54e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:39 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              45,
              32,
              39,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              32,
              111,
              112,
              116,
              105,
              111,
              110,
              32,
              102,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              119,
              87,
              69,
              82,
              83,
              106,
              44,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              119,
              87,
              69,
              82,
              83,
              106,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              39,
              34,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              56,
              98,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              49,
              53,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 20,
          "responseSize": 293
        },
        "id": "71edafa5-fde0-4f57-a6e3-7604e55c67e2",
        "assertions": [
          {
            "assertion": "Display Investment options - End to End Test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 16,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cf298eb7-b332-44d8-b66b-8d980a9c90c7",
          "httpRequestId": "a4b64f8a-66b5-4eed-930b-44244f52c1e1",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "56af03bf-109d-4fea-a219-412edec21f26"
        },
        "item": {
          "id": "fadb7082-dd1a-4f66-b664-fba747f2ceec",
          "name": "End  to end test - exclude from up file true",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "nasFundID",
                  "value": "{{randomId}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Display Investment options - End to End Test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.be.null;",
                  "    ",
                  "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                  "    {",
                  "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                  "    }",
                  "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(true)) ",
                  "    {",
                  "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                  "    }",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                  "    ",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "   //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "56af03bf-109d-4fea-a219-412edec21f26"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2a27690a-c636-46c6-925b-065ee8e1ab4c",
                "type": "text/javascript",
                "exec": [
                  "const postRequest = {",
                  "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                  "        method: 'POST',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'content-Type': 'application/json',",
                  "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        },",
                  "        body: {",
                  "            mode: 'application/json',",
                  "              raw: JSON.stringify(",
                  "                {",
                  "                    fundId: pm.environment.get(\"randomId\"),",
                  "                    fundName: pm.environment.get(\"FundName\"),",
                  "                    nasFundId: pm.environment.get(\"randomId\"),",
                  "                    excludeFromUpFile: true",
                  "                })",
                  "            }",
                  "        };",
                  "",
                  "        pm.sendRequest(postRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                  "        });",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "dca0267e-8a76-4cd8-9b19-cbe3cb58dc4c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "wWERSj"
              },
              {
                "key": "nasFundID",
                "value": "wWERSj"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ead36cb9-0057-48ab-9c5a-014acee5385c",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "b692bfa2-4720-4406-8d1a-6eaeab44a54e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:39 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              45,
              32,
              39,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              32,
              111,
              112,
              116,
              105,
              111,
              110,
              32,
              102,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              119,
              87,
              69,
              82,
              83,
              106,
              44,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              119,
              87,
              69,
              82,
              83,
              106,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              39,
              34,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              56,
              98,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              49,
              53,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 20,
          "responseSize": 293
        },
        "id": "71edafa5-fde0-4f57-a6e3-7604e55c67e2",
        "assertions": [
          {
            "assertion": "Display Investment options - End to End Test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 16,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cf298eb7-b332-44d8-b66b-8d980a9c90c7",
          "httpRequestId": "a4b64f8a-66b5-4eed-930b-44244f52c1e1",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "56af03bf-109d-4fea-a219-412edec21f26"
        },
        "item": {
          "id": "fadb7082-dd1a-4f66-b664-fba747f2ceec",
          "name": "End  to end test - exclude from up file true",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "nasFundID",
                  "value": "{{randomId}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Display Investment options - End to End Test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.be.null;",
                  "    ",
                  "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                  "    {",
                  "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                  "    }",
                  "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(true)) ",
                  "    {",
                  "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                  "    }",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                  "    ",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "   //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "56af03bf-109d-4fea-a219-412edec21f26"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2a27690a-c636-46c6-925b-065ee8e1ab4c",
                "type": "text/javascript",
                "exec": [
                  "const postRequest = {",
                  "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                  "        method: 'POST',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'content-Type': 'application/json',",
                  "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        },",
                  "        body: {",
                  "            mode: 'application/json',",
                  "              raw: JSON.stringify(",
                  "                {",
                  "                    fundId: pm.environment.get(\"randomId\"),",
                  "                    fundName: pm.environment.get(\"FundName\"),",
                  "                    nasFundId: pm.environment.get(\"randomId\"),",
                  "                    excludeFromUpFile: true",
                  "                })",
                  "            }",
                  "        };",
                  "",
                  "        pm.sendRequest(postRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                  "        });",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "dca0267e-8a76-4cd8-9b19-cbe3cb58dc4c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "wWERSj"
              },
              {
                "key": "nasFundID",
                "value": "wWERSj"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ead36cb9-0057-48ab-9c5a-014acee5385c",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "b692bfa2-4720-4406-8d1a-6eaeab44a54e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:39 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              45,
              32,
              39,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              32,
              111,
              112,
              116,
              105,
              111,
              110,
              32,
              102,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              119,
              87,
              69,
              82,
              83,
              106,
              44,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              119,
              87,
              69,
              82,
              83,
              106,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              39,
              34,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              56,
              98,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              49,
              53,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 20,
          "responseSize": 293
        },
        "id": "71edafa5-fde0-4f57-a6e3-7604e55c67e2",
        "assertions": [
          {
            "assertion": "Display Investment options - End to End Test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "709fce78-66ec-462d-9f98-d09627aa78f6",
          "length": 16,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b39c33ff-1358-45b1-b43c-d230e26b7b18"
        },
        "item": {
          "id": "3175a24c-a715-4f95-9533-1b42182e7da6",
          "name": "Valid  FundID only",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "fundId",
                  "value": "GBCYC1"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.be.null;",
                  "    ",
                  "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                  "    {",
                  "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                  "    }",
                  "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                  "    {",
                  "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                  "    }",
                  "    ",
                  "    console.log(\"Nas Fund Id displayed is: \" + jsonData.response.investmentOptions[0].nasFundId);",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                  "    ",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "1cc765ac-6bb8-4f48-b4d4-1c68627af4d7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundId",
                "value": "GBCYC1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a00ce934-b8b0-40fb-9c24-afc684cb234a",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "3a11d56d-fb2f-4189-8225-a3594c5cd0be",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:39 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              71,
              66,
              67,
              89,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              73,
              84,
              89,
              32,
              68,
              66,
              32,
              79,
              80,
              82,
              84,
              73,
              79,
              78,
              65,
              76,
              32,
              82,
              73,
              83,
              75,
              32,
              82,
              69,
              83,
              82,
              86,
              69,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              71,
              66,
              67,
              89,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              93,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              56,
              99,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              49,
              48,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 18,
          "responseSize": 311
        },
        "id": "3175a24c-a715-4f95-9533-1b42182e7da6",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5708d009-66bf-4fd9-9827-bc75d5f14be9",
          "length": 16,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "86aa5219-275d-4504-b996-219c3e6ded8c"
        },
        "item": {
          "id": "886517aa-0172-4b50-98e4-9396e05096de",
          "name": "Valid NasFundID and FundID",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "nasFundId",
                  "value": "LGGBCY"
                },
                {
                  "key": "fundId",
                  "value": "GBCYC1"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.be.null;",
                  "    ",
                  "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                  "    {",
                  "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                  "    }",
                  "    ",
                  "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundId\"))) ",
                  "    {",
                  "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundId\")) + \" matched.\");",
                  "    }",
                  "    if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                  "    {",
                  "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                  "    }",
                  "    ",
                  "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                  "    ",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "1b07daa7-ee77-4050-87cd-2d8952d8ff26"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "nasFundId",
                "value": "LGGBCY"
              },
              {
                "key": "fundId",
                "value": "GBCYC1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7990ea6c-fa9c-47b6-a28e-08588813b63a",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "c0e0e813-34ab-4467-b34d-058d2128d892",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:39 GMT"
            },
            {
              "key": "Content-Length",
              "value": "311"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              71,
              66,
              67,
              89,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              73,
              84,
              89,
              32,
              68,
              66,
              32,
              79,
              80,
              82,
              84,
              73,
              79,
              78,
              65,
              76,
              32,
              82,
              73,
              83,
              75,
              32,
              82,
              69,
              83,
              82,
              86,
              69,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              71,
              66,
              67,
              89,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              93,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              56,
              100,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              49,
              53,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 28,
          "responseSize": 311
        },
        "id": "886517aa-0172-4b50-98e4-9396e05096de",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c15a7dc7-5363-4abb-a148-f025a883a02b",
          "length": 16,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "01bb22e3-5633-4a02-a761-a5fde47300df"
        },
        "item": {
          "id": "9fe94189-d3a6-43ca-89c7-5b2ac720c6aa",
          "name": "Non-existing FundID",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "fundID",
                  "value": "{{randomId}}"
                },
                {
                  "key": "nasFundID",
                  "value": ""
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                  "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "a981d903-b524-4b71-b0cf-5dff15db28d5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "l8Nfbk"
              },
              {
                "key": "nasFundID",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fd9b122c-fa92-4c3c-9025-a38f878d85ff",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "b779719e-cdb9-4911-ae51-0a66bff2486f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:39 GMT"
            },
            {
              "key": "Content-Length",
              "value": "221"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              115,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              105,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              56,
              101,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              49,
              53,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 221
        },
        "id": "9fe94189-d3a6-43ca-89c7-5b2ac720c6aa",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0e6acb7e-4918-417e-b3dc-12930b0df5d9",
          "length": 16,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a5a2e765-7e72-4f35-8dea-f56d8c9662b3"
        },
        "item": {
          "id": "c92289de-7ec9-42ce-9df3-aaf647182efc",
          "name": "User with No Roles",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "fundID",
                  "value": "bTiNIh"
                },
                {
                  "key": "nasFundID",
                  "value": "bTiNIh"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "string",
                  "value": "{{NoRolesPassword}}",
                  "key": "password"
                },
                {
                  "type": "string",
                  "value": "{{NoRolesUser}}",
                  "key": "username"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(403);",
                  "",
                  "});"
                ],
                "_lastExecutionId": "3351c102-efce-40fe-aa8b-f4cb402faa82"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "bTiNIh"
              },
              {
                "key": "nasFundID",
                "value": "bTiNIh"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic VGVzdE5vUm9sZXNVc2VyOnBhS0F4U0k3RkFvTzUyVQ==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a7f33588-8e50-4659-9d7a-9c40e94b64e3",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "paKAxSI7FAoO52U",
                "key": "password"
              },
              {
                "type": "string",
                "value": "TestNoRolesUser",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "792f93b3-a352-47f4-9ef6-eeb5678a32a3",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:39 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 0
        },
        "id": "c92289de-7ec9-42ce-9df3-aaf647182efc",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "55c2f849-1098-409d-a2a4-b401c0dc5021",
          "length": 16,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cf687aa5-7b1a-4f16-96b9-16fd8a60767b"
        },
        "item": {
          "id": "163174b8-b288-46fa-8cff-046c707fe1f4",
          "name": "No auth",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "fundID",
                  "value": "bTiNIh"
                },
                {
                  "key": "nasFundID",
                  "value": "bTiNIh"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(400);",
                  "",
                  "});"
                ],
                "_lastExecutionId": "f1b24028-cea4-48fd-8149-923d48c6308c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "bTiNIh"
              },
              {
                "key": "nasFundID",
                "value": "bTiNIh"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5f40b790-728a-403f-a62c-74068826f3d3",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "b4e082d7-4f8d-4292-89e6-9fd4610f4105",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:40 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 112,
          "responseSize": 0
        },
        "id": "163174b8-b288-46fa-8cff-046c707fe1f4",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dd72f287-480b-4936-b4a0-e9bfe6d55b1a",
          "length": 16,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b8854d2b-3068-49a5-bf1b-150ceed4e3e9"
        },
        "item": {
          "id": "eec2855d-3828-4a81-ae21-497eea1acff4",
          "name": "Valid NasFundID and Invalid FundID",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "nasFundID",
                  "value": "GBCYC1"
                },
                {
                  "key": "fundID",
                  "value": "{{randomId}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                  "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "f851d532-df96-4ba6-b204-a1931ec204aa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "nasFundID",
                "value": "GBCYC1"
              },
              {
                "key": "fundID",
                "value": "bXhehB"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d3a3b04a-c6f9-4bea-9d41-b7ecbba86824",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "3b1db05b-d3ff-4219-b686-67934749fbae",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:40 GMT"
            },
            {
              "key": "Content-Length",
              "value": "221"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              115,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              105,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              57,
              49,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              49,
              53,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 21,
          "responseSize": 221
        },
        "id": "eec2855d-3828-4a81-ae21-497eea1acff4",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "84bc03b0-8922-4c87-8fd9-0dbcb190d79b",
          "length": 16,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e2142934-9052-4540-856a-68d282469a82"
        },
        "item": {
          "id": "453fab36-53af-4968-8fb6-5085e1917cf6",
          "name": "Incorrect username and password ",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "fundID",
                  "value": "bTiNIh"
                },
                {
                  "key": "nasFundID",
                  "value": "bTiNIh"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "string",
                  "value": "incorrecty",
                  "key": "password"
                },
                {
                  "type": "string",
                  "value": "incorrect",
                  "key": "username"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(401);",
                  "",
                  "});"
                ],
                "_lastExecutionId": "55fa34d6-3bd4-41ed-b044-a7c8ca29b066"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "bTiNIh"
              },
              {
                "key": "nasFundID",
                "value": "bTiNIh"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic aW5jb3JyZWN0OmluY29ycmVjdHk=",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "551f79c4-71dd-466e-955f-b759b5f5f6d2",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "incorrecty",
                "key": "password"
              },
              {
                "type": "string",
                "value": "incorrect",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "6549f859-539d-4174-a2af-41bc92bcb2a2",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:40 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 20,
          "responseSize": 0
        },
        "id": "453fab36-53af-4968-8fb6-5085e1917cf6",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8ba81167-b74f-40c3-8c03-4c3ad0c4cc8a",
          "length": 16,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "044a26f9-5f0c-4835-a62e-f6917384c08c"
        },
        "item": {
          "id": "2aeccf59-ebf3-4ab6-a7e5-29eed5b4045e",
          "name": "Locked User",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "fundID",
                  "value": "bTiNIh"
                },
                {
                  "key": "nasFundID",
                  "value": "bTiNIh"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "string",
                  "value": "{{LockedPassword}}",
                  "key": "password"
                },
                {
                  "type": "string",
                  "value": "{{LockedUser}}",
                  "key": "username"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(401);",
                  "",
                  "});"
                ],
                "_lastExecutionId": "a92eb62e-7c69-4dfc-9272-7faf782feca7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "bTiNIh"
              },
              {
                "key": "nasFundID",
                "value": "bTiNIh"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic VGVzdExvY2tlZFVzZXI6c2hmcTYtV05kemRuV3NlSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c3491fc8-c7d8-4818-b8d3-0e1a774ac6b6",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "shfq6-WNdzdnWseK",
                "key": "password"
              },
              {
                "type": "string",
                "value": "TestLockedUser",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "bdfc7397-e6c8-40e1-9f03-1ccca7062fde",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:40 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 0
        },
        "id": "2aeccf59-ebf3-4ab6-a7e5-29eed5b4045e",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dbf82cd0-62aa-4bf5-a26d-f3c022a6f0af",
          "length": 16,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0feb722b-d8eb-4b1a-aa36-eabdac10c260"
        },
        "item": {
          "id": "4515832f-61d6-4328-989e-675eae041f3e",
          "name": "New User",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "fundID",
                  "value": "bTiNIh"
                },
                {
                  "key": "nasFundID",
                  "value": "bTiNIh"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "string",
                  "value": "{{NewPassword}}",
                  "key": "password"
                },
                {
                  "type": "string",
                  "value": "{{NewUser}}",
                  "key": "username"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(401);",
                  "",
                  "});"
                ],
                "_lastExecutionId": "c8b5aafe-7fa5-4822-acb2-386447a5a11b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "bTiNIh"
              },
              {
                "key": "nasFundID",
                "value": "bTiNIh"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic VGVzdE5ld1VzZXI6YnRzV2VXJHpNbWhKSWp5",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "21933bc7-238c-4948-a882-372779287f50",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "btsWeW$zMmhJIjy",
                "key": "password"
              },
              {
                "type": "string",
                "value": "TestNewUser",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "9f21e776-fe04-4713-aecc-c99e7e6697a1",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:40 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 21,
          "responseSize": 0
        },
        "id": "4515832f-61d6-4328-989e-675eae041f3e",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4cd678e1-17f9-4459-9a24-8b54b2f2679e",
          "length": 16,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "53d0eea7-3597-4f8a-9aea-a3fc26b07942",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "fd2e9ba7-5d45-46f1-9164-c5c4a921adca"
        },
        "item": {
          "id": "3ad3c648-da6a-4a6b-a31d-d46da10b44ca",
          "name": "End  to end test - exclude from up file false",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "nasFundID",
                  "value": "{{randomId}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Display Investment options - End to End Test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.be.null;",
                  "    ",
                  "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                  "    {",
                  "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                  "    }",
                  "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                  "    {",
                  "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                  "    }",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                  "    ",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "   //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "fd2e9ba7-5d45-46f1-9164-c5c4a921adca"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2a27690a-c636-46c6-925b-065ee8e1ab4c",
                "type": "text/javascript",
                "exec": [
                  "const postRequest = {",
                  "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                  "        method: 'POST',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'content-Type': 'application/json',",
                  "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        },",
                  "        body: {",
                  "            mode: 'application/json',",
                  "              raw: JSON.stringify(",
                  "                {",
                  "                    fundId: pm.environment.get(\"randomId\"),",
                  "                    fundName: pm.environment.get(\"FundName\"),",
                  "                    nasFundId: pm.environment.get(\"randomId\"),",
                  "                    excludeFromUpFile: false",
                  "                })",
                  "            }",
                  "        };",
                  "",
                  "        pm.sendRequest(postRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                  "        });",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "de798734-8228-4b0e-8f05-c83af4ee6b15"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "1lVw3e"
              },
              {
                "key": "nasFundID",
                "value": "1lVw3e"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "496313a1-258f-434b-8d6e-8ac9e869bd98",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "c5ef1559-24e8-4d56-94be-d51e67cda245",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:41 GMT"
            },
            {
              "key": "Content-Length",
              "value": "293"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              45,
              32,
              39,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              32,
              111,
              112,
              116,
              105,
              111,
              110,
              32,
              102,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              49,
              108,
              86,
              119,
              51,
              101,
              44,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              49,
              108,
              86,
              119,
              51,
              101,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              39,
              34,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              57,
              55,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              48,
              53,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 293
        },
        "id": "e57d6af3-8059-49d9-a069-a69cd84902a3",
        "assertions": [
          {
            "assertion": "Display Investment options - End to End Test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4cd678e1-17f9-4459-9a24-8b54b2f2679e",
          "length": 16,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "53d0eea7-3597-4f8a-9aea-a3fc26b07942",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "fd2e9ba7-5d45-46f1-9164-c5c4a921adca"
        },
        "item": {
          "id": "3ad3c648-da6a-4a6b-a31d-d46da10b44ca",
          "name": "End  to end test - exclude from up file false",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "nasFundID",
                  "value": "{{randomId}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Display Investment options - End to End Test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.be.null;",
                  "    ",
                  "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                  "    {",
                  "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                  "    }",
                  "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                  "    {",
                  "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                  "    }",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                  "    ",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "   //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "fd2e9ba7-5d45-46f1-9164-c5c4a921adca"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2a27690a-c636-46c6-925b-065ee8e1ab4c",
                "type": "text/javascript",
                "exec": [
                  "const postRequest = {",
                  "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                  "        method: 'POST',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'content-Type': 'application/json',",
                  "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        },",
                  "        body: {",
                  "            mode: 'application/json',",
                  "              raw: JSON.stringify(",
                  "                {",
                  "                    fundId: pm.environment.get(\"randomId\"),",
                  "                    fundName: pm.environment.get(\"FundName\"),",
                  "                    nasFundId: pm.environment.get(\"randomId\"),",
                  "                    excludeFromUpFile: false",
                  "                })",
                  "            }",
                  "        };",
                  "",
                  "        pm.sendRequest(postRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                  "        });",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "de798734-8228-4b0e-8f05-c83af4ee6b15"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "1lVw3e"
              },
              {
                "key": "nasFundID",
                "value": "1lVw3e"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "496313a1-258f-434b-8d6e-8ac9e869bd98",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "c5ef1559-24e8-4d56-94be-d51e67cda245",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:41 GMT"
            },
            {
              "key": "Content-Length",
              "value": "293"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              45,
              32,
              39,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              32,
              111,
              112,
              116,
              105,
              111,
              110,
              32,
              102,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              49,
              108,
              86,
              119,
              51,
              101,
              44,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              49,
              108,
              86,
              119,
              51,
              101,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              39,
              34,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              57,
              55,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              48,
              53,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 293
        },
        "id": "e57d6af3-8059-49d9-a069-a69cd84902a3",
        "assertions": [
          {
            "assertion": "Display Investment options - End to End Test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4cd678e1-17f9-4459-9a24-8b54b2f2679e",
          "length": 16,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "53d0eea7-3597-4f8a-9aea-a3fc26b07942",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "fd2e9ba7-5d45-46f1-9164-c5c4a921adca"
        },
        "item": {
          "id": "3ad3c648-da6a-4a6b-a31d-d46da10b44ca",
          "name": "End  to end test - exclude from up file false",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "nasFundID",
                  "value": "{{randomId}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Display Investment options - End to End Test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.be.null;",
                  "    ",
                  "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                  "    {",
                  "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                  "    }",
                  "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                  "    {",
                  "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                  "    }",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                  "    ",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "   //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "fd2e9ba7-5d45-46f1-9164-c5c4a921adca"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2a27690a-c636-46c6-925b-065ee8e1ab4c",
                "type": "text/javascript",
                "exec": [
                  "const postRequest = {",
                  "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                  "        method: 'POST',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'content-Type': 'application/json',",
                  "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        },",
                  "        body: {",
                  "            mode: 'application/json',",
                  "              raw: JSON.stringify(",
                  "                {",
                  "                    fundId: pm.environment.get(\"randomId\"),",
                  "                    fundName: pm.environment.get(\"FundName\"),",
                  "                    nasFundId: pm.environment.get(\"randomId\"),",
                  "                    excludeFromUpFile: false",
                  "                })",
                  "            }",
                  "        };",
                  "",
                  "        pm.sendRequest(postRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                  "        });",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "de798734-8228-4b0e-8f05-c83af4ee6b15"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "1lVw3e"
              },
              {
                "key": "nasFundID",
                "value": "1lVw3e"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "496313a1-258f-434b-8d6e-8ac9e869bd98",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "c5ef1559-24e8-4d56-94be-d51e67cda245",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:41 GMT"
            },
            {
              "key": "Content-Length",
              "value": "293"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              45,
              32,
              39,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              32,
              111,
              112,
              116,
              105,
              111,
              110,
              32,
              102,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              49,
              108,
              86,
              119,
              51,
              101,
              44,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              49,
              108,
              86,
              119,
              51,
              101,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              39,
              34,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              57,
              55,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              48,
              53,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 293
        },
        "id": "e57d6af3-8059-49d9-a069-a69cd84902a3",
        "assertions": [
          {
            "assertion": "Display Investment options - End to End Test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e1528f6b-1ff6-4605-af15-4234b2fbccf2",
          "length": 16,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0672f6f6-7e3b-4d54-86b5-8d0baffac12c"
        },
        "item": {
          "id": "72d63939-b835-47a3-9976-035cf13d975d",
          "name": "Blank Parameters",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "fundID",
                  "value": ""
                },
                {
                  "key": "nasFundID",
                  "value": ""
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const length = pm.response.json().response.investmentOptions.length;",
                  "    console.log(\"No of Investments options records:\" + length);",
                  "});"
                ],
                "_lastExecutionId": "63e6a818-4b74-4cc1-b3be-48eb08afc67f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": ""
              },
              {
                "key": "nasFundID",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ccf5bbc9-276f-4f0d-98c7-afab7a52a094",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "6c8bb7b1-b82f-4cad-8796-340b7f96c723",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:41 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              71,
              66,
              67,
              89,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              73,
              84,
              89,
              32,
              68,
              66,
              32,
              79,
              80,
              82,
              84,
              73,
              79,
              78,
              65,
              76,
              32,
              82,
              73,
              83,
              75,
              32,
              82,
              69,
              83,
              82,
              86,
              69,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              71,
              66,
              67,
              89,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              71,
              66,
              79,
              82,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              79,
              84,
              72,
              69,
              82,
              32,
              82,
              69,
              83,
              69,
              82,
              86,
              69,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              71,
              66,
              79,
              82,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              71,
              66,
              82,
              71,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              82,
              69,
              71,
              76,
              32,
              68,
              66,
              32,
              79,
              80,
              82,
              65,
              84,
              73,
              79,
              78,
              65,
              76,
              32,
              82,
              73,
              83,
              75,
              32,
              82,
              69,
              83,
              82,
              86,
              69,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              71,
              66,
              82,
              71,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              49,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              82,
              69,
              71,
              73,
              79,
              78,
              65,
              76,
              32,
              68,
              66,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              83,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              49,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              50,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              67,
              73,
              84,
              89,
              32,
              68,
              66,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              83,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              50,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              51,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              67,
              73,
              84,
              89,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              83,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              51,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              52,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              65,
              85,
              83,
              32,
              69,
              81,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              52,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              52,
              67,
              51,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              65,
              85,
              83,
              32,
              69,
              81,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              52,
              67,
              51,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              53,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              73,
              78,
              84,
              32,
              69,
              81,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              53,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              53,
              67,
              51,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              73,
              78,
              84,
              32,
              69,
              81,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              53,
              67,
              51,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              54,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              80,
              82,
              79,
              80,
              69,
              82,
              84,
              89,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              54,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              54,
              67,
              51,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              80,
              82,
              79,
              80,
              69,
              82,
              84,
              89,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              54,
              67,
              51,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              55,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              83,
              82,
              73,
              32,
              66,
              65,
              76,
              65,
              78,
              67,
              69,
              68,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              55,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              55,
              67,
              51,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              83,
              82,
              73,
              32,
              66,
              65,
              76,
              65,
              78,
              67,
              69,
              68,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              55,
              67,
              51,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              56,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              83,
              82,
              73,
              32,
              65,
              85,
              83,
              32,
              69,
              81,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              56,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              56,
              67,
              51,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              83,
              82,
              73,
              32,
              65,
              85,
              83,
              32,
              69,
              81,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              56,
              67,
              51,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              57,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              68,
              73,
              86,
              32,
              70,
              73,
              88,
              69,
              68,
              32,
              73,
              78,
              84,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              57,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              48,
              57,
              67,
              51,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              68,
              73,
              86,
              32,
              70,
              73,
              88,
              69,
              68,
              32,
              73,
              78,
              84,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              48,
              57,
              67,
              51,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              49,
              48,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              67,
              65,
              83,
              72,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              49,
              48,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              49,
              48,
              67,
              51,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              67,
              65,
              83,
              72,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              49,
              48,
              67,
              51,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              49,
              49,
              67,
              50,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              65,
              85,
              83,
              32,
              69,
              81,
              32,
              80,
              69,
              78,
              83,
              73,
              79,
              78,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              49,
              49,
              67,
              50,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              49,
              50,
              67,
              50,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              73,
              78,
              84,
              32,
              69,
              81,
              32,
              80,
              69,
              78,
              83,
              73,
              79,
              78,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              49,
              50,
              67,
              50,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              49,
              51,
              67,
              50,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              80,
              82,
              79,
              80,
              69,
              82,
              84,
              89,
              32,
              80,
              69,
              78,
              83,
              73,
              79,
              78,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              49,
              51,
              67,
              50,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              49,
              52,
              67,
              50,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              83,
              82,
              73,
              32,
              66,
              65,
              76,
              65,
              78,
              67,
              69,
              68,
              32,
              80,
              69,
              78,
              83,
              73,
              79,
              78,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              49,
              52,
              67,
              50,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              49,
              53,
              67,
              50,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              83,
              82,
              73,
              32,
              65,
              85,
              83,
              32,
              69,
              81,
              32,
              80,
              69,
              78,
              83,
              73,
              79,
              78,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              49,
              53,
              67,
              50,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              49,
              54,
              67,
              50,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              68,
              70,
              73,
              32,
              80,
              69,
              78,
              83,
              73,
              79,
              78,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              49,
              54,
              67,
              50,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              49,
              55,
              67,
              50,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              67,
              65,
              83,
              72,
              32,
              80,
              69,
              78,
              83,
              73,
              79,
              78,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              49,
              55,
              67,
              50,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              49,
              56,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              65,
              71,
              71,
              82,
              69,
              83,
              83,
              73,
              86,
              69,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              49,
              56,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              49,
              56,
              67,
              51,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              65,
              71,
              71,
              82,
              69,
              83,
              83,
              73,
              86,
              69,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              49,
              56,
              67,
              51,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              49,
              57,
              67,
              50,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              65,
              71,
              71,
              82,
              69,
              83,
              83,
              73,
              86,
              69,
              32,
              80,
              69,
              78,
              83,
              73,
              79,
              78,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              49,
              57,
              67,
              50,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              48,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              68,
              73,
              86,
              32,
              71,
              82,
              79,
              87,
              84,
              72,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              48,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              48,
              67,
              51,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              68,
              73,
              86,
              32,
              71,
              82,
              79,
              87,
              84,
              72,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              48,
              67,
              51,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              49,
              67,
              50,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              68,
              73,
              86,
              32,
              71,
              82,
              79,
              87,
              84,
              72,
              32,
              80,
              69,
              78,
              83,
              73,
              79,
              78,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              49,
              67,
              50,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              50,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              67,
              79,
              78,
              83,
              32,
              66,
              65,
              76,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              50,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              50,
              67,
              51,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              67,
              79,
              78,
              83,
              32,
              66,
              65,
              76,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              50,
              67,
              51,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              51,
              67,
              50,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              67,
              79,
              78,
              83,
              32,
              66,
              65,
              76,
              32,
              80,
              69,
              78,
              83,
              73,
              79,
              78,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              51,
              67,
              50,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              52,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              83,
              84,
              65,
              66,
              76,
              69,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              52,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              52,
              67,
              51,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              83,
              84,
              65,
              66,
              76,
              69,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              52,
              67,
              51,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              53,
              67,
              50,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              83,
              84,
              65,
              66,
              76,
              69,
              32,
              80,
              69,
              78,
              83,
              73,
              79,
              78,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              53,
              67,
              50,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              54,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              68,
              69,
              70,
              69,
              78,
              83,
              73,
              86,
              69,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              54,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              54,
              67,
              51,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              68,
              69,
              70,
              69,
              78,
              83,
              73,
              86,
              69,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              54,
              67,
              51,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              55,
              67,
              50,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              68,
              69,
              70,
              69,
              78,
              83,
              73,
              86,
              69,
              32,
              80,
              69,
              78,
              83,
              73,
              79,
              78,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              55,
              67,
              50,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              56,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              79,
              80,
              69,
              82,
              65,
              84,
              73,
              79,
              78,
              65,
              76,
              32,
              82,
              73,
              83,
              75,
              32,
              82,
              69,
              83,
              69,
              82,
              86,
              69,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              56,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              50,
              57,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              71,
              69,
              78,
              69,
              82,
              65,
              76,
              32,
              82,
              69,
              83,
              69,
              82,
              86,
              69,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              50,
              57,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              52,
              48,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              77,
              89,
              83,
              85,
              80,
              69,
              82,
              32,
              68,
              73,
              86,
              32,
              71,
              82,
              79,
              87,
              84,
              72,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              52,
              48,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              52,
              49,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              77,
              89,
              83,
              85,
              80,
              69,
              82,
              32,
              66,
              65,
              76,
              65,
              78,
              67,
              69,
              68,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              52,
              49,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              56,
              50,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              67,
              73,
              84,
              89,
              32,
              68,
              66,
              32,
              79,
              80,
              82,
              84,
              73,
              79,
              78,
              65,
              76,
              32,
              82,
              73,
              83,
              75,
              32,
              82,
              69,
              83,
              82,
              86,
              69,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              56,
              49,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              86,
              89,
              122,
              111,
              89,
              53,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              86,
              89,
              122,
              111,
              89,
              53,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              81,
              76,
              53,
              48,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              73,
              65,
              32,
              77,
              89,
              32,
              83,
              85,
              80,
              69,
              82,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              53,
              48,
              67,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              71,
              85,
              48,
              75,
              115,
              74,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              71,
              85,
              48,
              75,
              115,
              74,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              72,
              70,
              112,
              79,
              102,
              104,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              72,
              70,
              112,
              79,
              102,
              104,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              86,
              103,
              121,
              67,
              122,
              118,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              86,
              103,
              121,
              67,
              122,
              118,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              54,
              85,
              51,
              104,
              84,
              102,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              54,
              85,
              51,
              104,
              84,
              102,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              110,
              101,
              119,
              49,
              50,
              51,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              68,
              73,
              86,
              32,
              71,
              82,
              79,
              87,
              84,
              72,
              32,
              65,
              67,
              67,
              85,
              77,
              32,
              79,
              80,
              84,
              73,
              79,
              78,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              110,
              101,
              119,
              49,
              50,
              51,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              57,
              119,
              72,
              50,
              74,
              65,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              57,
              119,
              72,
              50,
              74,
              65,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              99,
              68,
              108,
              88,
              115,
              122,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              99,
              68,
              108,
              88,
              115,
              122,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              57,
              74,
              115,
              101,
              75,
              121,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              57,
              74,
              115,
              101,
              75,
              121,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              67,
              75,
              85,
              100,
              72,
              114,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              67,
              75,
              85,
              100,
              72,
              114,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              68,
              79,
              102,
              82,
              111,
              115,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              68,
              79,
              102,
              82,
              111,
              115,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              84,
              81,
              73,
              80,
              49,
              115,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              84,
              81,
              73,
              80,
              49,
              115,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              70,
              111,
              51,
              104,
              70,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              70,
              111,
              51,
              104,
              70,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              72,
              113,
              71,
              119,
              52,
              79,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              72,
              113,
              71,
              119,
              52,
              79,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              107,
              72,
              83,
              65,
              99,
              97,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              107,
              72,
              83,
              65,
              99,
              97,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              54,
              76,
              70,
              75,
              69,
              65,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              54,
              76,
              70,
              75,
              69,
              65,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              68,
              76,
              115,
              100,
              65,
              74,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              68,
              76,
              115,
              100,
              65,
              74,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              82,
              65,
              90,
              65,
              74,
              73,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              82,
              65,
              90,
              65,
              74,
              73,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              71,
              79,
              79,
              87,
              85,
              70,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              71,
              79,
              79,
              87,
              85,
              70,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              116,
              72,
              101,
              107,
              98,
              69,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              116,
              72,
              101,
              107,
              98,
              69,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              77,
              85,
              99,
              90,
              68,
              100,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              77,
              85,
              99,
              90,
              68,
              100,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              74,
              82,
              83,
              104,
              118,
              97,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              74,
              82,
              83,
              104,
              118,
              97,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              120,
              90,
              107,
              103,
              70,
              120,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              120,
              90,
              107,
              103,
              70,
              120,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              122,
              65,
              89,
              109,
              57,
              74,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              122,
              65,
              89,
              109,
              57,
              74,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              71,
              81,
              120,
              104,
              118,
              53,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              71,
              81,
              120,
              104,
              118,
              53,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              117,
              121,
              49,
              74,
              68,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              117,
              121,
              49,
              74,
              68,
              49,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              110,
              117,
              83,
              74,
              68,
              76,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              110,
              117,
              83,
              74,
              68,
              76,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              86,
              114,
              52,
              70,
              111,
              110,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              86,
              114,
              52,
              70,
              111,
              110,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              118,
              50,
              88,
              90,
              115,
              73,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              118,
              50,
              88,
              90,
              115,
              73,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              114,
              109,
              77,
              104,
              69,
              110,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              114,
              109,
              77,
              104,
              69,
              110,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              86,
              120,
              88,
              85,
              53,
              98,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              86,
              120,
              88,
              85,
              53,
              98,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              87,
              83,
              57,
              110,
              85,
              53,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              87,
              83,
              57,
              110,
              85,
              53,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              108,
              116,
              112,
              108,
              70,
              78,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              66,
              67,
              68,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              108,
              116,
              112,
              108,
              70,
              78,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              93,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              57,
              56,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              49,
              53,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 29,
          "responseSize": 7845
        },
        "id": "72d63939-b835-47a3-9976-035cf13d975d",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dd6f616f-aaa0-4e56-9b7b-1150a7722e19",
          "length": 16,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bf21c631-b0bb-44dd-ac3f-3730e0911ef6"
        },
        "item": {
          "id": "a965849f-ebbb-42dc-998b-6c508ea167db",
          "name": "Non-existing NasFundID",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "fundID",
                  "value": ""
                },
                {
                  "key": "nasFundID",
                  "value": "{{randomId}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                  "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "fd20ec09-7be1-4e55-a948-e94230506dcd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": ""
              },
              {
                "key": "nasFundID",
                "value": "GxV6xJ"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "916751c7-87c4-4a1f-a7e3-cd90ab7d57be",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "c47443d0-5d18-47fa-9e9f-db7adcfbf990",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:41 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              115,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              105,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              57,
              57,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              49,
              53,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 221
        },
        "id": "a965849f-ebbb-42dc-998b-6c508ea167db",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "41ca82e2-ccae-4f0b-b36c-df628179e1cc",
          "length": 16,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "31d5de38-417b-4525-8b85-a8bf395d7d73"
        },
        "item": {
          "id": "0652bb42-b005-4100-a029-9b4685766735",
          "name": "Non-existing both",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "fundID",
                  "value": "{{randomId}}"
                },
                {
                  "key": "nasFundID",
                  "value": "{{randomId}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                  "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "518fc836-713d-400c-936a-c753e464970a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "GVoSuP"
              },
              {
                "key": "nasFundID",
                "value": "GVoSuP"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "975ec161-aa2b-4fd4-afdf-75f72576cefd",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "b035ae6c-1e14-4fd2-b57f-c40170f71e68",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:41 GMT"
            },
            {
              "key": "Content-Length",
              "value": "221"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              115,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              105,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              57,
              97,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              49,
              53,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 23,
          "responseSize": 221
        },
        "id": "0652bb42-b005-4100-a029-9b4685766735",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a5ffffa3-6713-4d4f-8448-f2c681418e22",
          "length": 16,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b926e624-7d17-4924-aec3-aa60aa7d4338"
        },
        "item": {
          "id": "a1ac9bf7-067e-4753-898b-e776a370284f",
          "name": "Valid FundID and Invalid NasFundID",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "nasFundID",
                  "value": "{{randomId}}"
                },
                {
                  "key": "fundID",
                  "value": "GBCYC1"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                  "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "225cb9ff-fab5-4e39-8044-5df40bdbedc4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "nasFundID",
                "value": "nppCPB"
              },
              {
                "key": "fundID",
                "value": "GBCYC1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3c716f0f-2112-435a-a0fe-e1ba8e9ebe48",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "06fbd57e-6dbb-4972-84fe-02413987708f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:41 GMT"
            },
            {
              "key": "Content-Length",
              "value": "221"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              115,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              105,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              57,
              98,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              48,
              54,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 25,
          "responseSize": 221
        },
        "id": "a1ac9bf7-067e-4753-898b-e776a370284f",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "90b16e08-7683-46b1-8b69-275d524ce8a5",
          "length": 16,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "be95a67f-cf86-4c83-baba-0d64743e3aea"
        },
        "item": {
          "id": "83f54253-deaa-48f0-a55a-6800f35f61d6",
          "name": "Valid  NasFundID only",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "DisplayInvestmentOptions"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [
                {
                  "key": "nasFundID",
                  "value": "LGGBCY"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "text/plain"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No Auth test\", () => {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    pm.expect(jsonData.response.message).to.be.null;",
                  "    ",
                  "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                  "    {",
                  "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                  "    }",
                  "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                  "    {",
                  "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                  "    }",
                  "    ",
                  "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                  "    ",
                  "    ",
                  "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                  "    ",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "   ",
                  "});"
                ],
                "_lastExecutionId": "10ed7f31-35ad-4ec5-99f8-8619639dcadc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "DisplayInvestmentOptions"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "nasFundID",
                "value": "LGGBCY"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "13d7f957-075f-4362-a320-b33300757076",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "48465a22-f2c6-47a4-81cf-05f242f2f5d7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:15:41 GMT"
            },
            {
              "key": "Content-Length",
              "value": "311"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              102,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              71,
              66,
              67,
              89,
              67,
              49,
              34,
              44,
              34,
              102,
              117,
              110,
              100,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              73,
              84,
              89,
              32,
              68,
              66,
              32,
              79,
              80,
              82,
              84,
              73,
              79,
              78,
              65,
              76,
              32,
              82,
              73,
              83,
              75,
              32,
              82,
              69,
              83,
              82,
              86,
              69,
              34,
              44,
              34,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              58,
              34,
              76,
              71,
              71,
              66,
              67,
              89,
              34,
              44,
              34,
              101,
              120,
              99,
              108,
              117,
              100,
              101,
              70,
              114,
              111,
              109,
              85,
              112,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              93,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              50,
              49,
              53,
              57,
              99,
              45,
              48,
              48,
              48,
              49,
              45,
              99,
              100,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              49,
              53,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 23,
          "responseSize": 311
        },
        "id": "83f54253-deaa-48f0-a55a-6800f35f61d6",
        "assertions": [
          {
            "assertion": "No Auth test",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 11624
    },
    "failures": [],
    "error": null
  },
  "consoleLogs": {
    "cf298eb7-b332-44d8-b66b-8d980a9c90c7": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 16,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cf298eb7-b332-44d8-b66b-8d980a9c90c7",
          "scriptId": "2a27690a-c636-46c6-925b-065ee8e1ab4c",
          "execution": "dca0267e-8a76-4cd8-9b19-cbe3cb58dc4c"
        },
        "level": "log",
        "messages": [
          "Created Fund Id wWERSj. Record successfully created before test",
          {
            "httpStatusCode": 200,
            "response": {
              "message": "New record successfully added - 'Investment option wWERSj successfully added - ID 1101'"
            },
            "isSuccess": true,
            "error": null,
            "traceIdentifier": "[80021589-0001-cd00-b63f-84710c7967bb:0010:/api/NasFile/AddInvestmentOption]"
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 16,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cf298eb7-b332-44d8-b66b-8d980a9c90c7",
          "httpRequestId": "68927da3-4e60-40a3-8266-f8563324af8a",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "56af03bf-109d-4fea-a219-412edec21f26"
        },
        "level": "log",
        "messages": [
          "Nas Fund ID wWERSj matched."
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 16,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cf298eb7-b332-44d8-b66b-8d980a9c90c7",
          "httpRequestId": "68927da3-4e60-40a3-8266-f8563324af8a",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "56af03bf-109d-4fea-a219-412edec21f26"
        },
        "level": "log",
        "messages": [
          "Exclude from UP file true found and valid."
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 16,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cf298eb7-b332-44d8-b66b-8d980a9c90c7",
          "httpRequestId": "68927da3-4e60-40a3-8266-f8563324af8a",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "56af03bf-109d-4fea-a219-412edec21f26"
        },
        "level": "log",
        "messages": [
          "Fund Id displayed is: wWERSj"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 16,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cf298eb7-b332-44d8-b66b-8d980a9c90c7",
          "httpRequestId": "68927da3-4e60-40a3-8266-f8563324af8a",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "56af03bf-109d-4fea-a219-412edec21f26"
        },
        "level": "log",
        "messages": [
          "Fund Title displayed is: This is a new fund name for wWERSj"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 16,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cf298eb7-b332-44d8-b66b-8d980a9c90c7",
          "httpRequestId": "68927da3-4e60-40a3-8266-f8563324af8a",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "56af03bf-109d-4fea-a219-412edec21f26"
        },
        "level": "log",
        "messages": [
          "Starting deletion of created FundId wWERSj...."
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 16,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cf298eb7-b332-44d8-b66b-8d980a9c90c7",
          "httpRequestId": "68927da3-4e60-40a3-8266-f8563324af8a",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "56af03bf-109d-4fea-a219-412edec21f26"
        },
        "level": "log",
        "messages": [
          "Created Fund Id wWERSj Record successfully deleted after test",
          {
            "httpStatusCode": 200,
            "response": {
              "message": "Existing record successfully deleted - 'Investment option fundId = wWERSj, nasFundId = wWERSj successfully removed'"
            },
            "isSuccess": true,
            "error": null,
            "traceIdentifier": "[8002158b-0001-cd00-b63f-84710c7967bb:0015:/api/NasFile/RemoveInvestmentOption]"
          }
        ]
      }
    ],
    "709fce78-66ec-462d-9f98-d09627aa78f6": [
      {
        "cursor": {
          "ref": "709fce78-66ec-462d-9f98-d09627aa78f6",
          "length": 16,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b39c33ff-1358-45b1-b43c-d230e26b7b18",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "1cc765ac-6bb8-4f48-b4d4-1c68627af4d7"
        },
        "level": "log",
        "messages": [
          "Fund ID GBCYC1 matched."
        ]
      },
      {
        "cursor": {
          "ref": "709fce78-66ec-462d-9f98-d09627aa78f6",
          "length": 16,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b39c33ff-1358-45b1-b43c-d230e26b7b18",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "1cc765ac-6bb8-4f48-b4d4-1c68627af4d7"
        },
        "level": "log",
        "messages": [
          "Exclude from UP file false found and valid."
        ]
      },
      {
        "cursor": {
          "ref": "709fce78-66ec-462d-9f98-d09627aa78f6",
          "length": 16,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b39c33ff-1358-45b1-b43c-d230e26b7b18",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "1cc765ac-6bb8-4f48-b4d4-1c68627af4d7"
        },
        "level": "log",
        "messages": [
          "Nas Fund Id displayed is: LGGBCY"
        ]
      },
      {
        "cursor": {
          "ref": "709fce78-66ec-462d-9f98-d09627aa78f6",
          "length": 16,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b39c33ff-1358-45b1-b43c-d230e26b7b18",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "1cc765ac-6bb8-4f48-b4d4-1c68627af4d7"
        },
        "level": "log",
        "messages": [
          "Fund Title displayed is: CITY DB OPRTIONAL RISK RESRVE"
        ]
      }
    ],
    "5708d009-66bf-4fd9-9827-bc75d5f14be9": [
      {
        "cursor": {
          "ref": "5708d009-66bf-4fd9-9827-bc75d5f14be9",
          "length": 16,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "86aa5219-275d-4504-b996-219c3e6ded8c",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "1b07daa7-ee77-4050-87cd-2d8952d8ff26"
        },
        "level": "log",
        "messages": [
          "Fund ID GBCYC1 matched."
        ]
      },
      {
        "cursor": {
          "ref": "5708d009-66bf-4fd9-9827-bc75d5f14be9",
          "length": 16,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "86aa5219-275d-4504-b996-219c3e6ded8c",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "1b07daa7-ee77-4050-87cd-2d8952d8ff26"
        },
        "level": "log",
        "messages": [
          "Nas Fund ID LGGBCY matched."
        ]
      },
      {
        "cursor": {
          "ref": "5708d009-66bf-4fd9-9827-bc75d5f14be9",
          "length": 16,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "86aa5219-275d-4504-b996-219c3e6ded8c",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "1b07daa7-ee77-4050-87cd-2d8952d8ff26"
        },
        "level": "log",
        "messages": [
          "Exclude from UP file false found and valid."
        ]
      },
      {
        "cursor": {
          "ref": "5708d009-66bf-4fd9-9827-bc75d5f14be9",
          "length": 16,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "86aa5219-275d-4504-b996-219c3e6ded8c",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "1b07daa7-ee77-4050-87cd-2d8952d8ff26"
        },
        "level": "log",
        "messages": [
          "Fund Title displayed is: CITY DB OPRTIONAL RISK RESRVE"
        ]
      }
    ],
    "4cd678e1-17f9-4459-9a24-8b54b2f2679e": [
      {
        "cursor": {
          "ref": "4cd678e1-17f9-4459-9a24-8b54b2f2679e",
          "length": 16,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "scriptId": "2a27690a-c636-46c6-925b-065ee8e1ab4c",
          "execution": "de798734-8228-4b0e-8f05-c83af4ee6b15"
        },
        "level": "log",
        "messages": [
          "Created Fund Id 1lVw3e. Record successfully created before test",
          {
            "httpStatusCode": 200,
            "response": {
              "message": "New record successfully added - 'Investment option 1lVw3e successfully added - ID 1102'"
            },
            "isSuccess": true,
            "error": null,
            "traceIdentifier": "[80021595-0001-cd00-b63f-84710c7967bb:0006:/api/NasFile/AddInvestmentOption]"
          }
        ]
      },
      {
        "cursor": {
          "ref": "4cd678e1-17f9-4459-9a24-8b54b2f2679e",
          "length": 16,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ace1c9e7-a034-49ea-b204-2468e470ec70",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "fd2e9ba7-5d45-46f1-9164-c5c4a921adca"
        },
        "level": "log",
        "messages": [
          "Nas Fund ID 1lVw3e matched."
        ]
      },
      {
        "cursor": {
          "ref": "4cd678e1-17f9-4459-9a24-8b54b2f2679e",
          "length": 16,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ace1c9e7-a034-49ea-b204-2468e470ec70",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "fd2e9ba7-5d45-46f1-9164-c5c4a921adca"
        },
        "level": "log",
        "messages": [
          "Exclude from UP file false found and valid."
        ]
      },
      {
        "cursor": {
          "ref": "4cd678e1-17f9-4459-9a24-8b54b2f2679e",
          "length": 16,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ace1c9e7-a034-49ea-b204-2468e470ec70",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "fd2e9ba7-5d45-46f1-9164-c5c4a921adca"
        },
        "level": "log",
        "messages": [
          "Fund Id displayed is: 1lVw3e"
        ]
      },
      {
        "cursor": {
          "ref": "4cd678e1-17f9-4459-9a24-8b54b2f2679e",
          "length": 16,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ace1c9e7-a034-49ea-b204-2468e470ec70",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "fd2e9ba7-5d45-46f1-9164-c5c4a921adca"
        },
        "level": "log",
        "messages": [
          "Fund Title displayed is: This is a new fund name for 1lVw3e"
        ]
      },
      {
        "cursor": {
          "ref": "4cd678e1-17f9-4459-9a24-8b54b2f2679e",
          "length": 16,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ace1c9e7-a034-49ea-b204-2468e470ec70",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "fd2e9ba7-5d45-46f1-9164-c5c4a921adca"
        },
        "level": "log",
        "messages": [
          "Starting deletion of created FundId 1lVw3e...."
        ]
      },
      {
        "cursor": {
          "ref": "4cd678e1-17f9-4459-9a24-8b54b2f2679e",
          "length": 16,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ace1c9e7-a034-49ea-b204-2468e470ec70",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "fd2e9ba7-5d45-46f1-9164-c5c4a921adca"
        },
        "level": "log",
        "messages": [
          "Created Fund Id 1lVw3e Record successfully deleted after test",
          {
            "httpStatusCode": 200,
            "response": {
              "message": "Existing record successfully deleted - 'Investment option fundId = 1lVw3e, nasFundId = 1lVw3e successfully removed'"
            },
            "isSuccess": true,
            "error": null,
            "traceIdentifier": "[80021597-0001-cd00-b63f-84710c7967bb:0005:/api/NasFile/RemoveInvestmentOption]"
          }
        ]
      }
    ],
    "e1528f6b-1ff6-4605-af15-4234b2fbccf2": [
      {
        "cursor": {
          "ref": "e1528f6b-1ff6-4605-af15-4234b2fbccf2",
          "length": 16,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0672f6f6-7e3b-4d54-86b5-8d0baffac12c",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "63e6a818-4b74-4cc1-b3be-48eb08afc67f"
        },
        "level": "log",
        "messages": [
          "No of Investments options records:81"
        ]
      }
    ],
    "90b16e08-7683-46b1-8b69-275d524ce8a5": [
      {
        "cursor": {
          "ref": "90b16e08-7683-46b1-8b69-275d524ce8a5",
          "length": 16,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "be95a67f-cf86-4c83-baba-0d64743e3aea",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "10ed7f31-35ad-4ec5-99f8-8619639dcadc"
        },
        "level": "log",
        "messages": [
          "Nas Fund ID LGGBCY matched."
        ]
      },
      {
        "cursor": {
          "ref": "90b16e08-7683-46b1-8b69-275d524ce8a5",
          "length": 16,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "be95a67f-cf86-4c83-baba-0d64743e3aea",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "10ed7f31-35ad-4ec5-99f8-8619639dcadc"
        },
        "level": "log",
        "messages": [
          "Exclude from UP file false found and valid."
        ]
      },
      {
        "cursor": {
          "ref": "90b16e08-7683-46b1-8b69-275d524ce8a5",
          "length": 16,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "be95a67f-cf86-4c83-baba-0d64743e3aea",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "10ed7f31-35ad-4ec5-99f8-8619639dcadc"
        },
        "level": "log",
        "messages": [
          "Fund Id displayed is: GBCYC1"
        ]
      },
      {
        "cursor": {
          "ref": "90b16e08-7683-46b1-8b69-275d524ce8a5",
          "length": 16,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "be95a67f-cf86-4c83-baba-0d64743e3aea",
          "scriptId": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
          "execution": "10ed7f31-35ad-4ec5-99f8-8619639dcadc"
        },
        "level": "log",
        "messages": [
          "Fund Title displayed is: CITY DB OPRTIONAL RISK RESRVE"
        ]
      }
    ]
  }
}