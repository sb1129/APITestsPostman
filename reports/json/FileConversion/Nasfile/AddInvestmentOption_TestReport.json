{
  "collection": {
    "_": {
      "postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01"
    },
    "item": [
      {
        "id": "72d86e12-8e23-44fc-9d05-16755edb06d9",
        "name": "CCM",
        "item": [
          {
            "_": {
              "postman_isSubFolder": true
            },
            "id": "7a73dde5-805c-494e-89da-edc6d0ae0c29",
            "name": "SwiftEvents",
            "item": [
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "4325abfe-549a-4a60-851a-35c1f9a50d7c",
                "name": "PullDataFromCsvFiles",
                "item": [
                  {
                    "id": "86350292-4b48-443a-a969-d4717af11bcb",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b86d8c6-6ea2-4e72-b8cd-a119f0a46132",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a275b3f7-fd38-4a05-af08-1795250590f6",
                    "name": "Username and Pasword incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8df114-c56a-41fb-9d5d-0b70e557c87e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff68b412-e1c8-4f3d-b7f7-b44bf1c0a703",
                    "name": "Username and Pasword locked ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8df114-c56a-41fb-9d5d-0b70e557c87e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Account Locked\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ce8d1a-090c-4758-8cbc-63fdbf148087",
                    "name": "Username and Pasword new account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8df114-c56a-41fb-9d5d-0b70e557c87e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05837ed-f13b-4561-994c-aaafb9e29d27",
                    "name": "Username and Pasword insufficient privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8df114-c56a-41fb-9d5d-0b70e557c87e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8a2857-d99b-4f77-ab21-1ff50b65ba87",
                    "name": "Valid test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "PullDataFromCsvFiles"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8df114-c56a-41fb-9d5d-0b70e557c87e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('PullDataFromCsvFiles[SUCCESS]');",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "6faf7c37-44ca-4fc6-b5f2-19360d65b314",
                "name": "SyncSwiftEventsToSfCampaigns",
                "item": [
                  {
                    "id": "3a9a49b6-a2ca-49b9-9776-8131b4686b43",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae968b6-696c-4cb1-ac84-73481e6f6031",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5bce08-251b-4f4c-b18f-6ba957ed38bb",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "401184fd-2474-4873-9bce-6de151a942c9",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74313d9-12fe-4eaf-b257-fbeea52864bc",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da077c8-8135-4580-ad04-16c46615eeac",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncSwiftEventsToSfCampaigns"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncSwiftEventsToSfCampaigns[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "206545fe-5cc7-4cdc-bcd4-e1062a8638ea",
                "name": "SyncOpportunitiesOrLeads",
                "item": [
                  {
                    "id": "c0ec68ef-2111-4a83-905a-308c286c8749",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f689046-5b68-4909-b087-7fdd941703bb",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "93da6497-e7e3-4e1a-90f0-a1a45e1e4399",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "43bc71f1-7c0a-4397-92b4-46cc1cc13577",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc37ba8-bc37-425a-b6fa-348df7f3c684",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6828c9e-286d-4a10-ba98-f4f921b2f6a5",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncOpportunitiesOrLeads"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncOpportunitiesOrLeads[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d193a0d0-8271-486a-8c4e-3e2dd0c243b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87999d85-669a-4b55-a1b8-da367666d2fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "f691ee0d-aa92-462c-8d8a-b1d2ddf3b915",
                "name": "SyncRegistrantStatuses",
                "item": [
                  {
                    "id": "a8ec92d6-7086-448c-a076-2e06ce80ac77",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbcace4-3c3b-4217-a9ed-10c5ad5e93b2",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8294ad8-502f-4897-988f-d5499dc66636",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cccbea-e404-4ee4-82fe-b27e199f2904",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c7def5-3a68-4b3c-a8ad-7174af56e146",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a24d16-cfc3-4775-9525-db2bb5555357",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "SyncRegistrantStatuses"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.messages[0]).to.equal('SyncRegistrantStatuses[SUCCESS]');",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "2d99733b-ea5a-4ce3-93e9-3fde4512f47a",
                "name": "AddConfirmationInteractions",
                "item": [
                  {
                    "id": "a19de358-32f9-4acf-9749-451858566680",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Incorrect Username and Password\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaac3939-a0fd-41e3-b34b-6078cb554bde",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "21258c54-f4ad-45e6-b039-3bfaf70bb8a3",
                    "name": "Valid Test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Valid Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "        const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.recordId).to.eql(0);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd580f2-29d9-457e-adf3-e7889dbcbc42",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Locked User\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb16b36-5e02-434e-b0fa-d34fd40fb12a",
                    "name": "New Account",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"New Account\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f535139e-787d-4d76-bcaa-1989048a43bb",
                    "name": "Insufficient Privileges",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftEvents",
                          "AddConfirmationInteractions"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c2be3-522a-4bf3-9692-d91ca614a209",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.test(\"Insufficient Privileges\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "protocolProfileBehavior": {}
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c739edba-146e-46e1-9f96-9cf38f583a4c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cb60f76c-d25d-4e7b-9a1f-02775075a459",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "protocolProfileBehavior": {}
          },
          {
            "_": {
              "postman_isSubFolder": true
            },
            "id": "9ad194e9-0eda-436c-947e-4747c4a5d783",
            "name": "Corresspondence",
            "item": [
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "a47e292a-c21e-41e6-94ec-79df7f50e029",
                "name": "SyncInteractionsFromEngageOne",
                "item": [
                  {
                    "id": "42dcc28d-a4fb-4977-b138-b7038c63daaf",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2a11df-7acd-4a6b-b4f3-92341724d5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth Test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc6921a-36f3-4ac5-b364-6e80ddf8284a",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20ca366-238d-4dbd-b4dc-9e1f9ad00040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e93c8e-076b-498b-bf50-fefb651c244e",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a55106-6b68-41f0-ab98-bbc15ca47bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User Test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "427c85c6-31fc-4674-82b0-2296d0c755fb",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c58189d-7865-44b6-b641-bc665737b3fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No roles assigned user Test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5669ec-a8da-4349-9b3d-d6b0ea0a2f13",
                    "name": "No Body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e31787-e67f-47fc-8796-9336a7c94b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Body Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"A non-empty request body is required.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d8cf60-0b8b-4c9e-8722-6710f8e20405",
                    "name": "Blank date",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\":\"\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38322c37-a4e7-42bc-ad17-aaaa603b9807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Blank date Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.false;",
                            "    pm.expect(data.messages[0]).to.include(\"String '' was not recognized as a valid DateTime.\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d880b5e4-b558-47ed-8e37-aebb2214f084",
                    "name": "Date not found",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1a518c-a240-476c-84dc-c3e40d911ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10c6119-0512-4953-9606-306f6a5ddf9b",
                    "name": "Invalid file format",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "Correspondence",
                          "SyncInteractionsFromEngageOne"
                        ],
                        "host": [
                          "{{ccm}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\t\"date\": \"2021-05-27\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae16395-7757-4841-ae46-8144358a34eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Date not found Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const data = pm.response.json();",
                            "    ",
                            "    pm.expect(data.recordId).to.eql(0);",
                            "    pm.expect(data.isSuccess).to.be.true;",
                            "    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "string",
                      "value": "{{bshree}}",
                      "key": "password"
                    },
                    {
                      "type": "string",
                      "value": "bshree",
                      "key": "username"
                    }
                  ]
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94b88229-218b-473b-a5ea-10c03f31d8ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4b4fa58-ef6d-40af-baee-c16e6e9a6e8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4c3bae07-edeb-4853-be62-eebc8250c55f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b1fe0628-9d8e-4f23-8a93-70770274ef14",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "protocolProfileBehavior": {}
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{bshree}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "bshree",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a42f94e4-18c6-44ee-a780-d0578a057482",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c89b425f-0052-44ef-a232-c5ce2b236116",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ],
        "protocolProfileBehavior": {}
      },
      {
        "id": "9f29b6e7-d7be-45f5-b9eb-36f5e0b5c1b5",
        "name": "EinsteinAnalyticsData",
        "item": [
          {
            "_": {
              "postman_isSubFolder": true
            },
            "id": "b8b869d7-235a-45be-a0a6-61b86f7dce4c",
            "name": "Einstein",
            "item": [
              {
                "id": "98eee68b-db84-4d7f-b6c7-36e4fe85401b",
                "name": "No auth test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "",
                        "pm.test(\"No auth test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84466f33-36dd-49ea-9ba2-bdafd57c1b48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "c28791b6-8429-46da-8afd-db47a07b9893",
                "name": "Blank stored proc test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "const jsonData = pm.response.json();",
                        "",
                        "pm.test(\"Blank stored proc test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                        "});"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "0c40dc34-e245-4be1-a746-055ed7e7445a",
                "name": "Invalid stored proc test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[usptionSFMemberAnalyticsFlat]\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "const jsonData = pm.response.json();",
                        "",
                        "pm.test(\"Invalid stored proc test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.messages[0]).to.equal(\"Could not find stored procedure 'wrk.usptionSFMemberAnalyticsFlat'. [wrk].[usptionSFMemberAnalyticsFlat]\");",
                        "});"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "64a10578-a080-4bcd-9a81-d4c210dad509",
                "name": "Unauthorised access test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "",
                        "pm.test(\"Unauthorised access test\", () => {",
                        "    pm.response.to.have.status(403);",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84466f33-36dd-49ea-9ba2-bdafd57c1b48",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "pm.environment.set(\"username\", \"shree\");",
                        "pm.environment.set(\"password\", \"shree\");"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "d227b000-ddfc-493e-9602-674f5f7ef070",
                "name": "Blank body test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n\t\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "const jsonData = pm.response.json();",
                        "",
                        "pm.test(\"Blank body test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
                        "});"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "18971bf0-6965-4e88-8cba-4e803424337c",
                "name": "Another valid stored proc test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAccountTransaction]\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "const jsonData = pm.response.json();",
                        "",
                        "pm.test(\"Another valid stored proc test\", () => {",
                        "    pm.response.to.have.status(500);",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.messages[0]).to.equal(\"Procedure or function 'uspIntegrationSFMemberAccountTransaction' expects parameter '@startDate', which was not supplied.\");",
                        "});"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "f10ef515-a6ff-401d-b53a-1127c370d795",
                "name": "Valid ExecuteSPEDWHerokuMembers test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "Einstein",
                      "ExecuteSPEDWHerokuMembers"
                    ],
                    "host": [
                      "{{einsteinanalyticsdata}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAnalyticsFlat]\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64d5de7-4e93-46df-9a29-173a0f839134",
                      "type": "text/javascript",
                      "exec": [
                        "const jsonData = pm.response.json();",
                        "",
                        "pm.test(\"Valid ExecuteSPEDWHerokuMembers request\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "});"
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bac567c6-000d-48cf-b9a6-247aeaaacf3a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9a3badf1-a6d6-4475-ae71-a48e63014570",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "protocolProfileBehavior": {}
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{bshree}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "bshree",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a39bae8c-50ff-486f-97d8-0bc3c849633c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07a20f7f-f477-4935-828b-d30f5d0f8bce",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ],
        "protocolProfileBehavior": {}
      },
      {
        "id": "2926f1e2-b122-4cb2-861c-7e55c2b7d1c8",
        "name": "FileConversion",
        "item": [
          {
            "_": {
              "postman_isSubFolder": true
            },
            "id": "2386755b-635f-44ce-9f86-ed70c8069cf4",
            "name": "NasFile",
            "item": [
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "01c5eac0-5cf2-4154-8f40-1cf70f5a3b4e",
                "name": "ListInFile",
                "item": [
                  {
                    "id": "0ddeaa3a-39c1-418f-b43b-6574b0542636",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"shree\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "951655df-dff6-4f57-93ca-7dd4e3e0af1f",
                    "name": "Username and Password not provided ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb57fead-0df9-43be-8c5e-24c3e12b53cf",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "3920ec18-2bfc-436c-b1c6-ce5e9548dfec",
                    "name": "valid list in files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "",
                        "options": {
                          "raw": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb3de75-2698-4923-abce-6d28d0171f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\in\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName+ \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2d41a0-3f08-4d0e-af3d-19184c817637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "543369e8-c979-4938-8d62-6916b227907f",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "82800b27-b845-4c88-8e60-f55a5bfa29cf",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListInFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "519b042c-60c0-4f92-9290-ec73e77f674f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d35db42c-cdcb-4a5e-98cc-33e60e119ebe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "fcf2dee4-e867-4df0-94cc-5717cbfa696f",
                "name": "ListOutFiles",
                "item": [
                  {
                    "id": "d7e16c7e-b0fc-4701-aa01-5c75ed8d7e90",
                    "name": "Username and Password new acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNewUser\");",
                            "pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "097984a4-701a-46e9-af4d-c032d9411b15",
                    "name": "Username and Password insufficient privileges acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestNoRolesUser\");",
                            "pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c5f654-0990-4e8f-a858-cb1477001619",
                    "name": "Username and Password locked acc",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"TestLockedUser\");",
                            "pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ced3046-5666-4110-b3c2-390904caa6d6",
                    "name": "Username and Password incorrect",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "pm.environment.set(\"username\", \"shree\");",
                            "pm.environment.set(\"password\", \"incorrect\");"
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf33df4e-6e6d-4037-a12b-3a6d2bd6cfd4",
                    "name": "Username and Password not provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFiles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b5df77-7ced-4ad2-89e2-b25321ca1cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6acb3d2-52b2-453e-bdc1-a3708695f05d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            "",
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c54244d-1661-4d6c-94e2-f7bf3d6df175",
                    "name": "valid list out files test",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "ListOutFIles"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "",
                        "options": {
                          "raw": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277f597c-6ee2-47ec-bc93-0cda16dbbd05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a537bc-f9f6-4579-9175-87dde8a656ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"valid list OUT files test\", () => {",
                            "    const jsonData = pm.response.json();",
                            "    pm.response.to.have.status(200);",
                            "    pm.expect(jsonData.response.directory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\nas_staging\\\\out_staging\");",
                            "    let length = jsonData.response.files.length;",
                            "   ",
                            "    if (length > 0) {",
                            "        console.log(jsonData.response.files.length + \" Files Returned\")",
                            "        for (var index = 0; index < length; index++)",
                            "        {",
                            "            ",
                            "            if (jsonData.response.files[index].fileSizeBytes === 0) ",
                            "            {",
                            "                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
                            "            {",
                            "                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            ",
                            "            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
                            "            {",
                            "                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
                            "            {",
                            "                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
                            "            }",
                            "        }",
                            "    }",
                            "    if (length === 0) ",
                            "    {",
                            "         console.log(jsonData.response.files.length + \" Files Exists\")",
                            "    }",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66a8236c-a43b-418d-94c8-3758585f7704",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4598a5a-6228-44da-9506-9e7ce396eee8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "16fdcc53-e637-43ae-9b01-6cf40b9f3336",
                "name": "AddInvestmentOption",
                "item": [
                  {
                    "id": "f25f74c1-e886-46ad-b1ca-c61692c5db2d",
                    "name": "Only Fund Name is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundName\": \"ABCD\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Fund Name is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ],
                          "_lastExecutionId": "ec3625c7-af02-41a9-9ac4-b41abcc54545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf0489a-d4b4-4c38-9d09-f00eaf475dc5",
                    "name": " Only Nas Fund Id is provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"nasFundId\": \"QL81\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When Only Nas Fund Id is provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ],
                          "_lastExecutionId": "2fff32dd-5a9a-4c19-87a4-a7bde7707a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55679a3a-a5ff-4c6f-b3aa-00d665114e06",
                    "name": "Only Fund ID provided",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"fundId\": \"QL81C1\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"When only Fund ID provided test\", () => {",
                            "",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Name should not be empty\");",
                            "});"
                          ],
                          "_lastExecutionId": "9bae74cd-9ec8-4b3e-8319-8cb4e59a5c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615529cd-54fe-4e33-a679-216b56fd1a06",
                    "name": "Duplicate Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL82C1\",\r\n  \"fundName\": \"New CITY DB OPRTIONAL RISK RESRVE\",\r\n  \"nasFundId\": \"QL81C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Nas Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ],
                          "_lastExecutionId": "ec30f9c1-26fd-4926-9534-b2abfd23109c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07e1172-68d5-4176-ba30-5cb5cf7e0e4f",
                    "name": "Incorrect Username and Password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "user",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "user",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be5318a-6b15-4740-963d-a16682c5c56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c8d850a-eb1c-4ae5-870e-cce23cf968c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f7f9e8-5a5d-4fcb-8cd9-737b81137f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect Username and Password test\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ],
                          "_lastExecutionId": "c3cb5101-5feb-4160-8224-cda095f79428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdfd0a2-559b-49a3-930b-e0af0e2c0da4",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ],
                          "_lastExecutionId": "4493751a-3f20-482b-8e42-228b36dda54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90de2873-6d5d-41de-924e-0c39dd1c38b2",
                    "name": "Invalid characters in Nas Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"@#@{{randomId}}@#@#\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ],
                          "_lastExecutionId": "d916ef89-ff39-4455-8dc2-ec822472c789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff7fc8d-373f-4422-bbf2-d5d3c3a295b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db6a020-ce5e-4796-b0d5-7e65b5ffbb58",
                    "name": "Duplicate Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"QL81\",\r\n  \"excludeFromUPFile\":false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund ID test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                            "",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "});"
                          ],
                          "_lastExecutionId": "ee2b957a-6d53-4d91-8290-6facdc0064a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9058ea8-2642-4941-b720-6d1c2c967b43",
                    "name": "User with no access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be5318a-6b15-4740-963d-a16682c5c56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47839390-3d26-42dd-b0e2-cc5d699dece4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f7f9e8-5a5d-4fcb-8cd9-737b81137f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"User with no access\", ()=>{",
                            "    pm.response.to.have.status(403);",
                            "   ",
                            "})"
                          ],
                          "_lastExecutionId": "cfe09344-f997-4e4f-be69-69dc0f5d0cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a134b100-2842-4945-adae-75725d5e818b",
                    "name": "User locked",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be5318a-6b15-4740-963d-a16682c5c56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3166f5a-0652-4b84-b3bf-71245948687f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f7f9e8-5a5d-4fcb-8cd9-737b81137f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Locked user\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ],
                          "_lastExecutionId": "9e4080c7-eebf-409b-aa65-aea3da8e67ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dc4cbe-c33f-4525-a829-36454785d447",
                    "name": "Invalid characters in Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"$@#${{FundName}}#$#$#\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund Name test\", () => {",
                            "   console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        ",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c610fc8a-721f-4018-9eb1-039de0362471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f4bf1e9-238b-4d9b-ad93-54f1fcbadc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a2a31e-9df6-4d0b-8cf8-423439a90443",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be5318a-6b15-4740-963d-a16682c5c56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169a1c9d-4466-4ef3-bf2a-3a0ce3d908c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f7f9e8-5a5d-4fcb-8cd9-737b81137f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"New User\", ()=>{",
                            "    pm.response.to.have.status(401);",
                            "   ",
                            "})"
                          ],
                          "_lastExecutionId": "835ffdb9-008f-4b8a-a07d-82d614903854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24a9bd5-2923-4a69-b57d-5c8644bbf28f",
                    "name": "Empty Request body",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty Request body test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ],
                          "_lastExecutionId": "8c682bb7-d82e-4a50-a0a6-65e528a396cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b958e46-51a5-4585-aa9d-51a58ceb2083",
                    "name": "Empty input fields",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"\",\r\n  \"fundName\": \"\",\r\n  \"nasFundId\": \"\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Empty input fields test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                            "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                            "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                            "});"
                          ],
                          "_lastExecutionId": "91bf918b-ec90-4c27-97ed-cc2fab4f5639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebef7099-65d6-4ea0-8e59-ae279293f579",
                    "name": "Invalid characters in Fund ID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"%%{{randomId}}#$\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Invalid characters in Fund ID test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ],
                          "_lastExecutionId": "4e4d54e4-6e0d-4aab-ac72-9573e56a9f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c840d1af-e350-4025-8c4c-2996d830acd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10dcd7b0-010e-4da8-929a-28ecf44fee7e",
                    "name": "Valid all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All valid parameters test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "    //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69b23481-c079-4b9e-9df0-375eb7421d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfab4279-8e8e-42b9-bf38-0612d71f37a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e3462b-dc56-4e3a-b235-15aff581342d",
                    "name": "Duplicate all",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"LG AGGRESSIVE ACCUM OPTION\",\r\n  \"nasFundId\": \"LG18C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"All parameters Duplicate test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    ",
                            "    pm.expect(jsonData.response[0]).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Correct message validated: \" + jsonData.response[0]);",
                            "    ",
                            "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                            "    console.log(\"Test completed\");",
                            "",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ],
                          "_lastExecutionId": "288a968e-5146-4080-8a13-2c26f8d4b691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a405d597-479b-491b-aade-052c0c3286d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717f0ff5-0d57-40b9-8bfa-f4bcf4b0844b",
                    "name": "Duplciate Fund Name",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "AddInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n   \"excludeFromUpFile\": false\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    var random = pm.environment.get(\"randomId\");",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                            "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                            "    ",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    console.log(\"Test completed\");",
                            "    ",
                            "  ",
                            "",
                            "});",
                            "",
                            "    ",
                            ""
                          ],
                          "_lastExecutionId": "073eb455-f8dc-46b4-9daf-c075a3c82183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e11abe3-70ff-47e9-b209-4c0ca5bd0d2d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf979d09-feed-48e0-849e-fc3b31b91d19",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ],
                      "_lastExecutionId": "d8140de1-3e94-4b53-991a-74f102d4ce1b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a7d2c2d-0bc3-4518-a596-ddb972782385",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72124cfc-3235-490d-9c84-e0624144a206"
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "d0027454-6c89-4c8f-b25b-7f00abfb06ad",
                "name": "DisplayInvestmentOption",
                "item": [
                  {
                    "id": "c5b0ed2a-26a4-424a-adab-653aaefcecba",
                    "name": "End  to end test - exclude from up file true",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(true)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a27690a-c636-46c6-925b-065ee8e1ab4c",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: true",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9202b77-a848-4e5e-aa2c-176a4513c8b1",
                    "name": "Valid  FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Nas Fund Id displayed is: \" + jsonData.response.investmentOptions[0].nasFundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fd3365-5f5b-40cf-a7bb-1925e614d095",
                    "name": "Valid NasFundID and FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundId",
                            "value": "LGGBCY"
                          },
                          {
                            "key": "fundId",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
                            "    {",
                            "        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
                            "    }",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundId\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundId\")) + \" matched.\");",
                            "    }",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "edab00a6-d671-4a4b-8555-efdd4beb3a99",
                    "name": "Non-existing FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece01842-fd1d-4500-94c1-71fd64649201",
                    "name": "User with No Roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2cf1a6-d203-491f-b499-045e6bd6f47c",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e340b7e2-fe70-4b10-a553-0c70136fe43d",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "GBCYC1"
                          },
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c04d10-272d-42bf-a4e3-b81b1ced4ec4",
                    "name": "Incorrect username and password ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "incorrecty",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "incorrect",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd798efa-92d6-4ada-bc52-540d6b0d1b63",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0421d8-adaf-4e34-bf44-5c9eead48e04",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "bTiNIh"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d468c78-a183-495b-9a20-a646b0936ba4",
                    "name": "End  to end test - exclude from up file false",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Display Investment options - End to End Test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "   //Delete the created record - ",
                            "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                            "    {",
                            "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                            "        const delRequest = {",
                            "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                            "        method: 'DELETE',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        }};",
                            "        pm.sendRequest(delRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                            "        });",
                            "    }",
                            "   ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a27690a-c636-46c6-925b-065ee8e1ab4c",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\"),",
                            "                    excludeFromUpFile: false",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d4893a-c1da-4acd-b991-715f5e346da7",
                    "name": "Blank Parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": ""
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const length = pm.response.json().response.investmentOptions.length;",
                            "    console.log(\"No of Investments options records:\" + length);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e564962-9cca-407f-9cf1-4b6af82b90e3",
                    "name": "Non-existing NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": ""
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "20545bea-864f-48f2-b180-2e22afd38697",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "e016c6c0-a7c6-4bb0-ba71-85045b14815e",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "GBCYC1"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"No records found\");",
                            "    pm.expect(jsonData.response.investmentOptions).to.be.null;",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "7011d1e0-6185-468d-b55b-629ec094b340",
                    "name": "Valid  NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "DisplayInvestmentOptions"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "LGGBCY"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "accept",
                          "value": "text/plain"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb1012-dbea-413c-862b-7b8b5f63f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    ",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.be.null;",
                            "    ",
                            "    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
                            "    {",
                            "        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
                            "    }",
                            "      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
                            "    {",
                            "        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
                            "    }",
                            "    ",
                            "    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
                            "    ",
                            "    ",
                            "    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
                            "    ",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "   ",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a04eaaf5-3571-4ae3-9221-5f2df0ce2147",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3929f0d9-b10a-4f14-9160-c880bbd3dfe7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "9d223533-c626-4dcc-90cc-c13ec3eece15",
                "name": "RemoveInvestmentOption",
                "item": [
                  {
                    "id": "5e74f346-5081-45f1-824f-5d52f2515726",
                    "name": "No auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "905e893f-16b1-40df-a936-503cc1bf4555",
                    "name": "Incorrect username and password",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f8e7d5-4f89-4f20-af8e-a5e4026891c0",
                    "name": "Locked user",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da11df9-f76b-4c8c-bfd3-28f7ecea0a43",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d21be59e-bbea-4b75-aeb6-8b2e00af640b",
                    "name": "User with No roles",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "    ",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "6039288a-844d-4cba-bece-37d0a3475331",
                    "name": "Blank parameters",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": null
                          },
                          {
                            "key": "nasFundID",
                            "value": null
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response[0]).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "    pm.expect(jsonData.response[1]).to.include(\"FundId should be provided if NasFundId is empty\");",
                            "    pm.expect(jsonData.response[2]).to.include(\"NasFundId should be provided if FundId is empty\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"Fund Id or Nas Fund Id is required\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17e80e6-e13e-4a63-8736-7732e6c85ac1",
                    "name": "Non-existing FundID ",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "bTiNIh"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66413ea-3a01-4fa0-8cdd-20280f803c3b",
                    "name": "Non-existing Nas FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "899b9172-5cef-40a6-99db-6cc8c63a50e0",
                    "name": "Non-existing both",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{random}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{random}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc3bed2-7c94-49ba-8dfd-134a2bf33a26",
                    "name": "Valid FundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId =  successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bb7a6c-e81f-42f1-99e1-19e702d3cbe7",
                    "name": "Valid NasFundID and Invalid FundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16dca52-062a-4154-b0b5-f43c6e525232",
                    "name": "Valid FundId and NasFundId",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "fundID",
                            "value": "{{randomId}}"
                          },
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6940e54-03c9-4f5c-967e-55c674dc041e",
                    "name": "Valid NasFundID only",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "{{randomId}}"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                            "    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = , nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            "const postRequest = {",
                            "        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
                            "        method: 'POST',",
                            "        header: {",
                            "            'accept': 'text/plain',",
                            "            'content-Type': 'application/json',",
                            "            'authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                            "        },",
                            "        body: {",
                            "            mode: 'application/json',",
                            "              raw: JSON.stringify(",
                            "                {",
                            "                    fundId: pm.environment.get(\"randomId\"),",
                            "                    fundName: pm.environment.get(\"FundName\"),",
                            "                    nasFundId: pm.environment.get(\"randomId\")",
                            "                })",
                            "            }",
                            "        };",
                            "",
                            "        pm.sendRequest(postRequest, (error, response) => {",
                            "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
                            "        console.log(pm.environment.get(\"randomId\"));",
                            "        });",
                            "",
                            "",
                            ""
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f3dd62-bc75-4a82-8678-8e2d334130b3",
                    "name": "Valid FundID and Invalid NasFundID",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "NasFile",
                          "RemoveInvestmentOption"
                        ],
                        "host": [
                          "{{fileconversion}}"
                        ],
                        "query": [
                          {
                            "key": "nasFundID",
                            "value": "%%{{randomId}}"
                          },
                          {
                            "key": "fundID",
                            "value": "7YF5Kc"
                          }
                        ],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {
                        "mode": "formdata",
                        "formdata": [],
                        "options": {
                          "formdata": {}
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4a8d3-37df-4bb6-bdf6-a6736db66c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Duplicate Fund Name test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                            "    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
                            "    pm.expect(jsonData.isSuccess).to.be.false;",
                            "    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
                            "});"
                          ]
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c221e-1116-4f1d-aa63-5731f18920b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61ee8ffa-a86a-4daf-96b6-dda09b15e0e6",
                      "type": "text/javascript",
                      "exec": [
                        "var random = makeid(6);",
                        "pm.environment.set(\"randomId\", random);",
                        "",
                        "pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
                        "",
                        "function makeid(length) {",
                        "    var result           = [];",
                        "    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
                        "    var charactersLength = characters.length;",
                        "    for ( var i = 0; i < length; i++ ) {",
                        "      result.push(characters.charAt(Math.floor(Math.random() * ",
                        " charactersLength)));",
                        "   }",
                        "   return result.join('');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbbcbae3-5464-4f11-a539-556a90895730",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "protocolProfileBehavior": {}
              }
            ],
            "event": [],
            "protocolProfileBehavior": {}
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{bshree}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "bshree",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed5b4cf4-de8d-4ab0-b563-ee6d13a9bff9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "340e0f0d-ce77-4cf0-8829-bd7d13513201"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "131d9765-4c1d-4521-a66d-38eb1755e8eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2dd915aa-f6ca-4783-a9d3-c90272e38ee8"
            }
          }
        ],
        "protocolProfileBehavior": {}
      },
      {
        "id": "e105aee3-3714-469e-aea8-d5658d6ec386",
        "name": "Swift",
        "item": [
          {
            "_": {
              "postman_isSubFolder": true
            },
            "id": "38e52889-1a64-48f7-b04d-19dc17844bbd",
            "name": "SwiftFolderConfiguration",
            "item": [
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "754e7d82-ba0d-42d0-a457-f61a2fe59ec9",
                "name": "Addfolder",
                "item": [
                  {
                    "id": "5fc08572-d29d-457c-bbc6-304b6c101291",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "07901e3f-3910-47c4-8b51-77ab615318eb",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "43dcd120-a9be-4828-b18d-80225c4d718c",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "5b842ded-998a-4340-9565-1ac875d51141",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "b7f470e4-2243-49ef-9ccf-1ec408719525",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "AddFolder"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {
                        "mode": "raw",
                        "raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5278e2c4-296c-4db1-965c-4a5deffa3e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(405);",
                            "});"
                          ]
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": [],
                "protocolProfileBehavior": {}
              },
              {
                "_": {
                  "postman_isSubFolder": true
                },
                "id": "ee2b3752-330c-4f5b-8141-8043480ac47d",
                "name": "Listfolders",
                "item": [
                  {
                    "id": "649c2ff1-079c-47e7-ac1f-dce403b4afdb",
                    "name": "No Auth",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"No Auth test\", () => {",
                            "    pm.response.to.have.status(400);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "56278824-9dcc-4329-a63f-3941a0d7551f",
                    "name": "Locked User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{LockedPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{LockedUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c854ca-2c54-4c6c-8c1f-1d8a3c677366",
                    "name": "Incorrect Details",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "shree",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "61734263-48a2-44c9-b2c8-2c16ba21afb7",
                    "name": "New User",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NewPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NewUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(401);",
                            "",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e3a1d6-839e-40ac-8119-6bbf70a2cea0",
                    "name": "No access",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "auth": {
                        "type": "basic",
                        "basic": [
                          {
                            "type": "string",
                            "value": "{{NoRolesPassword}}",
                            "key": "password"
                          },
                          {
                            "type": "string",
                            "value": "{{NoRolesUser}}",
                            "key": "username"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5278e2c4-296c-4db1-965c-4a5deffa3e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(403);",
                            "});"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "id": "57269f19-644d-4c08-9b02-ceaa20510474",
                    "name": "Valid list",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "SwiftFolderConfiguration",
                          "ListFolders"
                        ],
                        "host": [
                          "{{swift}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6923622-eb8a-41ff-8f83-6a7a42f6259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Incorrect user details test\", () => {",
                            "    pm.response.to.have.status(200);",
                            "    ",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.isSuccess).to.be.true;",
                            "    pm.expect(jsonData.error).to.be.null;",
                            "    ",
                            "    const numberOfRecords = jsonData.response.swiftFolderConfigurations.length;",
                            "    ",
                            "    console.log(\"Number of Records:\", numberOfRecords);",
                            "});"
                          ]
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "protocolProfileBehavior": {}
              }
            ],
            "event": [],
            "protocolProfileBehavior": {}
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{bshree}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "bshree",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fde1ab87-9239-4b9b-9e48-a06517cdb080",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b4ac04d-6d72-47a8-a692-5dfd25f4714b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ],
        "protocolProfileBehavior": {}
      },
      {
        "id": "cef722d9-8a5d-46ba-9ddd-697d745dde2b",
        "name": "RingCentral",
        "item": [
          {
            "_": {
              "postman_isSubFolder": true
            },
            "id": "603cc666-92f2-4f99-b4ad-88ccde5c84eb",
            "name": "SyncCompanyCallLogs",
            "item": [
              {
                "id": "b3849782-9802-42a5-8926-92dfbfdfd8b8",
                "name": "Date time exact value with time zone ",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-07-12T14:10:26.2410000+10:00\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Date time exact value with time zone Test \", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "ee7e662c-b303-40c7-9a79-d9587d0eb733",
                "name": "Delta sync",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Delta sync Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + pm.collectionVariables.get(\"todaysDate\") +\"T00:00:00.0000000\");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "f76124f5-0489-4ced-87eb-5d20b5ca4b18",
                "name": "No auth",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "noauth",
                    "noauth": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50e1913f-81f4-47bb-9c35-af3c9ea3ade8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No Auth test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "de1e6e0d-c2c5-448e-9ffb-96fc4799c4a9",
                "name": "Incorrect account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "shree",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "shree",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3ef6003-d25d-483f-8794-e2bc03215f0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Incorrect account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "a2a88181-f18f-49ab-9fc6-a078fb362939",
                "name": "Hours ago",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Hours ago Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "d2d5c323-285f-4a99-a0fd-208f88cd83c0",
                "name": "Locked account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{LockedPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{LockedUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd7344c6-8545-4ee3-9463-69ea597b61f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Locked account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "2be8d88c-721e-4073-9830-8e63ccfcb975",
                "name": "New account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NewPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NewUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c31dfbef-93f3-4024-8db3-7d9b4ad0ce81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"New account test\", () => {",
                        "    pm.response.to.have.status(401);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "58f7a159-9e5b-44a2-bb97-826f4ae2e9bb",
                "name": "Sync all logs",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Sync All logs Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "217f145a-c793-4f72-8ef0-bd133488b564",
                "name": "No access account",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "basic",
                    "basic": [
                      {
                        "type": "string",
                        "value": "{{NoRolesPassword}}",
                        "key": "password"
                      },
                      {
                        "type": "string",
                        "value": "{{NoRolesUser}}",
                        "key": "username"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"No access account test\", () => {",
                        "    pm.response.to.have.status(403);",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "e4a4779c-da45-42cc-9f0e-056ae26210ee",
                "name": "Blank body",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank body test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"A non-empty request body is required.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "0b8d6c30-85a6-4cbb-a31b-943218700c1b",
                "name": "Negative pagelimit",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": -100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"negative page limit Test\", () => {",
                        "    pm.response.to.have.status(500);",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"An unknown error occurred. Please contact support with the trace identifier included in this response\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.not.be.empty;",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "245a62d9-5624-4fd4-8b4e-a0e05cbbffbb",
                "name": "Blank date from",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank date field test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 16.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "436d43dc-3f16-4bd7-891b-12d8b877d79a",
                "name": "Blank date hour",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": ,\r\n  \"pageSize\": 100\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank hours test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"',' is an invalid start of a value. Path: $.hours | LineNumber: 2 | BytePositionInLine: 11.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "abbef792-c911-474b-9d16-fafe03bae490",
                "name": "Negative hours",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": -24,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Negative Hours Test\", () => {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "   const requestBody  = JSON.parse(pm.request.body);",
                        "   const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
                        "    pm.expect(jsonData.isSuccess).to.be.true;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              },
              {
                "id": "3d4203b6-b008-4a33-ad2e-41592d1145fc",
                "name": "Blank date pagesize",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": \r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Blank pagesize field Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    ",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response[0]).to.eql(\"'}' is an invalid start of a value. Path: $.pageSize | LineNumber: 4 | BytePositionInLine: 0.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  }
                ]
              },
              {
                "id": "f719fe1b-d821-4866-9bda-8d79f93d47ca",
                "name": "Invalid Date From",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "CallLog",
                      "SyncCompanyCallLogs"
                    ],
                    "host": [
                      "{{ringcentral}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"dateFrom\": \"12-07-2021\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89f6c9b-c523-4b3e-8462-ac93e0c77209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Invalid Date from Test\", () => {",
                        "    pm.response.to.have.status(400);",
                        "    ",
                        "    const requestBody  = JSON.parse(pm.request.body);",
                        "      const jsonData = pm.response.json();",
                        "    pm.expect(jsonData.response).to.include(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 26.\");",
                        "    pm.expect(jsonData.isSuccess).to.be.false;",
                        "    pm.expect(jsonData.error).to.be.null;",
                        "",
                        "})"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e36065e1-1d29-4d9e-98fa-d8a1dbf0a322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b3c06c5-cd6c-45e0-ae2a-abb71ba41426",
                  "type": "text/javascript",
                  "exec": [
                    "const moment = require('moment');",
                    "pm.collectionVariables.set(\"todaysDate\", moment().format(\"YYYY-MM-DD\"));",
                    "",
                    "pm.collectionVariables.set(\"todayiso\", moment().format(\"YYYY-MM-DDTHH:MM:SSZ\"));"
                  ]
                }
              }
            ],
            "protocolProfileBehavior": {}
          }
        ],
        "auth": {
          "type": "basic",
          "basic": [
            {
              "type": "string",
              "value": "{{bshree}}",
              "key": "password"
            },
            {
              "type": "string",
              "value": "bshree",
              "key": "username"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bda65e00-097d-49ad-a712-96cb0f3b5214",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdcea0bb-4de7-4e8f-b1a8-e6329a19ac69",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ],
        "protocolProfileBehavior": {}
      }
    ],
    "auth": {
      "type": "basic",
      "basic": [
        {
          "type": "string",
          "value": "{{bshree}}",
          "key": "password"
        },
        {
          "type": "string",
          "value": "bshree",
          "key": "username"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "4469c3af-cec7-492c-b64c-b8d2d5485b74",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "ff3ba183-7bf1-40e0-b613-16cecc5e491a"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "93221e99-43be-4e2a-96a1-b92ab86ab911",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "2a63d227-b243-40e4-ad08-3ec3482943a9"
        }
      }
    ],
    "protocolProfileBehavior": {},
    "variable": [
      {
        "id": "8e0a1cba-ddd0-4bf6-aaec-1a14514584da",
        "type": "string",
        "value": "2021-07-14T09:07:42+10:00",
        "key": "todayiso"
      },
      {
        "id": "eea3f58e-b45a-46ef-b65f-5e300ddb6466",
        "type": "string",
        "value": "2021-07-14",
        "key": "todaysDate"
      },
      {
        "id": "2db97d47-33a4-4246-b3f4-77139bda046c",
        "type": "string",
        "value": "2021-07-24",
        "key": "futureDate"
      }
    ],
    "info": {
      "_postman_id": "e851ee2f-a760-4fde-a819-e5b9f0652b01",
      "name": "RegressionTests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2021-07-13T23:29:46.198Z",
      "postman_exported_using": "Postman/7.18.1"
    },
    "id": "00a98a20-0bb2-4b24-905e-a9cf2e1c1167",
    "name": "intg",
    "values": [
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/einsteinanalytics",
        "key": "einsteinanalyticsdata"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/fileconversion",
        "key": "fileconversion"
      },
      {
        "type": "any",
        "value": "shree",
        "key": "username"
      },
      {
        "type": "any",
        "value": "incorrect",
        "key": "password"
      },
      {
        "type": "any",
        "value": "TestLockedUser",
        "key": "LockedUser"
      },
      {
        "type": "any",
        "value": "shfq6-WNdzdnWseK",
        "key": "LockedPassword"
      },
      {
        "type": "any",
        "value": "TestNewUser",
        "key": "NewUser"
      },
      {
        "type": "any",
        "value": "btsWeW$zMmhJIjy",
        "key": "NewPassword"
      },
      {
        "type": "any",
        "value": "TestNoRolesUser",
        "key": "NoRolesUser"
      },
      {
        "type": "any",
        "value": "paKAxSI7FAoO52U",
        "key": "NoRolesPassword"
      },
      {
        "type": "any",
        "value": "LIpiH5",
        "key": "randomId"
      },
      {
        "type": "any",
        "value": "This is a new fund name for LIpiH5",
        "key": "FundName"
      },
      {
        "type": "any",
        "value": "00D1m0000008lFX!ARcAQDCdBUCN1z27ixKDs2.IVaT8TQtNqHa9PNE1HLyjsl8Xgx1Vd7apCciBpe517mK1gW.Tpsvb2kmSBlodoEnjn0p0YJKZ",
        "key": "SFToken"
      },
      {
        "type": "any",
        "value": "https://dv-mcro02.internal.lgsuper.org/ccm",
        "key": "ccm"
      },
      {
        "type": "any",
        "value": "ehUs$9697fWC-JyL!K",
        "key": "bshree"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/swift",
        "key": "swift"
      },
      {
        "type": "any",
        "value": "YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
        "key": "AuthKey"
      },
      {
        "type": "any",
        "value": "https://intg-mcro.internal.lgsuper.org/ringcentral",
        "key": "ringcentral"
      }
    ]
  },
  "globals": {
    "id": "04960289-c179-44bc-85fd-3a47b068de28",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 136,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 22,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 72,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 64,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 56.36363636363637,
      "responseMin": 13,
      "responseMax": 326,
      "responseSd": 75.32930460472475,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1626225464964,
      "completed": 1626225483180
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 18,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f8007068-2b93-4dd1-bf95-27bd21a338dd",
          "httpRequestId": "51c59646-bd1f-4455-911f-2940878392c0"
        },
        "item": {
          "id": "f25f74c1-e886-46ad-b1ca-c61692c5db2d",
          "name": "Only Fund Name is provided",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundName\": \"ABCD\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"When Only Fund Name is provided test\", () => {",
                  "",
                  "    pm.response.to.have.status(400);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                  "    pm.expect(jsonData.isSuccess).to.be.false;",
                  "",
                  "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                  "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                  "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                  "});"
                ],
                "_lastExecutionId": "ec3625c7-af02-41a9-9ac4-b41abcc54545"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "743953ad-9a72-4a21-98c0-4e4533d62068",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "26",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"fundName\": \"ABCD\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "1ba508be-ef2d-4b2d-97c0-1935fc1f7774",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:45 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              91,
              34,
              70,
              117,
              110,
              100,
              32,
              73,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              44,
              34,
              78,
              97,
              115,
              32,
              70,
              117,
              110,
              100,
              32,
              73,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              93,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              70,
              117,
              110,
              100,
              32,
              73,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              55,
              57,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              51,
              48,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              65,
              100,
              100,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 122,
          "responseSize": 252
        },
        "id": "f25f74c1-e886-46ad-b1ca-c61692c5db2d",
        "assertions": [
          {
            "assertion": "When Only Fund Name is provided test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "97ffb0bc-0d41-46f6-a544-46a4cd9083d4",
          "length": 18,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5be9867a-4745-496d-b3c6-9d204337d041"
        },
        "item": {
          "id": "6bf0489a-d4b4-4c38-9d09-f00eaf475dc5",
          "name": " Only Nas Fund Id is provided",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"nasFundId\": \"QL81\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"When Only Nas Fund Id is provided test\", () => {",
                  "",
                  "    pm.response.to.have.status(400);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                  "    pm.expect(jsonData.isSuccess).to.be.false;",
                  "",
                  "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                  "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                  "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                  "});"
                ],
                "_lastExecutionId": "2fff32dd-5a9a-4c19-87a4-a7bde7707a79"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "43a1148e-3e16-4a37-9de3-93bfbef53dd4",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "27",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"nasFundId\": \"QL81\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "ec428161-5c85-4e85-a2f5-a1e338fe6286",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:47 GMT"
            },
            {
              "key": "Content-Length",
              "value": "250"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              91,
              34,
              70,
              117,
              110,
              100,
              32,
              73,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              44,
              34,
              70,
              117,
              110,
              100,
              32,
              78,
              97,
              109,
              101,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              93,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              70,
              117,
              110,
              100,
              32,
              73,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              55,
              97,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              51,
              48,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              65,
              100,
              100,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 18,
          "responseSize": 250
        },
        "id": "6bf0489a-d4b4-4c38-9d09-f00eaf475dc5",
        "assertions": [
          {
            "assertion": "When Only Nas Fund Id is provided test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c9f4390e-01c4-4b80-8a77-28a88d8cb64c",
          "length": 18,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e7428258-3320-4cb1-a836-47e7d649397f"
        },
        "item": {
          "id": "55679a3a-a5ff-4c6f-b3aa-00d665114e06",
          "name": "Only Fund ID provided",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fundId\": \"QL81C1\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"When only Fund ID provided test\", () => {",
                  "",
                  "    pm.response.to.have.status(400);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                  "    pm.expect(jsonData.isSuccess).to.be.false;",
                  "",
                  "    pm.expect(jsonData.response[0]).to.eql(\"Fund Name should not be empty\");",
                  "    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
                  "    pm.expect(jsonData.error).to.include(\"Fund Name should not be empty\");",
                  "});"
                ],
                "_lastExecutionId": "9bae74cd-9ec8-4b3e-8319-8cb4e59a5c41"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "daed442a-dea6-46be-b61f-e6ef64b46945",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "24",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"fundId\": \"QL81C1\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "7c34ed5c-dfbe-473b-92d1-89e6b1a2b843",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:47 GMT"
            },
            {
              "key": "Content-Length",
              "value": "256"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              91,
              34,
              70,
              117,
              110,
              100,
              32,
              78,
              97,
              109,
              101,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              44,
              34,
              78,
              97,
              115,
              32,
              70,
              117,
              110,
              100,
              32,
              73,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              93,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              70,
              117,
              110,
              100,
              32,
              78,
              97,
              109,
              101,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              55,
              98,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              51,
              50,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              65,
              100,
              100,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 18,
          "responseSize": 256
        },
        "id": "55679a3a-a5ff-4c6f-b3aa-00d665114e06",
        "assertions": [
          {
            "assertion": "When only Fund ID provided test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ad00d709-aaa6-43a7-a587-363f3a137996",
          "length": 18,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "398b9890-c5ad-4023-90b7-aeabd680b1bf"
        },
        "item": {
          "id": "615529cd-54fe-4e33-a679-216b56fd1a06",
          "name": "Duplicate Nas Fund ID",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundId\": \"QL82C1\",\r\n  \"fundName\": \"New CITY DB OPRTIONAL RISK RESRVE\",\r\n  \"nasFundId\": \"QL81C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Duplicate Nas Fund ID test\", () => {",
                  "    pm.response.to.have.status(400);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                  "    pm.expect(jsonData.isSuccess).to.be.false;",
                  "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                  "",
                  "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                  "});"
                ],
                "_lastExecutionId": "ec30f9c1-26fd-4926-9534-b2abfd23109c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8022c1bc-2e52-4c93-8859-fe824ed58a9a",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "135",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"fundId\": \"QL82C1\",\r\n  \"fundName\": \"New CITY DB OPRTIONAL RISK RESRVE\",\r\n  \"nasFundId\": \"QL81C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "0132d962-f423-4413-b247-1469844b89a1",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:48 GMT"
            },
            {
              "key": "Content-Length",
              "value": "224"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              91,
              34,
              68,
              117,
              112,
              108,
              105,
              99,
              97,
              116,
              101,
              100,
              32,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              111,
              114,
              32,
              78,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              93,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              68,
              117,
              112,
              108,
              105,
              99,
              97,
              116,
              101,
              100,
              32,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              111,
              114,
              32,
              78,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              55,
              99,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              51,
              48,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              65,
              100,
              100,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 55,
          "responseSize": 224
        },
        "id": "615529cd-54fe-4e33-a679-216b56fd1a06",
        "assertions": [
          {
            "assertion": "Duplicate Nas Fund ID test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "61359e0a-3d43-44ee-a938-07442546f4f1",
          "length": 18,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2a975ad3-917a-4e02-8fcd-d218ae8a0416"
        },
        "item": {
          "id": "e07e1172-68d5-4176-ba30-5cb5cf7e0e4f",
          "name": "Incorrect Username and Password",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "string",
                  "value": "user",
                  "key": "password"
                },
                {
                  "type": "string",
                  "value": "user",
                  "key": "username"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8be5318a-6b15-4740-963d-a16682c5c56c",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4c8d850a-eb1c-4ae5-870e-cce23cf968c3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "04f7f9e8-5a5d-4fcb-8cd9-737b81137f87",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Incorrect Username and Password test\", ()=>{",
                  "    pm.response.to.have.status(401);",
                  "   ",
                  "})"
                ],
                "_lastExecutionId": "c3cb5101-5feb-4160-8224-cda095f79428"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic dXNlcjp1c2Vy",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3ba8ae48-3461-4981-95cd-e182d6c8ead4",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "user",
                "key": "password"
              },
              {
                "type": "string",
                "value": "user",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "0e96066a-1801-4adc-b117-69fb4a8ab918",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:48 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 0
        },
        "id": "e07e1172-68d5-4176-ba30-5cb5cf7e0e4f",
        "assertions": [
          {
            "assertion": "Incorrect Username and Password test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e44ac90a-8685-4577-a378-11389e58eb34",
          "length": 18,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6c046aca-3b73-4874-bc3f-9b67063d64ed"
        },
        "item": {
          "id": "0bdfd0a2-559b-49a3-930b-e0af0e2c0da4",
          "name": "No auth",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"No auth test\", () => {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "4493751a-3f20-482b-8e42-228b36dda54c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f714abb6-db4a-4699-8545-a09844cbbea5",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "550ea0b7-2f13-4766-820e-4bf42f7c3495",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:50 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 109,
          "responseSize": 0
        },
        "id": "0bdfd0a2-559b-49a3-930b-e0af0e2c0da4",
        "assertions": [
          {
            "assertion": "No auth test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a5b7516f-d1eb-4f95-8c8c-25bd9073f19c",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f465f0cb-eb2f-42a6-a29e-311bfd919502",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "d916ef89-ff39-4455-8dc2-ec822472c789"
        },
        "item": {
          "id": "90de2873-6d5d-41de-924e-0c39dd1c38b2",
          "name": "Invalid characters in Nas Fund ID",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"@#@{{randomId}}@#@#\",\r\n  \"excludeFromUPFile\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Invalid characters in Fund ID test\", () => {",
                  "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    var random = pm.environment.get(\"randomId\");",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                  "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                  "    ",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "    console.log(\"Test completed\");",
                  "    ",
                  "    //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "",
                  "});",
                  "",
                  "    ",
                  ""
                ],
                "_lastExecutionId": "d916ef89-ff39-4455-8dc2-ec822472c789"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8ff7fc8d-373f-4422-bbf2-d5d3c3a295b9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "Y1S1Pe"
              },
              {
                "key": "nasFundID",
                "value": "Y1S1Pe"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ca3d3635-e7e3-4c7a-a72c-c49818c159d2",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "c31a5a06-ec8a-4ffb-b652-6141379b7bfe",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:52 GMT"
            },
            {
              "key": "Content-Length",
              "value": "223"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              34,
              102,
              117,
              110,
              100,
              73,
              68,
              32,
              79,
              82,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              68,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              102,
              117,
              110,
              100,
              73,
              68,
              32,
              79,
              82,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              68,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              56,
              48,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              50,
              56,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 223
        },
        "id": "e29dc178-d37e-4c51-8046-94e78be93a2e",
        "assertions": [
          {
            "assertion": "Invalid characters in Fund ID test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a5b7516f-d1eb-4f95-8c8c-25bd9073f19c",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f465f0cb-eb2f-42a6-a29e-311bfd919502",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "d916ef89-ff39-4455-8dc2-ec822472c789"
        },
        "item": {
          "id": "90de2873-6d5d-41de-924e-0c39dd1c38b2",
          "name": "Invalid characters in Nas Fund ID",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"@#@{{randomId}}@#@#\",\r\n  \"excludeFromUPFile\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Invalid characters in Fund ID test\", () => {",
                  "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    var random = pm.environment.get(\"randomId\");",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                  "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                  "    ",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "    console.log(\"Test completed\");",
                  "    ",
                  "    //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "",
                  "});",
                  "",
                  "    ",
                  ""
                ],
                "_lastExecutionId": "d916ef89-ff39-4455-8dc2-ec822472c789"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8ff7fc8d-373f-4422-bbf2-d5d3c3a295b9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "Y1S1Pe"
              },
              {
                "key": "nasFundID",
                "value": "Y1S1Pe"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ca3d3635-e7e3-4c7a-a72c-c49818c159d2",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "c31a5a06-ec8a-4ffb-b652-6141379b7bfe",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:52 GMT"
            },
            {
              "key": "Content-Length",
              "value": "223"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              34,
              102,
              117,
              110,
              100,
              73,
              68,
              32,
              79,
              82,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              68,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              102,
              117,
              110,
              100,
              73,
              68,
              32,
              79,
              82,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              68,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              56,
              48,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              50,
              56,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 223
        },
        "id": "e29dc178-d37e-4c51-8046-94e78be93a2e",
        "assertions": [
          {
            "assertion": "Invalid characters in Fund ID test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9b579dd4-2520-4771-9184-66622142c1f2",
          "length": 18,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "45365ddd-5f00-4497-bd4d-8f47ffa9aa5a"
        },
        "item": {
          "id": "0db6a020-ce5e-4796-b0d5-7e65b5ffbb58",
          "name": "Duplicate Fund ID",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"QL81\",\r\n  \"excludeFromUPFile\":false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Duplicate Fund ID test\", () => {",
                  "    pm.response.to.have.status(400);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                  "    pm.expect(jsonData.isSuccess).to.be.false;",
                  "    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
                  "",
                  "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                  "});"
                ],
                "_lastExecutionId": "ee2b957a-6d53-4d91-8290-6facdc0064a9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1e931569-2eb9-42fa-8fef-e0a111df0a4b",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "103",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"QL81\",\r\n  \"excludeFromUPFile\":false\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "66603c63-e8c6-479a-a6ae-0e6c9426639a",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:53 GMT"
            },
            {
              "key": "Content-Length",
              "value": "224"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              91,
              34,
              68,
              117,
              112,
              108,
              105,
              99,
              97,
              116,
              101,
              100,
              32,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              111,
              114,
              32,
              78,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              93,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              68,
              117,
              112,
              108,
              105,
              99,
              97,
              116,
              101,
              100,
              32,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              111,
              114,
              32,
              78,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              56,
              49,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              51,
              48,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              65,
              100,
              100,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 62,
          "responseSize": 224
        },
        "id": "0db6a020-ce5e-4796-b0d5-7e65b5ffbb58",
        "assertions": [
          {
            "assertion": "Duplicate Fund ID test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6e52c7cf-2a2b-4a7b-a890-9b4fcac64f30",
          "length": 18,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a1d0eea5-a06a-4067-8a9a-0f9bfce221f1"
        },
        "item": {
          "id": "a9058ea8-2642-4941-b720-6d1c2c967b43",
          "name": "User with no access",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "string",
                  "value": "{{NoRolesPassword}}",
                  "key": "password"
                },
                {
                  "type": "string",
                  "value": "{{NoRolesUser}}",
                  "key": "username"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8be5318a-6b15-4740-963d-a16682c5c56c",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "47839390-3d26-42dd-b0e2-cc5d699dece4"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "04f7f9e8-5a5d-4fcb-8cd9-737b81137f87",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"User with no access\", ()=>{",
                  "    pm.response.to.have.status(403);",
                  "   ",
                  "})"
                ],
                "_lastExecutionId": "cfe09344-f997-4e4f-be69-69dc0f5d0cfb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic VGVzdE5vUm9sZXNVc2VyOnBhS0F4U0k3RkFvTzUyVQ==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "42932a25-44aa-437e-a207-f7e36d8be307",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "paKAxSI7FAoO52U",
                "key": "password"
              },
              {
                "type": "string",
                "value": "TestNoRolesUser",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "de284b00-7e14-4c0d-9a59-82be98e9ee0a",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:53 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 23,
          "responseSize": 0
        },
        "id": "a9058ea8-2642-4941-b720-6d1c2c967b43",
        "assertions": [
          {
            "assertion": "User with no access",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0ee433e1-2fc7-41f7-89f4-016faeb63f4b",
          "length": 18,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c175a4b0-81e2-4f58-8f11-bb0247357b58"
        },
        "item": {
          "id": "a134b100-2842-4945-adae-75725d5e818b",
          "name": "User locked",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "string",
                  "value": "{{LockedPassword}}",
                  "key": "password"
                },
                {
                  "type": "string",
                  "value": "{{LockedUser}}",
                  "key": "username"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8be5318a-6b15-4740-963d-a16682c5c56c",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "e3166f5a-0652-4b84-b3bf-71245948687f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "04f7f9e8-5a5d-4fcb-8cd9-737b81137f87",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Locked user\", ()=>{",
                  "    pm.response.to.have.status(401);",
                  "   ",
                  "})"
                ],
                "_lastExecutionId": "9e4080c7-eebf-409b-aa65-aea3da8e67ba"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic VGVzdExvY2tlZFVzZXI6c2hmcTYtV05kemRuV3NlSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "70134138-c7a8-4509-8b80-552ce5de8852",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "shfq6-WNdzdnWseK",
                "key": "password"
              },
              {
                "type": "string",
                "value": "TestLockedUser",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "38c8434c-daf7-424c-a23c-9283927b80a0",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:54 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 0
        },
        "id": "a134b100-2842-4945-adae-75725d5e818b",
        "assertions": [
          {
            "assertion": "Locked user",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "cf7ca845-d299-44a4-b6ab-759859946fae",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bbad2934-63d9-44bb-9cca-91a3071417ee",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "c610fc8a-721f-4018-9eb1-039de0362471"
        },
        "item": {
          "id": "48dc4cbe-c33f-4525-a829-36454785d447",
          "name": "Invalid characters in Fund Name",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"$@#${{FundName}}#$#$#\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Invalid characters in Fund Name test\", () => {",
                  "   console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    var random = pm.environment.get(\"randomId\");",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                  "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                  "    ",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "    console.log(\"Test completed\");",
                  "    ",
                  "    //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        ",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "",
                  "});",
                  ""
                ],
                "_lastExecutionId": "c610fc8a-721f-4018-9eb1-039de0362471"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9f4bf1e9-238b-4d9b-ad93-54f1fcbadc54"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "hzdIXl"
              },
              {
                "key": "nasFundID",
                "value": "hzdIXl"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e3599101-dfc2-4e04-b27d-2cb145f115b8",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "403652b8-028a-4a68-868e-ae22c47ec1f6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:55 GMT"
            },
            {
              "key": "Content-Length",
              "value": "293"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              45,
              32,
              39,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              32,
              111,
              112,
              116,
              105,
              111,
              110,
              32,
              102,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              104,
              122,
              100,
              73,
              88,
              108,
              44,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              104,
              122,
              100,
              73,
              88,
              108,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              39,
              34,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              56,
              53,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              50,
              57,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 25,
          "responseSize": 293
        },
        "id": "4c82fe25-f0a9-4827-8e4a-17561428ade7",
        "assertions": [
          {
            "assertion": "Invalid characters in Fund Name test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "cf7ca845-d299-44a4-b6ab-759859946fae",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bbad2934-63d9-44bb-9cca-91a3071417ee",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "c610fc8a-721f-4018-9eb1-039de0362471"
        },
        "item": {
          "id": "48dc4cbe-c33f-4525-a829-36454785d447",
          "name": "Invalid characters in Fund Name",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"$@#${{FundName}}#$#$#\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Invalid characters in Fund Name test\", () => {",
                  "   console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    var random = pm.environment.get(\"randomId\");",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                  "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                  "    ",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "    console.log(\"Test completed\");",
                  "    ",
                  "    //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        ",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "",
                  "});",
                  ""
                ],
                "_lastExecutionId": "c610fc8a-721f-4018-9eb1-039de0362471"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9f4bf1e9-238b-4d9b-ad93-54f1fcbadc54"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "hzdIXl"
              },
              {
                "key": "nasFundID",
                "value": "hzdIXl"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e3599101-dfc2-4e04-b27d-2cb145f115b8",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "403652b8-028a-4a68-868e-ae22c47ec1f6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:55 GMT"
            },
            {
              "key": "Content-Length",
              "value": "293"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              45,
              32,
              39,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              32,
              111,
              112,
              116,
              105,
              111,
              110,
              32,
              102,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              104,
              122,
              100,
              73,
              88,
              108,
              44,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              104,
              122,
              100,
              73,
              88,
              108,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              39,
              34,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              56,
              53,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              50,
              57,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 25,
          "responseSize": 293
        },
        "id": "4c82fe25-f0a9-4827-8e4a-17561428ade7",
        "assertions": [
          {
            "assertion": "Invalid characters in Fund Name test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b4c0ce73-a855-4b30-a5d8-8a9a106eaa24",
          "length": 18,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "56383af5-ecd3-429c-a086-30c9a419383d"
        },
        "item": {
          "id": "76a2a31e-9df6-4d0b-8cf8-423439a90443",
          "name": "New User",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "string",
                  "value": "{{NewPassword}}",
                  "key": "password"
                },
                {
                  "type": "string",
                  "value": "{{NewUser}}",
                  "key": "username"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8be5318a-6b15-4740-963d-a16682c5c56c",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "169a1c9d-4466-4ef3-bf2a-3a0ce3d908c5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "04f7f9e8-5a5d-4fcb-8cd9-737b81137f87",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"New User\", ()=>{",
                  "    pm.response.to.have.status(401);",
                  "   ",
                  "})"
                ],
                "_lastExecutionId": "835ffdb9-008f-4b8a-a07d-82d614903854"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic VGVzdE5ld1VzZXI6YnRzV2VXJHpNbWhKSWp5",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0c6b82bd-43e4-4ad9-83ad-d3b2fe47a02c",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "btsWeW$zMmhJIjy",
                "key": "password"
              },
              {
                "type": "string",
                "value": "TestNewUser",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "e76cf938-6288-4180-8aaa-90c1899a3438",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:57 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 0
        },
        "id": "76a2a31e-9df6-4d0b-8cf8-423439a90443",
        "assertions": [
          {
            "assertion": "New User",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3cb1a40d-dca1-4b6b-a7ee-5a7b7cce8e63",
          "length": 18,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fa601618-1024-44b8-9d6e-b6ab44c267a8"
        },
        "item": {
          "id": "d24a9bd5-2923-4a69-b57d-5c8644bbf28f",
          "name": "Empty Request body",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Empty Request body test\", () => {",
                  "    pm.response.to.have.status(400);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                  "    pm.expect(jsonData.isSuccess).to.be.false;",
                  "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                  "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                  "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                  "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                  "});"
                ],
                "_lastExecutionId": "8c682bb7-d82e-4a50-a0a6-65e528a396cd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "df4d3fa9-4995-4ed8-8f1d-3339b9ad7cc4",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "4",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "72cb14d7-9054-48f5-b0c5-f72572a0c282",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:57 GMT"
            },
            {
              "key": "Content-Length",
              "value": "284"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              91,
              34,
              70,
              117,
              110,
              100,
              32,
              73,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              44,
              34,
              70,
              117,
              110,
              100,
              32,
              78,
              97,
              109,
              101,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              44,
              34,
              78,
              97,
              115,
              32,
              70,
              117,
              110,
              100,
              32,
              73,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              93,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              70,
              117,
              110,
              100,
              32,
              73,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              56,
              55,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              51,
              50,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              65,
              100,
              100,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 284
        },
        "id": "d24a9bd5-2923-4a69-b57d-5c8644bbf28f",
        "assertions": [
          {
            "assertion": "Empty Request body test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7ad7782e-751c-40fa-aef9-7b60150ca3a1",
          "length": 18,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "758cf8e3-53f0-42a9-a113-d3a4071d2468"
        },
        "item": {
          "id": "0b958e46-51a5-4585-aa9d-51a58ceb2083",
          "name": "Empty input fields",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundId\": \"\",\r\n  \"fundName\": \"\",\r\n  \"nasFundId\": \"\",\r\n  \"excludeFromUPFile\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Empty input fields test\", () => {",
                  "    pm.response.to.have.status(400);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                  "    pm.expect(jsonData.isSuccess).to.be.false;",
                  "    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
                  "    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
                  "    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
                  "    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
                  "});"
                ],
                "_lastExecutionId": "91bf918b-ec90-4c27-97ed-cc2fab4f5639"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "619b74aa-1dc6-46c1-83fe-4328928ec7eb",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "90",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"fundId\": \"\",\r\n  \"fundName\": \"\",\r\n  \"nasFundId\": \"\",\r\n  \"excludeFromUPFile\": false\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "b64d2b77-4339-40b4-b179-d0ffac442c4c",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:17:59 GMT"
            },
            {
              "key": "Content-Length",
              "value": "284"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              91,
              34,
              70,
              117,
              110,
              100,
              32,
              73,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              44,
              34,
              70,
              117,
              110,
              100,
              32,
              78,
              97,
              109,
              101,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              44,
              34,
              78,
              97,
              115,
              32,
              70,
              117,
              110,
              100,
              32,
              73,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              93,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              70,
              117,
              110,
              100,
              32,
              73,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              56,
              56,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              50,
              57,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              65,
              100,
              100,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 17,
          "responseSize": 284
        },
        "id": "0b958e46-51a5-4585-aa9d-51a58ceb2083",
        "assertions": [
          {
            "assertion": "Empty input fields test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "35d87bc6-228d-4765-8af8-7cf13b33d921",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "11400966-5dff-4f56-989c-5dbb354117ea",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "4e4d54e4-6e0d-4aab-ac72-9573e56a9f3e"
        },
        "item": {
          "id": "ebef7099-65d6-4ea0-8e59-ae279293f579",
          "name": "Invalid characters in Fund ID",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundId\": \"%%{{randomId}}#$\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Invalid characters in Fund ID test\", () => {",
                  "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    var random = pm.environment.get(\"randomId\");",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                  "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                  "    ",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "    console.log(\"Test completed\");",
                  "    ",
                  "    //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "",
                  "});",
                  "",
                  "    ",
                  ""
                ],
                "_lastExecutionId": "4e4d54e4-6e0d-4aab-ac72-9573e56a9f3e"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c840d1af-e350-4025-8c4c-2996d830acd4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "il9FPk"
              },
              {
                "key": "nasFundID",
                "value": "il9FPk"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "127aca51-67ab-47ed-968b-eb8a714cc3d9",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "144cfc39-2f8f-4d56-9b94-837ff7f47876",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:18:00 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              34,
              102,
              117,
              110,
              100,
              73,
              68,
              32,
              79,
              82,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              68,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              102,
              117,
              110,
              100,
              73,
              68,
              32,
              79,
              82,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              68,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              56,
              97,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              50,
              57,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 223
        },
        "id": "8e59d99d-d5e3-41e6-92d5-72b0a8e543e0",
        "assertions": [
          {
            "assertion": "Invalid characters in Fund ID test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "35d87bc6-228d-4765-8af8-7cf13b33d921",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "11400966-5dff-4f56-989c-5dbb354117ea",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "4e4d54e4-6e0d-4aab-ac72-9573e56a9f3e"
        },
        "item": {
          "id": "ebef7099-65d6-4ea0-8e59-ae279293f579",
          "name": "Invalid characters in Fund ID",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundId\": \"%%{{randomId}}#$\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Invalid characters in Fund ID test\", () => {",
                  "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    var random = pm.environment.get(\"randomId\");",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
                  "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                  "    ",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "    console.log(\"Test completed\");",
                  "    ",
                  "    //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "",
                  "});",
                  "",
                  "    ",
                  ""
                ],
                "_lastExecutionId": "4e4d54e4-6e0d-4aab-ac72-9573e56a9f3e"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c840d1af-e350-4025-8c4c-2996d830acd4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "il9FPk"
              },
              {
                "key": "nasFundID",
                "value": "il9FPk"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "127aca51-67ab-47ed-968b-eb8a714cc3d9",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "144cfc39-2f8f-4d56-9b94-837ff7f47876",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:18:00 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              34,
              102,
              117,
              110,
              100,
              73,
              68,
              32,
              79,
              82,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              68,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              102,
              117,
              110,
              100,
              73,
              68,
              32,
              79,
              82,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              68,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              56,
              97,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              50,
              57,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 223
        },
        "id": "8e59d99d-d5e3-41e6-92d5-72b0a8e543e0",
        "assertions": [
          {
            "assertion": "Invalid characters in Fund ID test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "82c818a2-85ab-403c-b5b3-419bc3e06d5f",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3bcfcefe-e6a4-41c7-9bd9-d7c50f72349b",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "69b23481-c079-4b9e-9df0-375eb7421d4f"
        },
        "item": {
          "id": "10dcd7b0-010e-4da8-929a-28ecf44fee7e",
          "name": "Valid all",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"All valid parameters test\", () => {",
                  "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    var random = pm.environment.get(\"randomId\");",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                  "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                  "    ",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "    console.log(\"Test completed\");",
                  "    ",
                  "    //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "",
                  "});",
                  ""
                ],
                "_lastExecutionId": "69b23481-c079-4b9e-9df0-375eb7421d4f"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "dfab4279-8e8e-42b9-bf38-0612d71f37a2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "zJ2kzf"
              },
              {
                "key": "nasFundID",
                "value": "zJ2kzf"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b7e4dd7b-00b0-4ceb-a6f7-9f6500ac5ed1",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "4748a8e8-6b70-481e-b0a1-acdea5e0cb29",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:18:01 GMT"
            },
            {
              "key": "Content-Length",
              "value": "293"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              45,
              32,
              39,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              32,
              111,
              112,
              116,
              105,
              111,
              110,
              32,
              102,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              122,
              74,
              50,
              107,
              122,
              102,
              44,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              122,
              74,
              50,
              107,
              122,
              102,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              39,
              34,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              56,
              99,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              50,
              56,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 22,
          "responseSize": 293
        },
        "id": "ac69de24-84cf-4d98-90b3-fe559da017f2",
        "assertions": [
          {
            "assertion": "All valid parameters test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "82c818a2-85ab-403c-b5b3-419bc3e06d5f",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3bcfcefe-e6a4-41c7-9bd9-d7c50f72349b",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "69b23481-c079-4b9e-9df0-375eb7421d4f"
        },
        "item": {
          "id": "10dcd7b0-010e-4da8-929a-28ecf44fee7e",
          "name": "Valid all",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"All valid parameters test\", () => {",
                  "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    var random = pm.environment.get(\"randomId\");",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                  "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                  "    ",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "    console.log(\"Test completed\");",
                  "    ",
                  "    //Delete the created record - ",
                  "    if (pm.expect(jsonData.isSuccess).to.be.true) ",
                  "    {",
                  "        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
                  "        const delRequest = {",
                  "        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
                  "        method: 'DELETE',",
                  "        header: {",
                  "            'accept': 'text/plain',",
                  "            'Authorization': 'Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=='",
                  "        }};",
                  "        pm.sendRequest(delRequest, (error, response) => {",
                  "        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
                  "        });",
                  "    }",
                  "",
                  "});",
                  ""
                ],
                "_lastExecutionId": "69b23481-c079-4b9e-9df0-375eb7421d4f"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "dfab4279-8e8e-42b9-bf38-0612d71f37a2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "RemoveInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [
              {
                "key": "fundID",
                "value": "zJ2kzf"
              },
              {
                "key": "nasFundID",
                "value": "zJ2kzf"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b7e4dd7b-00b0-4ceb-a6f7-9f6500ac5ed1",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "4748a8e8-6b70-481e-b0a1-acdea5e0cb29",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:18:01 GMT"
            },
            {
              "key": "Content-Length",
              "value": "293"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              45,
              32,
              39,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              32,
              111,
              112,
              116,
              105,
              111,
              110,
              32,
              102,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              122,
              74,
              50,
              107,
              122,
              102,
              44,
              32,
              110,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              61,
              32,
              122,
              74,
              50,
              107,
              122,
              102,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              39,
              34,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              56,
              99,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              50,
              56,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              82,
              101,
              109,
              111,
              118,
              101,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 22,
          "responseSize": 293
        },
        "id": "ac69de24-84cf-4d98-90b3-fe559da017f2",
        "assertions": [
          {
            "assertion": "All valid parameters test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "17168ab8-8d84-45ff-9758-9a37e49de861",
          "length": 18,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ac84aa1a-4640-460c-9a78-425bfc37d76d"
        },
        "item": {
          "id": "c7e3462b-dc56-4e3a-b235-15aff581342d",
          "name": "Duplicate all",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"LG AGGRESSIVE ACCUM OPTION\",\r\n  \"nasFundId\": \"LG18C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"All parameters Duplicate test\", () => {",
                  "    pm.response.to.have.status(400);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    var random = pm.environment.get(\"randomId\");",
                  "    ",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(400);",
                  "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                  "    ",
                  "    pm.expect(jsonData.isSuccess).to.be.false;",
                  "    ",
                  "    pm.expect(jsonData.response[0]).to.include(\"Duplicated FundId or NasFundId\");",
                  "    console.log(\"Correct message validated: \" + jsonData.response[0]);",
                  "    ",
                  "    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
                  "    console.log(\"Test completed\");",
                  "",
                  "",
                  "});",
                  "",
                  "    ",
                  ""
                ],
                "_lastExecutionId": "288a968e-5146-4080-8a13-2c26f8d4b691"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a405d597-479b-491b-aade-052c0c3286d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "40b7475e-f8e7-42b1-96c8-5b895deb893f",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "128",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"LG AGGRESSIVE ACCUM OPTION\",\r\n  \"nasFundId\": \"LG18C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "b768f79f-fdf9-4ed6-aca2-f7a6ce062650",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:18:01 GMT"
            },
            {
              "key": "Content-Length",
              "value": "224"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              91,
              34,
              68,
              117,
              112,
              108,
              105,
              99,
              97,
              116,
              101,
              100,
              32,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              111,
              114,
              32,
              78,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              93,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              68,
              117,
              112,
              108,
              105,
              99,
              97,
              116,
              101,
              100,
              32,
              70,
              117,
              110,
              100,
              73,
              100,
              32,
              111,
              114,
              32,
              78,
              97,
              115,
              70,
              117,
              110,
              100,
              73,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              56,
              100,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              51,
              50,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              65,
              100,
              100,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 32,
          "responseSize": 224
        },
        "id": "c7e3462b-dc56-4e3a-b235-15aff581342d",
        "assertions": [
          {
            "assertion": "All parameters Duplicate test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3e5c3a51-7544-4c00-abd0-7261ca2e87f6",
          "length": 18,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "697ea3f9-adcb-4fd3-8c0c-ae3b2e080355"
        },
        "item": {
          "id": "717f0ff5-0d57-40b9-8bfa-f4bcf4b0844b",
          "name": "Duplciate Fund Name",
          "request": {
            "url": {
              "path": [
                "api",
                "NasFile",
                "AddInvestmentOption"
              ],
              "host": [
                "{{fileconversion}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n   \"excludeFromUpFile\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "270abbe9-baba-4a73-a40c-d27f8a480703",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Duplicate Fund Name test\", () => {",
                  "    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    var random = pm.environment.get(\"randomId\");",
                  "    pm.expect(jsonData.httpStatusCode).to.eql(200);",
                  "    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
                  "    pm.expect(jsonData.isSuccess).to.be.true;",
                  "    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
                  "    console.log(\"Correct message validated: \" + jsonData.response.message);",
                  "    ",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "    console.log(\"Test completed\");",
                  "    ",
                  "  ",
                  "",
                  "});",
                  "",
                  "    ",
                  ""
                ],
                "_lastExecutionId": "073eb455-f8dc-46b4-9daf-c075a3c82183"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "92f70ff3-74ac-47b7-b6d0-9d137c7d1fe7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4e11abe3-70ff-47e9-b209-4c0ca5bd0d2d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "fileconversion",
              "api",
              "NasFile",
              "AddInvestmentOption"
            ],
            "host": [
              "intg-mcro",
              "internal",
              "lgsuper",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic YnNocmVlOmVoVXMkOTY5N2ZXQy1KeUwhSw==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.28.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0ee6fdcb-2c19-4a9e-83ae-9864bef15ec0",
              "system": true
            },
            {
              "key": "Host",
              "value": "intg-mcro.internal.lgsuper.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "107",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"fundId\": \"LIpiH5\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"LIpiH5\",\r\n   \"excludeFromUpFile\": false\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "ehUs$9697fWC-JyL!K",
                "key": "password"
              },
              {
                "type": "string",
                "value": "bshree",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "84a8a1ec-b358-47eb-9db5-103346585348",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0"
            },
            {
              "key": "X-Powered-By",
              "value": "ASP.NET"
            },
            {
              "key": "Date",
              "value": "Wed, 14 Jul 2021 01:18:02 GMT"
            },
            {
              "key": "Content-Length",
              "value": "262"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              116,
              116,
              112,
              83,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              114,
              101,
              99,
              111,
              114,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              97,
              100,
              100,
              101,
              100,
              32,
              45,
              32,
              39,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              32,
              111,
              112,
              116,
              105,
              111,
              110,
              32,
              76,
              73,
              112,
              105,
              72,
              53,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              97,
              100,
              100,
              101,
              100,
              32,
              45,
              32,
              73,
              68,
              32,
              49,
              49,
              48,
              55,
              39,
              34,
              125,
              44,
              34,
              105,
              115,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              73,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              114,
              34,
              58,
              34,
              91,
              56,
              48,
              48,
              54,
              97,
              102,
              56,
              101,
              45,
              48,
              48,
              48,
              49,
              45,
              101,
              102,
              48,
              48,
              45,
              98,
              54,
              51,
              102,
              45,
              56,
              52,
              55,
              49,
              48,
              99,
              55,
              57,
              54,
              55,
              98,
              98,
              58,
              48,
              48,
              50,
              57,
              58,
              47,
              97,
              112,
              105,
              47,
              78,
              97,
              115,
              70,
              105,
              108,
              101,
              47,
              65,
              100,
              100,
              73,
              110,
              118,
              101,
              115,
              116,
              109,
              101,
              110,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              93,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 51,
          "responseSize": 262
        },
        "id": "717f0ff5-0d57-40b9-8bfa-f4bcf4b0844b",
        "assertions": [
          {
            "assertion": "Duplicate Fund Name test",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 4206
    },
    "failures": [],
    "error": null
  },
  "consoleLogs": {
    "a5b7516f-d1eb-4f95-8c8c-25bd9073f19c": [
      {
        "cursor": {
          "ref": "a5b7516f-d1eb-4f95-8c8c-25bd9073f19c",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "59d94220-b2a9-4359-8d5d-d246a31a139c",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "d916ef89-ff39-4455-8dc2-ec822472c789"
        },
        "level": "log",
        "messages": [
          "New record of Fund Id Y1S1Pe created and Test Started..."
        ]
      },
      {
        "cursor": {
          "ref": "a5b7516f-d1eb-4f95-8c8c-25bd9073f19c",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "59d94220-b2a9-4359-8d5d-d246a31a139c",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "d916ef89-ff39-4455-8dc2-ec822472c789"
        },
        "level": "log",
        "messages": [
          "Valid Response code: 200"
        ]
      },
      {
        "cursor": {
          "ref": "a5b7516f-d1eb-4f95-8c8c-25bd9073f19c",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "59d94220-b2a9-4359-8d5d-d246a31a139c",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "d916ef89-ff39-4455-8dc2-ec822472c789"
        },
        "level": "log",
        "messages": [
          "Correct message validated: Unable to add record"
        ]
      },
      {
        "cursor": {
          "ref": "a5b7516f-d1eb-4f95-8c8c-25bd9073f19c",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "59d94220-b2a9-4359-8d5d-d246a31a139c",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "d916ef89-ff39-4455-8dc2-ec822472c789"
        },
        "level": "log",
        "messages": [
          "Test completed"
        ]
      },
      {
        "cursor": {
          "ref": "a5b7516f-d1eb-4f95-8c8c-25bd9073f19c",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "59d94220-b2a9-4359-8d5d-d246a31a139c",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "d916ef89-ff39-4455-8dc2-ec822472c789"
        },
        "level": "log",
        "messages": [
          "Starting deletion of created FundId Y1S1Pe...."
        ]
      },
      {
        "cursor": {
          "ref": "a5b7516f-d1eb-4f95-8c8c-25bd9073f19c",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "59d94220-b2a9-4359-8d5d-d246a31a139c",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "d916ef89-ff39-4455-8dc2-ec822472c789"
        },
        "level": "log",
        "messages": [
          "Created Fund Id Y1S1Pe Record successfully deleted after test",
          {
            "httpStatusCode": 400,
            "response": "fundID OR nasFundID not found",
            "isSuccess": false,
            "error": "fundID OR nasFundID not found",
            "traceIdentifier": "[8006af80-0001-ef00-b63f-84710c7967bb:0028:/api/NasFile/RemoveInvestmentOption]"
          }
        ]
      }
    ],
    "cf7ca845-d299-44a4-b6ab-759859946fae": [
      {
        "cursor": {
          "ref": "cf7ca845-d299-44a4-b6ab-759859946fae",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4f8e9601-fdbf-4375-9411-00d2ba431f04",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "c610fc8a-721f-4018-9eb1-039de0362471"
        },
        "level": "log",
        "messages": [
          "New record of Fund Id hzdIXl created and Test Started..."
        ]
      },
      {
        "cursor": {
          "ref": "cf7ca845-d299-44a4-b6ab-759859946fae",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4f8e9601-fdbf-4375-9411-00d2ba431f04",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "c610fc8a-721f-4018-9eb1-039de0362471"
        },
        "level": "log",
        "messages": [
          "Valid Response code: 200"
        ]
      },
      {
        "cursor": {
          "ref": "cf7ca845-d299-44a4-b6ab-759859946fae",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4f8e9601-fdbf-4375-9411-00d2ba431f04",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "c610fc8a-721f-4018-9eb1-039de0362471"
        },
        "level": "log",
        "messages": [
          "Correct message validated: New record successfully added - 'Investment option hzdIXl successfully added - ID 1104'"
        ]
      },
      {
        "cursor": {
          "ref": "cf7ca845-d299-44a4-b6ab-759859946fae",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4f8e9601-fdbf-4375-9411-00d2ba431f04",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "c610fc8a-721f-4018-9eb1-039de0362471"
        },
        "level": "log",
        "messages": [
          "Test completed"
        ]
      },
      {
        "cursor": {
          "ref": "cf7ca845-d299-44a4-b6ab-759859946fae",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4f8e9601-fdbf-4375-9411-00d2ba431f04",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "c610fc8a-721f-4018-9eb1-039de0362471"
        },
        "level": "log",
        "messages": [
          "Starting deletion of created FundId hzdIXl...."
        ]
      },
      {
        "cursor": {
          "ref": "cf7ca845-d299-44a4-b6ab-759859946fae",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4f8e9601-fdbf-4375-9411-00d2ba431f04",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "c610fc8a-721f-4018-9eb1-039de0362471"
        },
        "level": "log",
        "messages": [
          "Created Fund Id hzdIXl Record successfully deleted after test",
          {
            "httpStatusCode": 200,
            "response": {
              "message": "Existing record successfully deleted - 'Investment option fundId = hzdIXl, nasFundId = hzdIXl successfully removed'"
            },
            "isSuccess": true,
            "error": null,
            "traceIdentifier": "[8006af85-0001-ef00-b63f-84710c7967bb:0029:/api/NasFile/RemoveInvestmentOption]"
          }
        ]
      }
    ],
    "35d87bc6-228d-4765-8af8-7cf13b33d921": [
      {
        "cursor": {
          "ref": "35d87bc6-228d-4765-8af8-7cf13b33d921",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "725eb039-02c7-489f-82dc-75e9f8c2e7fc",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "4e4d54e4-6e0d-4aab-ac72-9573e56a9f3e"
        },
        "level": "log",
        "messages": [
          "New record of Fund Id il9FPk created and Test Started..."
        ]
      },
      {
        "cursor": {
          "ref": "35d87bc6-228d-4765-8af8-7cf13b33d921",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "725eb039-02c7-489f-82dc-75e9f8c2e7fc",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "4e4d54e4-6e0d-4aab-ac72-9573e56a9f3e"
        },
        "level": "log",
        "messages": [
          "Valid Response code: 200"
        ]
      },
      {
        "cursor": {
          "ref": "35d87bc6-228d-4765-8af8-7cf13b33d921",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "725eb039-02c7-489f-82dc-75e9f8c2e7fc",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "4e4d54e4-6e0d-4aab-ac72-9573e56a9f3e"
        },
        "level": "log",
        "messages": [
          "Correct message validated: Unable to add record"
        ]
      },
      {
        "cursor": {
          "ref": "35d87bc6-228d-4765-8af8-7cf13b33d921",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "725eb039-02c7-489f-82dc-75e9f8c2e7fc",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "4e4d54e4-6e0d-4aab-ac72-9573e56a9f3e"
        },
        "level": "log",
        "messages": [
          "Test completed"
        ]
      },
      {
        "cursor": {
          "ref": "35d87bc6-228d-4765-8af8-7cf13b33d921",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "725eb039-02c7-489f-82dc-75e9f8c2e7fc",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "4e4d54e4-6e0d-4aab-ac72-9573e56a9f3e"
        },
        "level": "log",
        "messages": [
          "Starting deletion of created FundId il9FPk...."
        ]
      },
      {
        "cursor": {
          "ref": "35d87bc6-228d-4765-8af8-7cf13b33d921",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "725eb039-02c7-489f-82dc-75e9f8c2e7fc",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "4e4d54e4-6e0d-4aab-ac72-9573e56a9f3e"
        },
        "level": "log",
        "messages": [
          "Created Fund Id il9FPk Record successfully deleted after test",
          {
            "httpStatusCode": 400,
            "response": "fundID OR nasFundID not found",
            "isSuccess": false,
            "error": "fundID OR nasFundID not found",
            "traceIdentifier": "[8006af8a-0001-ef00-b63f-84710c7967bb:0029:/api/NasFile/RemoveInvestmentOption]"
          }
        ]
      }
    ],
    "82c818a2-85ab-403c-b5b3-419bc3e06d5f": [
      {
        "cursor": {
          "ref": "82c818a2-85ab-403c-b5b3-419bc3e06d5f",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "12e5b30d-19c6-473d-b3ef-a53ee2bed49b",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "69b23481-c079-4b9e-9df0-375eb7421d4f"
        },
        "level": "log",
        "messages": [
          "New record of Fund Id zJ2kzf created and Test Started..."
        ]
      },
      {
        "cursor": {
          "ref": "82c818a2-85ab-403c-b5b3-419bc3e06d5f",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "12e5b30d-19c6-473d-b3ef-a53ee2bed49b",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "69b23481-c079-4b9e-9df0-375eb7421d4f"
        },
        "level": "log",
        "messages": [
          "Valid Response code: 200"
        ]
      },
      {
        "cursor": {
          "ref": "82c818a2-85ab-403c-b5b3-419bc3e06d5f",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "12e5b30d-19c6-473d-b3ef-a53ee2bed49b",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "69b23481-c079-4b9e-9df0-375eb7421d4f"
        },
        "level": "log",
        "messages": [
          "Correct message validated: New record successfully added - 'Investment option zJ2kzf successfully added - ID 1106'"
        ]
      },
      {
        "cursor": {
          "ref": "82c818a2-85ab-403c-b5b3-419bc3e06d5f",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "12e5b30d-19c6-473d-b3ef-a53ee2bed49b",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "69b23481-c079-4b9e-9df0-375eb7421d4f"
        },
        "level": "log",
        "messages": [
          "Test completed"
        ]
      },
      {
        "cursor": {
          "ref": "82c818a2-85ab-403c-b5b3-419bc3e06d5f",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "12e5b30d-19c6-473d-b3ef-a53ee2bed49b",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "69b23481-c079-4b9e-9df0-375eb7421d4f"
        },
        "level": "log",
        "messages": [
          "Starting deletion of created FundId zJ2kzf...."
        ]
      },
      {
        "cursor": {
          "ref": "82c818a2-85ab-403c-b5b3-419bc3e06d5f",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "12e5b30d-19c6-473d-b3ef-a53ee2bed49b",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "69b23481-c079-4b9e-9df0-375eb7421d4f"
        },
        "level": "log",
        "messages": [
          "Created Fund Id zJ2kzf Record successfully deleted after test",
          {
            "httpStatusCode": 200,
            "response": {
              "message": "Existing record successfully deleted - 'Investment option fundId = zJ2kzf, nasFundId = zJ2kzf successfully removed'"
            },
            "isSuccess": true,
            "error": null,
            "traceIdentifier": "[8006af8c-0001-ef00-b63f-84710c7967bb:0028:/api/NasFile/RemoveInvestmentOption]"
          }
        ]
      }
    ],
    "17168ab8-8d84-45ff-9758-9a37e49de861": [
      {
        "cursor": {
          "ref": "17168ab8-8d84-45ff-9758-9a37e49de861",
          "length": 18,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ac84aa1a-4640-460c-9a78-425bfc37d76d",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "288a968e-5146-4080-8a13-2c26f8d4b691"
        },
        "level": "log",
        "messages": [
          "Valid Response code: 400"
        ]
      },
      {
        "cursor": {
          "ref": "17168ab8-8d84-45ff-9758-9a37e49de861",
          "length": 18,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ac84aa1a-4640-460c-9a78-425bfc37d76d",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "288a968e-5146-4080-8a13-2c26f8d4b691"
        },
        "level": "log",
        "messages": [
          "Correct message validated: Duplicated FundId or NasFundId"
        ]
      },
      {
        "cursor": {
          "ref": "17168ab8-8d84-45ff-9758-9a37e49de861",
          "length": 18,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ac84aa1a-4640-460c-9a78-425bfc37d76d",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "288a968e-5146-4080-8a13-2c26f8d4b691"
        },
        "level": "log",
        "messages": [
          "Test completed"
        ]
      }
    ],
    "3e5c3a51-7544-4c00-abd0-7261ca2e87f6": [
      {
        "cursor": {
          "ref": "3e5c3a51-7544-4c00-abd0-7261ca2e87f6",
          "length": 18,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "697ea3f9-adcb-4fd3-8c0c-ae3b2e080355",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "073eb455-f8dc-46b4-9daf-c075a3c82183"
        },
        "level": "log",
        "messages": [
          "New record of Fund Id LIpiH5 created and Test Started..."
        ]
      },
      {
        "cursor": {
          "ref": "3e5c3a51-7544-4c00-abd0-7261ca2e87f6",
          "length": 18,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "697ea3f9-adcb-4fd3-8c0c-ae3b2e080355",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "073eb455-f8dc-46b4-9daf-c075a3c82183"
        },
        "level": "log",
        "messages": [
          "Valid Response code: 200"
        ]
      },
      {
        "cursor": {
          "ref": "3e5c3a51-7544-4c00-abd0-7261ca2e87f6",
          "length": 18,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "697ea3f9-adcb-4fd3-8c0c-ae3b2e080355",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "073eb455-f8dc-46b4-9daf-c075a3c82183"
        },
        "level": "log",
        "messages": [
          "Correct message validated: New record successfully added - 'Investment option LIpiH5 successfully added - ID 1107'"
        ]
      },
      {
        "cursor": {
          "ref": "3e5c3a51-7544-4c00-abd0-7261ca2e87f6",
          "length": 18,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "697ea3f9-adcb-4fd3-8c0c-ae3b2e080355",
          "scriptId": "270abbe9-baba-4a73-a40c-d27f8a480703",
          "execution": "073eb455-f8dc-46b4-9daf-c075a3c82183"
        },
        "level": "log",
        "messages": [
          "Test completed"
        ]
      }
    ]
  }
}