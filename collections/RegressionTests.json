{
	"info": {
		"_postman_id": "de831603-7b06-4a16-8715-49a0a0bdd606",
		"name": "RegressionTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CCM",
			"item": [
				{
					"name": "SwiftEvents",
					"item": [
						{
							"name": "PullDataFromCsvFiles",
							"item": [
								{
									"name": "No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/PullDataFromCsvFiles",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"PullDataFromCsvFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Username and Pasword incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect Username and Password\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/PullDataFromCsvFiles",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"PullDataFromCsvFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Username and Pasword locked ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Account Locked\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/PullDataFromCsvFiles",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"PullDataFromCsvFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Username and Pasword new account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"New Account\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/PullDataFromCsvFiles",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"PullDataFromCsvFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Username and Pasword insufficient privileges",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Insufficient Privileges\", () => {",
													"    pm.response.to.have.status(403);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/PullDataFromCsvFiles",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"PullDataFromCsvFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Valid Test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.recordId).to.eql(0);",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.messages[0]).to.equal('PullDataFromCsvFiles[SUCCESS]');",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/PullDataFromCsvFiles",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"PullDataFromCsvFiles"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SyncSwiftEventsToSfCampaigns",
							"item": [
								{
									"name": "No auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncSwiftEventsToSfCampaigns",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncSwiftEventsToSfCampaigns"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Username and Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect Username and Password\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncSwiftEventsToSfCampaigns",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncSwiftEventsToSfCampaigns"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Locked User\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncSwiftEventsToSfCampaigns",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncSwiftEventsToSfCampaigns"
											]
										}
									},
									"response": []
								},
								{
									"name": "New Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"New Account\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncSwiftEventsToSfCampaigns",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncSwiftEventsToSfCampaigns"
											]
										}
									},
									"response": []
								},
								{
									"name": "Insufficient Privileges",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Insufficient Privileges\", () => {",
													"    pm.response.to.have.status(403);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncSwiftEventsToSfCampaigns",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncSwiftEventsToSfCampaigns"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Valid Test\", () => {",
													"    pm.response.to.have.status(200);",
													"        const jsonData = pm.response.json();",
													"    pm.expect(jsonData.recordId).to.eql(0);",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.messages[0]).to.equal('SyncSwiftEventsToSfCampaigns[SUCCESS]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncSwiftEventsToSfCampaigns",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncSwiftEventsToSfCampaigns"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SyncOpportunitiesOrLeads",
							"item": [
								{
									"name": "No auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncOpportunitiesOrLeads",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncOpportunitiesOrLeads"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Username and Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect Username and Password\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncOpportunitiesOrLeads",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncOpportunitiesOrLeads"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Locked User\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncOpportunitiesOrLeads",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncOpportunitiesOrLeads"
											]
										}
									},
									"response": []
								},
								{
									"name": "New Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"New Account\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncOpportunitiesOrLeads",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncOpportunitiesOrLeads"
											]
										}
									},
									"response": []
								},
								{
									"name": "Insufficient Privileges",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Insufficient Privileges\", () => {",
													"    pm.response.to.have.status(403);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncOpportunitiesOrLeads",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncOpportunitiesOrLeads"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Valid Test\", () => {",
													"    pm.response.to.have.status(200);",
													"        const jsonData = pm.response.json();",
													"    pm.expect(jsonData.recordId).to.eql(0);",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.messages[0]).to.equal('SyncOpportunitiesOrLeads[SUCCESS]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncOpportunitiesOrLeads",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncOpportunitiesOrLeads"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "SyncRegistrantStatuses",
							"item": [
								{
									"name": "No auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncRegistrantStatuses",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncRegistrantStatuses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Username and Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect Username and Password\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncRegistrantStatuses",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncRegistrantStatuses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Locked User\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncRegistrantStatuses",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncRegistrantStatuses"
											]
										}
									},
									"response": []
								},
								{
									"name": "New Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"New Account\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncRegistrantStatuses",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncRegistrantStatuses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Insufficient Privileges",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Insufficient Privileges\", () => {",
													"    pm.response.to.have.status(403);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncRegistrantStatuses",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncRegistrantStatuses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Valid Test\", () => {",
													"    pm.response.to.have.status(200);",
													"        const jsonData = pm.response.json();",
													"    pm.expect(jsonData.recordId).to.eql(0);",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.messages[0]).to.equal('SyncRegistrantStatuses[SUCCESS]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/SyncRegistrantStatuses",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"SyncRegistrantStatuses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "AddConfirmationInteractions",
							"item": [
								{
									"name": "Incorrect Username and Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect Username and Password\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/AddConfirmationInteractions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"AddConfirmationInteractions"
											]
										}
									},
									"response": []
								},
								{
									"name": "No auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/AddConfirmationInteractions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"AddConfirmationInteractions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid Test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Valid Test\", () => {",
													"    pm.response.to.have.status(200);",
													"        const jsonData = pm.response.json();",
													"    pm.expect(jsonData.recordId).to.eql(0);",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/AddConfirmationInteractions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"AddConfirmationInteractions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Locked User\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/AddConfirmationInteractions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"AddConfirmationInteractions"
											]
										}
									},
									"response": []
								},
								{
									"name": "New Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"New Account\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/AddConfirmationInteractions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"AddConfirmationInteractions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Insufficient Privileges",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Insufficient Privileges\", () => {",
													"    pm.response.to.have.status(403);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/SwiftEvents/AddConfirmationInteractions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"SwiftEvents",
												"AddConfirmationInteractions"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Corresspondence",
					"item": [
						{
							"name": "SyncInteractionsFromEngageOne",
							"item": [
								{
									"name": "No auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth Test\", () => {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"date\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Correspondence/SyncInteractionsFromEngageOne",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Correspondence",
												"SyncInteractionsFromEngageOne"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked User Test\", () => {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"date\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Correspondence/SyncInteractionsFromEngageOne",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Correspondence",
												"SyncInteractionsFromEngageOne"
											]
										}
									},
									"response": []
								},
								{
									"name": "New User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New User Test\", () => {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"date\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Correspondence/SyncInteractionsFromEngageOne",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Correspondence",
												"SyncInteractionsFromEngageOne"
											]
										}
									},
									"response": []
								},
								{
									"name": "User with No roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No roles assigned user Test\", () => {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"date\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Correspondence/SyncInteractionsFromEngageOne",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Correspondence",
												"SyncInteractionsFromEngageOne"
											]
										}
									},
									"response": []
								},
								{
									"name": "No Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Body Test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const data = pm.response.json();",
													"    ",
													"    pm.expect(data.recordId).to.eql(0);",
													"    pm.expect(data.isSuccess).to.be.false;",
													"    pm.expect(data.messages[0]).to.include(\"A non-empty request body is required.\")",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Correspondence/SyncInteractionsFromEngageOne",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Correspondence",
												"SyncInteractionsFromEngageOne"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank date Test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const data = pm.response.json();",
													"    ",
													"    pm.expect(data.recordId).to.eql(0);",
													"    pm.expect(data.isSuccess).to.be.false;",
													"    pm.expect(data.messages[0]).to.include(\"String '' was not recognized as a valid DateTime.\")",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"date\":\"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Correspondence/SyncInteractionsFromEngageOne",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Correspondence",
												"SyncInteractionsFromEngageOne"
											]
										}
									},
									"response": []
								},
								{
									"name": "Date not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Date not found Test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const data = pm.response.json();",
													"    ",
													"    pm.expect(data.recordId).to.eql(0);",
													"    pm.expect(data.isSuccess).to.be.true;",
													"    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "text/plain",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"date\": \"2021-05-27\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Correspondence/SyncInteractionsFromEngageOne",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Correspondence",
												"SyncInteractionsFromEngageOne"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid file format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Date not found Test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const data = pm.response.json();",
													"    ",
													"    pm.expect(data.recordId).to.eql(0);",
													"    pm.expect(data.isSuccess).to.be.true;",
													"    pm.expect(data.messages[0]).to.include(\"No JRN files found at \\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\docmgmt\\\\corro\\\\CCM_JRN_ARCHIVE\\\\2021-05-27\")",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"date\": \"2021-05-27\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Correspondence/SyncInteractionsFromEngageOne",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Correspondence",
												"SyncInteractionsFromEngageOne"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{TestAutomation}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "TestAutomation",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Actions",
					"item": [
						{
							"name": "AddAction",
							"item": [
								{
									"name": "No auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect account test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Locked account test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "New User account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"New User account test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty Strings  test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No status test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.messages[0]).to.include(\"Action is required\");",
													"    pm.expect(jsonData.messages[1]).to.include(\"Status is required\");",
													"    pm.expect(jsonData.messages[2]).to.include(\"Action date is required\");",
													"    pm.expect(jsonData.messages[3]).to.include(\"Source system is required\");",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"\",\r\n  \"action\": \"\",\r\n  \"actionDate\": \"\",\r\n  \"status\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect source system test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect source system test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.messages[0]).to.include(\"Value Ring Central is not allowed for field Source System\");",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"Ring Central\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect action test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect action test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"$%#$%#$^%#\",\r\n  \"actionDate\": \"2021-07-13\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect action date test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.messages[0]).to.include(\"Date \" + requestBody.actionDate + \" is not a valid date\");",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"incorrectDate = moment().format('DD-MM-YYYY');",
													"pm.variables.set('incorrectDate', incorrectDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{incorrectDate}}\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Future action date test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Future action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.messages[0]).to.include(\"Action date \" + requestBody.actionDate + \" cannot be future date\");",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"future = moment().add(2,'days').format('YYYY-MM-DD');",
													"pm.variables.set('future', future);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{future}}\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Current action date test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Current action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
													"",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"now = moment().format('YYYY-MM-DD');",
													"pm.variables.set('now', now);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect status test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Current action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.messages[0]).to.include(\"Value \" + requestBody.status + \" is not allowed for field Status\");",
													"",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"now = moment().format('YYYY-MM-DD');",
													"pm.variables.set('now', now);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid status action started test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Current action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
													"",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"now = moment().format('YYYY-MM-DD');",
													"pm.variables.set('now', now);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid status action completed test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Current action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
													"",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"now = moment().format('YYYY-MM-DD');",
													"pm.variables.set('now', now);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action Completed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Current action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
													"",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"now = moment().format('YYYY-MM-DD');",
													"pm.variables.set('now', now);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"SwiftDigital\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDate\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"AddAction"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "AddActionV2",
							"item": [
								{
									"name": "No auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/v2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"v2",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect account test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/v2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"v2",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Locked account test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/v2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"v2",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "New User account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"New User account test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/v2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"v2",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty Strings  test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No status test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.messages[0]).to.include(\"Action is required\");",
													"    pm.expect(jsonData.messages[1]).to.include(\"Status is required\");",
													"   // pm.expect(jsonData.messages[2]).to.include(\"Action date is required\");",
													"    pm.expect(jsonData.messages[2]).to.include(\"Source system is required\");",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"\",\r\n  \"action\": \"\",\r\n   \"actionDateTime\": \"\",\r\n  \"status\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/v2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"v2",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect source system test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect source system test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.messages[0]).to.include(\"Value Ring Central is not allowed for field Source System\");",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"Ring Central\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/v2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"v2",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect action test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect action test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"$%#$%#$^%#\",\r\n \"actionDateTime\": \"2021-07-13 14:29:06\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/v2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"v2",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect action date test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.messages[0]).to.include(\"Date \" + requestBody.actionDateTime + \" is not a valid datetime\");",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"incorrectDateTime = moment().format('DD-MM-YYYY HH:MM:SS');",
													"pm.variables.set('incorrectDateTime', incorrectDateTime);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{incorrectDateTime}}\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/v2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"v2",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Future action date test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Future action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.messages[0]).to.include(\"ActionDateTime \" + requestBody.actionDateTime + \" cannot be future date\");",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"var futureDateTime = moment().add(5,'days').format('YYYY-MM-DD 00:00:00');",
													"pm.variables.set('futureDateTime', futureDateTime);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n   \"actionDateTime\": \"{{futureDateTime}}\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/V2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"V2",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Current action date test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Current action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
													"",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"now = moment().format('YYYY-MM-DD 00:00:00');",
													"pm.variables.set('now', now);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/v2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"v2",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect status test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Current action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.messages[0]).to.include(\"Value \" + requestBody.status + \" is not allowed for field Status\");",
													"",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"now = moment().format('YYYY-MM-DD HH:MM:SS');",
													"pm.variables.set('now', now);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/v2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"v2",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid status action started test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Current action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
													"",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"now = moment().format('YYYY-MM-DD 00:00:00');",
													"pm.variables.set('now', now);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/v2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"v2",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid status action completed test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Current action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
													"",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"now = moment().format('YYYY-MM-DD 00:00:00');",
													"pm.variables.set('now', now);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"RingCentral\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action Completed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/v2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"v2",
												"AddAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Current action date test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"     ",
													"    const jsonData = pm.response.json();",
													"    const requestBody = JSON.parse(pm.request.body);",
													"     pm.expect(jsonData.messages[0]).to.include(\"Action successfully added for client \" + requestBody.clientId);",
													"",
													"",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"now = moment().format('YYYY-MM-DD 00:00:00');",
													"pm.variables.set('now', now);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501,\r\n  \"sourceSystem\": \"SwiftDigital\",\r\n  \"action\": \"{{$randomBsBuzz}}\",\r\n  \"actionDateTime\": \"{{now}}\",\r\n  \"status\": \"Action started\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/v2/AddAction",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"v2",
												"AddAction"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "SearchActions",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/SearchActions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SearchActions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect account test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect account test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/SearchActions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SearchActions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked account test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Locked account test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/SearchActions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SearchActions"
											]
										}
									},
									"response": []
								},
								{
									"name": "New account test ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"New account test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 8591078,\r\n  \"action\": \"Action\",\r\n  \"status\": \"Action started\",\r\n  \"dateFrom\": \"2021-07-06\",\r\n  \"dateTo\": \"2021-07-13\",\r\n  \"pageSize\": 0,\r\n  \"pageNumber\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/SearchActions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SearchActions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only client Id test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Only client Id test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"const jsonData = pm.response.json();",
													"const requestBody = pm.request.body;",
													"",
													"pm.expect(jsonData.isSuccess).to.be.true;",
													"pm.expect(jsonData.data).to.not.have.length(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
													"\r",
													"pm.collectionVariables.set(\"action\", 'no client id');\r",
													"\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    clientId: 807964501,\r",
													"                    sourceSystem: \"RingCentral\",\r",
													"                    action: pm.collectionVariables.get(\"action\"),\r",
													"                    actionDate: pm.collectionVariables.get(\"now\"),\r",
													"                    status: \"Action started\"\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
													"        });\r",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": 807964501\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/SearchActions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SearchActions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only action test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Only action test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"const jsonData = pm.response.json();",
													"const requestBody = pm.request.body;",
													"",
													"pm.expect(jsonData.isSuccess).to.be.true;",
													"pm.expect(jsonData.data).to.not.have.length(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
													"\r",
													"pm.collectionVariables.set(\"action\", 'no client id');\r",
													"\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    clientId: 807964501,\r",
													"                    sourceSystem: \"RingCentral\",\r",
													"                    action: pm.collectionVariables.get(\"action\"),\r",
													"                    actionDate: pm.collectionVariables.get(\"now\"),\r",
													"                    status: \"Action started\"\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
													"        });\r",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"action\": \"{{action}}\"\r\n\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/SearchActions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SearchActions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only status test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Only status test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"const jsonData = pm.response.json();",
													"const requestBody = pm.request.body;",
													"",
													"pm.expect(jsonData.isSuccess).to.be.true;",
													"pm.expect(jsonData.data).to.not.have.length(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n  \"status\": \"Action started\"\r\n\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/SearchActions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SearchActions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only page size test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Only page size test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"const jsonData = pm.response.json();",
													"const requestBody = pm.request.body;",
													"",
													"pm.expect(jsonData.isSuccess).to.be.true;",
													"pm.expect(jsonData.data).to.not.have.length(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n  \"pageSize\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/SearchActions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SearchActions"
											]
										}
									},
									"response": []
								},
								{
									"name": "No body test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No body test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"const jsonData = pm.response.json();",
													"const requestBody = pm.request.body;",
													"",
													"pm.expect(jsonData.isSuccess).to.be.false;",
													"pm.expect(jsonData.messages).to.include(\"The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true. Path: $ | LineNumber: 1 | BytePositionInLine: 0.\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
													"\r",
													"pm.collectionVariables.set(\"action\", 'no client id');\r",
													"\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    clientId: 807964501,\r",
													"                    sourceSystem: \"RingCentral\",\r",
													"                    action: pm.collectionVariables.get(\"action\"),\r",
													"                    actionDate: pm.collectionVariables.get(\"now\"),\r",
													"                    status: \"Action started\"\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
													"        });\r",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/SearchActions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SearchActions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank body test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Blank body test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"const jsonData = pm.response.json();",
													"const requestBody = pm.request.body;",
													"",
													"pm.expect(jsonData.isSuccess).to.be.true;",
													"pm.expect(jsonData.data).to.not.have.length(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.collectionVariables.set(\"now\", moment().format(\"YYYY-MM-DD\"));\r",
													"\r",
													"pm.collectionVariables.set(\"action\", 'no client id');\r",
													"\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"ccm\") + '/api/Actions/AddAction',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    clientId: 807964501,\r",
													"                    sourceSystem: \"RingCentral\",\r",
													"                    action: pm.collectionVariables.get(\"action\"),\r",
													"                    actionDate: pm.collectionVariables.get(\"now\"),\r",
													"                    status: \"Action started\"\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Created action for client Id 807964501. Record successfully created before test\", error ? error : response.json());\r",
													"        });\r",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ccm}}/api/Actions/SearchActions",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SearchActions"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SyncActionsToSalesforce",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/Actions/SyncActionsToSalesforce",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SyncActionsToSalesforce"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect account test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Incorrect account test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/Actions/SyncActionsToSalesforce",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SyncActionsToSalesforce"
											]
										}
									},
									"response": []
								},
								{
									"name": "New User account test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"New account test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/Actions/SyncActionsToSalesforce",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SyncActionsToSalesforce"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked account test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Locked account test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/Actions/SyncActionsToSalesforce",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SyncActionsToSalesforce"
											]
										}
									},
									"response": []
								},
								{
									"name": "No access test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No access test\", () => {",
													"    pm.response.to.have.status(403);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/Actions/SyncActionsToSalesforce",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SyncActionsToSalesforce"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"No access test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.messages[0]).to.include(\"SyncActionsToSalesforce[INF] Sync complete.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ccm}}/api/Actions/SyncActionsToSalesforce",
											"host": [
												"{{ccm}}"
											],
											"path": [
												"api",
												"Actions",
												"SyncActionsToSalesforce"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{TestAutomation}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "TestAutomation",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "EinsteinAnalyticsData",
			"item": [
				{
					"name": "Einstein",
					"item": [
						{
							"name": "ExecuteSPEDWHerokuMembers",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{einsteinanalyticsdata}}/api/Einstein/ExecuteSPEDWHerokuMembers",
											"host": [
												"{{einsteinanalyticsdata}}"
											],
											"path": [
												"api",
												"Einstein",
												"ExecuteSPEDWHerokuMembers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank stored proc test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Blank stored proc test\", () => {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{einsteinanalyticsdata}}/api/Einstein/ExecuteSPEDWHerokuMembers",
											"host": [
												"{{einsteinanalyticsdata}}"
											],
											"path": [
												"api",
												"Einstein",
												"ExecuteSPEDWHerokuMembers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid stored proc test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Invalid stored proc test\", () => {",
													"    pm.response.to.have.status(400);",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.messages[0]).to.equal(\"Could not find stored procedure 'wrk.usptionSFMemberAnalyticsFlat'. [wrk].[usptionSFMemberAnalyticsFlat]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"storedProcedureName\": \"[wrk].[usptionSFMemberAnalyticsFlat]\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{einsteinanalyticsdata}}/api/Einstein/ExecuteSPEDWHerokuMembers",
											"host": [
												"{{einsteinanalyticsdata}}"
											],
											"path": [
												"api",
												"Einstein",
												"ExecuteSPEDWHerokuMembers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unauthorised access test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"Unauthorised access test\", () => {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"pm.environment.set(\"username\", \"test\");",
													"pm.environment.set(\"password\", \"test\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"storedProcedureName\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{einsteinanalyticsdata}}/api/Einstein/ExecuteSPEDWHerokuMembers",
											"host": [
												"{{einsteinanalyticsdata}}"
											],
											"path": [
												"api",
												"Einstein",
												"ExecuteSPEDWHerokuMembers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank body test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Blank body test\", () => {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.messages[0]).to.equal(\"The StoredProcedureName field is required.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{einsteinanalyticsdata}}/api/Einstein/ExecuteSPEDWHerokuMembers",
											"host": [
												"{{einsteinanalyticsdata}}"
											],
											"path": [
												"api",
												"Einstein",
												"ExecuteSPEDWHerokuMembers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Another valid stored proc test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Another valid stored proc test\", () => {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.messages[0]).to.equal(\"Procedure or function 'uspIntegrationSFMemberAccountTransaction' expects parameter '@startDate', which was not supplied.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAccountTransaction]\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{einsteinanalyticsdata}}/api/Einstein/ExecuteSPEDWHerokuMembers",
											"host": [
												"{{einsteinanalyticsdata}}"
											],
											"path": [
												"api",
												"Einstein",
												"ExecuteSPEDWHerokuMembers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid ExecuteSPEDWHerokuMembers test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Valid ExecuteSPEDWHerokuMembers request\", () => {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"storedProcedureName\": \"[wrk].[uspIntegrationSFMemberAnalyticsFlat]\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{einsteinanalyticsdata}}/api/Einstein/ExecuteSPEDWHerokuMembers",
											"host": [
												"{{einsteinanalyticsdata}}"
											],
											"path": [
												"api",
												"Einstein",
												"ExecuteSPEDWHerokuMembers"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{TestAutomation}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "TestAutomation",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "FileConversion",
			"item": [
				{
					"name": "NasFile",
					"item": [
						{
							"name": "ListInFile",
							"item": [
								{
									"name": "Username and Password incorrect",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"pm.environment.set(\"username\", \"test\");",
													"pm.environment.set(\"password\", \"incorrect\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/ListInFiles",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"ListInFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Username and Password not provided ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/ListInFiles",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"ListInFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Username and Password new acc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"pm.environment.set(\"username\", \"TestNewUser\");",
													"pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/ListInFiles",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"ListInFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid list in files test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"valid list files test\", () => {",
													"    const jsonData = pm.response.json();",
													"    pm.response.to.have.status(200);",
													"    pm.expect(jsonData.response.inputDirectory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\in\");",
													"    let length = jsonData.response.files.length;",
													"   ",
													"    if (length > 0) {",
													"        console.log(jsonData.response.files.length + \" Files Returned\")",
													"        for (var index = 0; index < length; index++)",
													"        {",
													"            ",
													"            if (jsonData.response.files[index].fileSizeBytes === 0) ",
													"            {",
													"                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
													"            }",
													"            ",
													"            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
													"            {",
													"                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName+ \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
													"            }",
													"            ",
													"            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
													"            {",
													"                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
													"            }",
													"            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
													"            {",
													"                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName + \" | \" + jsonData.response.files[index].createdDateTimeUtc);",
													"            }",
													"        }",
													"    }",
													"    if (length === 0) ",
													"    {",
													"         console.log(jsonData.response.files.length + \" Files Exists\")",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/ListInFiles",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"ListInFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Username and Password insufficient privileges acc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"pm.environment.set(\"username\", \"TestNoRolesUser\");",
													"pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(403);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/ListInFiles",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"ListInFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Username and Password locked acc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"pm.environment.set(\"username\", \"TestLockedUser\");",
													"pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/ListInFiles",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"ListInFiles"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "ListOutFiles",
							"item": [
								{
									"name": "Username and Password new acc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"pm.environment.set(\"username\", \"TestNewUser\");",
													"pm.environment.set(\"password\", \"btsWeW$zMmhJIjy\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/ListOutFiles",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"ListOutFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Username and Password insufficient privileges acc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"pm.environment.set(\"username\", \"TestNoRolesUser\");",
													"pm.environment.set(\"password\", \"paKAxSI7FAoO52U\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(403);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/ListOutFiles",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"ListOutFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Username and Password locked acc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"pm.environment.set(\"username\", \"TestLockedUser\");",
													"pm.environment.set(\"password\", \"shfq6-WNdzdnWseK\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/ListOutFiles",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"ListOutFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Username and Password incorrect",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"pm.environment.set(\"username\", \"test\");",
													"pm.environment.set(\"password\", \"incorrect\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/ListOutFiles",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"ListOutFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Username and Password not provided",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/ListOutFiles",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"ListOutFiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid list out files test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"valid list OUT files test\", () => {",
													"    const jsonData = pm.response.json();",
													"    pm.response.to.have.status(200);",
													"    pm.expect(jsonData.response.outputDirectory).is.eql(\"\\\\\\\\uat-specfs-01\\\\spectra_files_uat2\\\\tech1\\\\nas\\\\out\");",
													"    let length = jsonData.response.files.length;",
													"   ",
													"    if (length > 0) {",
													"        console.log(jsonData.response.files.length + \" Files Returned\")",
													"        for (var index = 0; index < length; index++)",
													"        {",
													"            ",
													"            if (jsonData.response.files[index].fileSizeBytes === 0) ",
													"            {",
													"                console.log(\"Blank file Exists. Blank filename is => \", jsonData.response.files[index].fileName);",
													"            }",
													"            ",
													"            if ((jsonData.response.files[index].fileName).endsWith('.pdf') )",
													"            {",
													"                console.log(\"PDF file Exists. PDF filename is =>\", jsonData.response.files[index].fileName);",
													"            }",
													"            ",
													"            if((jsonData.response.files[index].fileName).endsWith('.docx') ||(jsonData.response.files[index].fileName).endsWith('.doc'))",
													"            {",
													"                 console.log(\"DOCX / DOC file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
													"            }",
													"            if((jsonData.response.files[index].fileName).endsWith('.png') || (jsonData.response.files[index].fileName).endsWith('.jpg') || (jsonData.response.files[index].fileName).endsWith('.bmp'))",
													"            {",
													"                console.log(\"Picture file Exists. Docx filename is =>\", jsonData.response.files[index].fileName);",
													"            }",
													"        }",
													"    }",
													"    if (length === 0) ",
													"    {",
													"         console.log(jsonData.response.files.length + \" Files Exists\")",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/ListOutFIles",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"ListOutFIles"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "AddInvestmentOption",
							"item": [
								{
									"name": "Only Fund Name is provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"When Only Fund Name is provided test\", () => {",
													"",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"",
													"    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
													"    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
													"    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fundName\": \"ABCD\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": " Only Nas Fund Id is provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"When Only Nas Fund Id is provided test\", () => {",
													"",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"",
													"    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
													"    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
													"    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nasFundId\": \"QL81\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only Fund ID provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"When only Fund ID provided test\", () => {",
													"",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"",
													"    pm.expect(jsonData.response[0]).to.eql(\"Fund Name should not be empty\");",
													"    pm.expect(jsonData.response[1]).to.eql(\"Nas Fund Id should not be empty\");",
													"    pm.expect(jsonData.error).to.include(\"Fund Name should not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"fundId\": \"QL81C1\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplicate Nas Fund ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Nas Fund ID test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
													"",
													"    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fundId\": \"QL82C1\",\r\n  \"fundName\": \"New CITY DB OPRTIONAL RISK RESRVE\",\r\n  \"nasFundId\": \"QL81C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Username and Password",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect Username and Password test\", ()=>{",
													"    pm.response.to.have.status(401);",
													"   ",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "user",
													"type": "string"
												},
												{
													"key": "username",
													"value": "user",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "No auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid characters in Nas Fund ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invalid characters in Fund ID test\", () => {",
													"    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    var random = pm.environment.get(\"randomId\");",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
													"    console.log(\"Correct message validated: \" + jsonData.response.message);",
													"    ",
													"    pm.expect(jsonData.error).to.be.null;",
													"    console.log(\"Test completed\");",
													"    ",
													"    //Delete the created record - ",
													"    if (pm.expect(jsonData.isSuccess).to.be.true) ",
													"    {",
													"        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
													"        const delRequest = {",
													"        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
													"        method: 'DELETE',",
													"        header: {",
													"            'accept': 'text/plain',",
													"            'Authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='",
													"        }};",
													"        pm.sendRequest(delRequest, (error, response) => {",
													"        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
													"        });",
													"    }",
													"",
													"});",
													"",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"@#@{{randomId}}@#@#\",\r\n  \"excludeFromUPFile\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplicate Fund ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund ID test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.response[0]).to.eql(\"Duplicated FundId or NasFundId\");",
													"",
													"    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"QL81\",\r\n  \"excludeFromUPFile\":false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "User with no access",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"User with no access\", ()=>{",
													"    pm.response.to.have.status(403);",
													"   ",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "User locked",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user\", ()=>{",
													"    pm.response.to.have.status(401);",
													"   ",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid characters in Fund Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invalid characters in Fund Name test\", () => {",
													"   console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    var random = pm.environment.get(\"randomId\");",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
													"    console.log(\"Correct message validated: \" + jsonData.response.message);",
													"    ",
													"    pm.expect(jsonData.error).to.be.null;",
													"    console.log(\"Test completed\");",
													"    ",
													"    //Delete the created record - ",
													"    if (pm.expect(jsonData.isSuccess).to.be.true) ",
													"    {",
													"        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
													"        const delRequest = {",
													"        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
													"        method: 'DELETE',",
													"        header: {",
													"            'accept': 'text/plain',",
													"            'Authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='",
													"        }};",
													"        ",
													"        pm.sendRequest(delRequest, (error, response) => {",
													"        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
													"        });",
													"    }",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"$@#${{FundName}}#$#$#\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "New User",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New User\", ()=>{",
													"    pm.response.to.have.status(401);",
													"   ",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty Request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Empty Request body test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
													"    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
													"    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
													"    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty input fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Empty input fields test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.response[0]).to.eql(\"Fund Id should not be empty\");",
													"    pm.expect(jsonData.response[1]).to.eql(\"Fund Name should not be empty\");",
													"    pm.expect(jsonData.response[2]).to.eql(\"Nas Fund Id should not be empty\");",
													"    pm.expect(jsonData.error).to.include(\"Fund Id should not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fundId\": \"\",\r\n  \"fundName\": \"\",\r\n  \"nasFundId\": \"\",\r\n  \"excludeFromUPFile\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid characters in Fund ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invalid characters in Fund ID test\", () => {",
													"    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    var random = pm.environment.get(\"randomId\");",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.response.message).to.include(\"Unable to add record\" );",
													"    console.log(\"Correct message validated: \" + jsonData.response.message);",
													"    ",
													"    pm.expect(jsonData.error).to.be.null;",
													"    console.log(\"Test completed\");",
													"    ",
													"    //Delete the created record - ",
													"    if (pm.expect(jsonData.isSuccess).to.be.true) ",
													"    {",
													"        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
													"        const delRequest = {",
													"        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
													"        method: 'DELETE',",
													"        header: {",
													"            'accept': 'text/plain',",
													"            'Authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='",
													"        }};",
													"        pm.sendRequest(delRequest, (error, response) => {",
													"        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
													"        });",
													"    }",
													"",
													"});",
													"",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fundId\": \"%%{{randomId}}#$\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid all",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All valid parameters test\", () => {",
													"    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    var random = pm.environment.get(\"randomId\");",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
													"    console.log(\"Correct message validated: \" + jsonData.response.message);",
													"    ",
													"    pm.expect(jsonData.error).to.be.null;",
													"    console.log(\"Test completed\");",
													"    ",
													"    //Delete the created record - ",
													"    if (pm.expect(jsonData.isSuccess).to.be.true) ",
													"    {",
													"        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
													"        const delRequest = {",
													"        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
													"        method: 'DELETE',",
													"        header: {",
													"            'accept': 'text/plain',",
													"            'Authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='",
													"        }};",
													"        pm.sendRequest(delRequest, (error, response) => {",
													"        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
													"        });",
													"    }",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"{{FundName}}\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n  \"excludeFromUPFile\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplicate all",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All parameters Duplicate test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    var random = pm.environment.get(\"randomId\");",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
													"    ",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    ",
													"    pm.expect(jsonData.response[0]).to.include(\"Duplicated FundId or NasFundId\");",
													"    console.log(\"Correct message validated: \" + jsonData.response[0]);",
													"    ",
													"    pm.expect(jsonData.error).to.include(\"Duplicated FundId or NasFundId\");",
													"    console.log(\"Test completed\");",
													"",
													"",
													"});",
													"",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fundId\": \"QL18C1\",\r\n  \"fundName\": \"LG AGGRESSIVE ACCUM OPTION\",\r\n  \"nasFundId\": \"LG18C1\",\r\n  \"excludeFromUPFile\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplciate Fund Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"    console.log(\"New record of Fund Id \"+ pm.environment.get(\"randomId\") + \" created and Test Started...\");",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    var random = pm.environment.get(\"randomId\");",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    console.log(\"Valid Response code: \" + jsonData.httpStatusCode);",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.response.message).to.include(\"New record successfully added - 'Investment option \" + random  + \" successfully added - ID\" );",
													"    console.log(\"Correct message validated: \" + jsonData.response.message);",
													"    ",
													"    pm.expect(jsonData.error).to.be.null;",
													"    console.log(\"Test completed\");",
													"    ",
													"  ",
													"",
													"});",
													"",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fundId\": \"{{randomId}}\",\r\n  \"fundName\": \"ABCD\",\r\n  \"nasFundId\": \"{{randomId}}\",\r\n   \"excludeFromUpFile\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/AddInvestmentOption",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"AddInvestmentOption"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"var random = makeid(6);",
											"pm.environment.set(\"randomId\", random);",
											"",
											"pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
											"",
											"function makeid(length) {",
											"    var result           = [];",
											"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    var charactersLength = characters.length;",
											"    for ( var i = 0; i < length; i++ ) {",
											"      result.push(characters.charAt(Math.floor(Math.random() * ",
											" charactersLength)));",
											"   }",
											"   return result.join('');",
											"}"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "DisplayInvestmentOption",
							"item": [
								{
									"name": "End  to end test - exclude from up file true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Display Investment options - End to End Test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    pm.expect(jsonData.response.message).to.be.null;",
													"    ",
													"    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
													"    {",
													"        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
													"    }",
													"      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(true)) ",
													"    {",
													"        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
													"    }",
													"    ",
													"    ",
													"    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
													"    ",
													"    ",
													"    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
													"    ",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"   ",
													"   //Delete the created record - ",
													"    if (pm.expect(jsonData.isSuccess).to.be.true) ",
													"    {",
													"        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
													"        const delRequest = {",
													"        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
													"        method: 'DELETE',",
													"        header: {",
													"            'accept': 'text/plain',",
													"            'Authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='",
													"        }};",
													"        pm.sendRequest(delRequest, (error, response) => {",
													"        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
													"        });",
													"    }",
													"   ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {",
													"        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
													"        method: 'POST',",
													"        header: {",
													"            'accept': 'text/plain',",
													"            'content-Type': 'application/json',",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='",
													"        },",
													"        body: {",
													"            mode: 'application/json',",
													"              raw: JSON.stringify(",
													"                {",
													"                    fundId: pm.environment.get(\"randomId\"),",
													"                    fundName: pm.environment.get(\"FundName\"),",
													"                    nasFundId: pm.environment.get(\"randomId\"),",
													"                    excludeFromUpFile: true",
													"                })",
													"            }",
													"        };",
													"",
													"        pm.sendRequest(postRequest, (error, response) => {",
													"        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
													"        });",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?nasFundID={{randomId}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "nasFundID",
													"value": "{{randomId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid  FundID only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    pm.expect(jsonData.response.message).to.be.null;",
													"    ",
													"    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
													"    {",
													"        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
													"    }",
													"      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
													"    {",
													"        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
													"    }",
													"    ",
													"    console.log(\"Nas Fund Id displayed is: \" + jsonData.response.investmentOptions[0].nasFundId);",
													"    ",
													"    ",
													"    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
													"    ",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?fundId=GBCYC1",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "fundId",
													"value": "GBCYC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid NasFundID and FundID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    pm.expect(jsonData.response.message).to.be.null;",
													"    ",
													"    if (pm.expect(jsonData.response.investmentOptions[0].fundId).to.eql(pm.request.url.query.get(\"fundId\"))) ",
													"    {",
													"        console.log(\"Fund ID \" + (pm.request.url.query.get(\"fundId\")) + \" matched.\");",
													"    }",
													"    ",
													"    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundId\"))) ",
													"    {",
													"        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundId\")) + \" matched.\");",
													"    }",
													"    if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
													"    {",
													"        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
													"    }",
													"    ",
													"    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
													"    ",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?nasFundId=LGGBCY&fundId=GBCYC1",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "nasFundId",
													"value": "LGGBCY"
												},
												{
													"key": "fundId",
													"value": "GBCYC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Non-existing FundID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    pm.expect(jsonData.response.message).to.include(\"No records found\");",
													"    pm.expect(jsonData.response.investmentOptions).to.be.null;",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?fundID={{randomId}}&nasFundID=",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "fundID",
													"value": "{{randomId}}"
												},
												{
													"key": "nasFundID",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User with No Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(403);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?fundID=bTiNIh&nasFundID=bTiNIh",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "fundID",
													"value": "bTiNIh"
												},
												{
													"key": "nasFundID",
													"value": "bTiNIh"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "text/plain",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?fundID=bTiNIh&nasFundID=bTiNIh",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "fundID",
													"value": "bTiNIh"
												},
												{
													"key": "nasFundID",
													"value": "bTiNIh"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid NasFundID and Invalid FundID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    pm.expect(jsonData.response.message).to.include(\"No records found\");",
													"    pm.expect(jsonData.response.investmentOptions).to.be.null;",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?nasFundID=GBCYC1&fundID={{randomId}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "nasFundID",
													"value": "GBCYC1"
												},
												{
													"key": "fundID",
													"value": "{{randomId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect username and password ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(401);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "incorrecty",
													"type": "string"
												},
												{
													"key": "username",
													"value": "incorrect",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?fundID=bTiNIh&nasFundID=bTiNIh",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "fundID",
													"value": "bTiNIh"
												},
												{
													"key": "nasFundID",
													"value": "bTiNIh"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(401);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?fundID=bTiNIh&nasFundID=bTiNIh",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "fundID",
													"value": "bTiNIh"
												},
												{
													"key": "nasFundID",
													"value": "bTiNIh"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(401);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?fundID=bTiNIh&nasFundID=bTiNIh",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "fundID",
													"value": "bTiNIh"
												},
												{
													"key": "nasFundID",
													"value": "bTiNIh"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "End  to end test - exclude from up file false",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Display Investment options - End to End Test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    pm.expect(jsonData.response.message).to.be.null;",
													"    ",
													"    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
													"    {",
													"        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
													"    }",
													"      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
													"    {",
													"        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
													"    }",
													"    ",
													"    ",
													"    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
													"    ",
													"    ",
													"    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
													"    ",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"   ",
													"   //Delete the created record - ",
													"    if (pm.expect(jsonData.isSuccess).to.be.true) ",
													"    {",
													"        console.log(\"Starting deletion of created FundId \"+ pm.environment.get(\"randomId\")+ \"....\");",
													"        const delRequest = {",
													"        url: 'https://intg-mcro.internal.lgsuper.org/fileconversion/api/NasFile/RemoveInvestmentOption?fundID='+ pm.environment.get(\"randomId\") +'&nasFundID='+ pm.environment.get(\"randomId\"),",
													"        method: 'DELETE',",
													"        header: {",
													"            'accept': 'text/plain',",
													"            'Authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='",
													"        }};",
													"        pm.sendRequest(delRequest, (error, response) => {",
													"        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \" Record successfully deleted after test\", error ? error : response.json());",
													"        });",
													"    }",
													"   ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {",
													"        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
													"        method: 'POST',",
													"        header: {",
													"            'accept': 'text/plain',",
													"            'content-Type': 'application/json',",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='",
													"        },",
													"        body: {",
													"            mode: 'application/json',",
													"              raw: JSON.stringify(",
													"                {",
													"                    fundId: pm.environment.get(\"randomId\"),",
													"                    fundName: pm.environment.get(\"FundName\"),",
													"                    nasFundId: pm.environment.get(\"randomId\"),",
													"                    excludeFromUpFile: false",
													"                })",
													"            }",
													"        };",
													"",
													"        pm.sendRequest(postRequest, (error, response) => {",
													"        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
													"        });",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?nasFundID={{randomId}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "nasFundID",
													"value": "{{randomId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const length = pm.response.json().response.investmentOptions.length;",
													"    console.log(\"No of Investments options records:\" + length);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?fundID=&nasFundID=",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "fundID",
													"value": ""
												},
												{
													"key": "nasFundID",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Non-existing NasFundID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    pm.expect(jsonData.response.message).to.include(\"No records found\");",
													"    pm.expect(jsonData.response.investmentOptions).to.be.null;",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?fundID=&nasFundID={{randomId}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "fundID",
													"value": ""
												},
												{
													"key": "nasFundID",
													"value": "{{randomId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Non-existing both",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    pm.expect(jsonData.response.message).to.include(\"No records found\");",
													"    pm.expect(jsonData.response.investmentOptions).to.be.null;",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?fundID={{randomId}}&nasFundID={{randomId}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "fundID",
													"value": "{{randomId}}"
												},
												{
													"key": "nasFundID",
													"value": "{{randomId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid FundID and Invalid NasFundID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    pm.expect(jsonData.response.message).to.include(\"No records found\");",
													"    pm.expect(jsonData.response.investmentOptions).to.be.null;",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?nasFundID={{randomId}}&fundID=GBCYC1",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "nasFundID",
													"value": "{{randomId}}"
												},
												{
													"key": "fundID",
													"value": "GBCYC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid  NasFundID only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    pm.expect(jsonData.response.message).to.be.null;",
													"    ",
													"    if (pm.expect(jsonData.response.investmentOptions[0].nasFundId).to.eql(pm.request.url.query.get(\"nasFundID\"))) ",
													"    {",
													"        console.log(\"Nas Fund ID \" + (pm.request.url.query.get(\"nasFundID\")) + \" matched.\");",
													"    }",
													"      if (pm.expect(jsonData.response.investmentOptions[0].excludeFromUp).to.eql(false)) ",
													"    {",
													"        console.log(\"Exclude from UP file \" + (jsonData.response.investmentOptions[0].excludeFromUp) + \" found and valid.\");",
													"    }",
													"    ",
													"    console.log(\"Fund Id displayed is: \" + jsonData.response.investmentOptions[0].fundId);",
													"    ",
													"    ",
													"    console.log(\"Fund Title displayed is: \" + jsonData.response.investmentOptions[0].fundTitle);",
													"    ",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/DisplayInvestmentOptions?nasFundID=LGGBCY",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"DisplayInvestmentOptions"
											],
											"query": [
												{
													"key": "nasFundID",
													"value": "LGGBCY"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"var random = makeid(6);",
											"pm.environment.set(\"randomId\", random);",
											"",
											"pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
											"",
											"function makeid(length) {",
											"    var result           = [];",
											"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    var charactersLength = characters.length;",
											"    for ( var i = 0; i < length; i++ ) {",
											"      result.push(characters.charAt(Math.floor(Math.random() * ",
											" charactersLength)));",
											"   }",
											"   return result.join('');",
											"}"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "RemoveInvestmentOption",
							"item": [
								{
									"name": "No auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?fundID={{randomId}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "fundID",
													"value": "{{randomId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect username and password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?fundID={{randomId}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "fundID",
													"value": "{{randomId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?fundID={{randomId}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "fundID",
													"value": "{{randomId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"    pm.response.to.have.status(401);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?fundID={{randomId}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "fundID",
													"value": "{{randomId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User with No roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"    pm.response.to.have.status(403);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?fundID={{randomId}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "fundID",
													"value": "{{randomId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    pm.expect(jsonData.response[0]).to.include(\"Fund Id or Nas Fund Id is required\");",
													"    pm.expect(jsonData.response[1]).to.include(\"FundId should be provided if NasFundId is empty\");",
													"    pm.expect(jsonData.response[2]).to.include(\"NasFundId should be provided if FundId is empty\");",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.error).to.include(\"Fund Id or Nas Fund Id is required\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?fundID=&nasFundID=",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "fundID",
													"value": ""
												},
												{
													"key": "nasFundID",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Non-existing FundID ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?fundID={{random}}&nasFundID=bTiNIh",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "fundID",
													"value": "{{random}}"
												},
												{
													"key": "nasFundID",
													"value": "bTiNIh"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Non-existing Nas FundID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?fundID=7YF5Kc&nasFundID={{random}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "fundID",
													"value": "7YF5Kc"
												},
												{
													"key": "nasFundID",
													"value": "{{random}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Non-existing both",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?fundID={{random}}&nasFundID={{random}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "fundID",
													"value": "{{random}}"
												},
												{
													"key": "nasFundID",
													"value": "{{random}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid FundID only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId =  successfully removed'\");",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {",
													"        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
													"        method: 'POST',",
													"        header: {",
													"            'accept': 'text/plain',",
													"            'content-Type': 'application/json',",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='",
													"        },",
													"        body: {",
													"            mode: 'application/json',",
													"              raw: JSON.stringify(",
													"                {",
													"                    fundId: pm.environment.get(\"randomId\"),",
													"                    fundName: pm.environment.get(\"FundName\"),",
													"                    nasFundId: pm.environment.get(\"randomId\")",
													"                })",
													"            }",
													"        };",
													"",
													"        pm.sendRequest(postRequest, (error, response) => {",
													"        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
													"        console.log(pm.environment.get(\"randomId\"));",
													"        });",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?fundID={{randomId}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "fundID",
													"value": "{{randomId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid NasFundID and Invalid FundID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?fundID=%%{{randomId}}&nasFundID=7YF5Kc",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "fundID",
													"value": "%%{{randomId}}"
												},
												{
													"key": "nasFundID",
													"value": "7YF5Kc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid FundId and NasFundId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = \" +  pm.environment.get(\"randomId\") + \", nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {",
													"        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
													"        method: 'POST',",
													"        header: {",
													"            'accept': 'text/plain',",
													"            'content-Type': 'application/json',",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='",
													"        },",
													"        body: {",
													"            mode: 'application/json',",
													"              raw: JSON.stringify(",
													"                {",
													"                    fundId: pm.environment.get(\"randomId\"),",
													"                    fundName: pm.environment.get(\"FundName\"),",
													"                    nasFundId: pm.environment.get(\"randomId\")",
													"                })",
													"            }",
													"        };",
													"",
													"        pm.sendRequest(postRequest, (error, response) => {",
													"        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
													"        console.log(pm.environment.get(\"randomId\"));",
													"        });",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?fundID={{randomId}}&nasFundID={{randomId}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "fundID",
													"value": "{{randomId}}"
												},
												{
													"key": "nasFundID",
													"value": "{{randomId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid NasFundID only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.httpStatusCode).to.eql(200);",
													"    pm.expect(jsonData.response.message).to.include(\"Existing record successfully deleted - 'Investment option fundId = , nasFundId = \" +  pm.environment.get(\"randomId\") + \" successfully removed'\");",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {",
													"        url: pm.environment.get(\"fileconversion\") + '/api/NasFile/AddInvestmentOption',",
													"        method: 'POST',",
													"        header: {",
													"            'accept': 'text/plain',",
													"            'content-Type': 'application/json',",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='",
													"        },",
													"        body: {",
													"            mode: 'application/json',",
													"              raw: JSON.stringify(",
													"                {",
													"                    fundId: pm.environment.get(\"randomId\"),",
													"                    fundName: pm.environment.get(\"FundName\"),",
													"                    nasFundId: pm.environment.get(\"randomId\")",
													"                })",
													"            }",
													"        };",
													"",
													"        pm.sendRequest(postRequest, (error, response) => {",
													"        console.log(\"Created Fund Id \" + pm.environment.get(\"randomId\")+ \". Record successfully created before test\", error ? error : response.json());",
													"        console.log(pm.environment.get(\"randomId\"));",
													"        });",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?nasFundID={{randomId}}",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "nasFundID",
													"value": "{{randomId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid FundID and Invalid NasFundID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate Fund Name test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.httpStatusCode).to.eql(400);",
													"    pm.expect(jsonData.error).to.include(\"fundID OR nasFundID not found\");",
													"    pm.expect(jsonData.isSuccess).to.be.false;",
													"    pm.expect(jsonData.response).to.include(\"fundID OR nasFundID not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{fileconversion}}/api/NasFile/RemoveInvestmentOption?nasFundID=%%{{randomId}}&fundID=7YF5Kc",
											"host": [
												"{{fileconversion}}"
											],
											"path": [
												"api",
												"NasFile",
												"RemoveInvestmentOption"
											],
											"query": [
												{
													"key": "nasFundID",
													"value": "%%{{randomId}}"
												},
												{
													"key": "fundID",
													"value": "7YF5Kc"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var random = makeid(6);",
											"pm.environment.set(\"randomId\", random);",
											"",
											"pm.environment.set(\"FundName\", \"This is a new fund name for \"+pm.environment.get('randomId'));",
											"",
											"function makeid(length) {",
											"    var result           = [];",
											"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    var charactersLength = characters.length;",
											"    for ( var i = 0; i < length; i++ ) {",
											"      result.push(characters.charAt(Math.floor(Math.random() * ",
											" charactersLength)));",
											"   }",
											"   return result.join('');",
											"}"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{TestAutomation}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "TestAutomation",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Swift",
			"item": [
				{
					"name": "SwiftFolderConfiguration",
					"item": [
						{
							"name": "AddFolder",
							"item": [
								{
									"name": "No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{swift}}/api/SwiftFolderConfiguration/AddFolder",
											"host": [
												"{{swift}}"
											],
											"path": [
												"api",
												"SwiftFolderConfiguration",
												"AddFolder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect user details test\", () => {",
													"    pm.response.to.have.status(401);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{swift}}/api/SwiftFolderConfiguration/AddFolder",
											"host": [
												"{{swift}}"
											],
											"path": [
												"api",
												"SwiftFolderConfiguration",
												"AddFolder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect user details test\", () => {",
													"    pm.response.to.have.status(401);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{swift}}/api/SwiftFolderConfiguration/AddFolder",
											"host": [
												"{{swift}}"
											],
											"path": [
												"api",
												"SwiftFolderConfiguration",
												"AddFolder"
											]
										}
									},
									"response": []
								},
								{
									"name": "New User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect user details test\", () => {",
													"    pm.response.to.have.status(401);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{swift}}/api/SwiftFolderConfiguration/AddFolder",
											"host": [
												"{{swift}}"
											],
											"path": [
												"api",
												"SwiftFolderConfiguration",
												"AddFolder"
											]
										}
									},
									"response": []
								},
								{
									"name": "No access",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect user details test\", () => {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"swiftFolderName\": \"test123\",\r\n  \"active\": true,\r\n  \"eventType\": \"SHC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{swift}}/api/SwiftFolderConfiguration/AddFolder",
											"host": [
												"{{swift}}"
											],
											"path": [
												"api",
												"SwiftFolderConfiguration",
												"AddFolder"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ListFolders",
							"item": [
								{
									"name": "No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{swift}}/api/SwiftFolderConfiguration/ListFolders",
											"host": [
												"{{swift}}"
											],
											"path": [
												"api",
												"SwiftFolderConfiguration",
												"ListFolders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect user details test\", () => {",
													"    pm.response.to.have.status(401);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{swift}}/api/SwiftFolderConfiguration/ListFolders",
											"host": [
												"{{swift}}"
											],
											"path": [
												"api",
												"SwiftFolderConfiguration",
												"ListFolders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect user details test\", () => {",
													"    pm.response.to.have.status(401);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{swift}}/api/SwiftFolderConfiguration/ListFolders",
											"host": [
												"{{swift}}"
											],
											"path": [
												"api",
												"SwiftFolderConfiguration",
												"ListFolders"
											]
										}
									},
									"response": []
								},
								{
									"name": "New User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect user details test\", () => {",
													"    pm.response.to.have.status(401);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{swift}}/api/SwiftFolderConfiguration/ListFolders",
											"host": [
												"{{swift}}"
											],
											"path": [
												"api",
												"SwiftFolderConfiguration",
												"ListFolders"
											]
										}
									},
									"response": []
								},
								{
									"name": "No access",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect user details test\", () => {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{swift}}/api/SwiftFolderConfiguration/ListFolders",
											"host": [
												"{{swift}}"
											],
											"path": [
												"api",
												"SwiftFolderConfiguration",
												"ListFolders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect user details test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.isSuccess).to.be.true;",
													"    pm.expect(jsonData.error).to.be.null;",
													"    ",
													"    const numberOfRecords = jsonData.response.swiftFolderConfigurations.length;",
													"    ",
													"    console.log(\"Number of Records:\", numberOfRecords);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{swift}}/api/SwiftFolderConfiguration/ListFolders",
											"host": [
												"{{swift}}"
											],
											"path": [
												"api",
												"SwiftFolderConfiguration",
												"ListFolders"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{TestAutomation}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "TestAutomation",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "RingCentral",
			"item": [
				{
					"name": "SyncCompanyCallLogs",
					"item": [
						{
							"name": "Date time exact value with time zone ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Date time exact value with time zone Test \", () => {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    const requestBody  = JSON.parse(pm.request.body);",
											"    ",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
											"    pm.expect(jsonData.isSuccess).to.be.true;",
											"    pm.expect(jsonData.error).to.be.null;",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": \"2021-07-12T14:10:26.2410000+10:00\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delta sync",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delta sync Test\", () => {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    ",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.response.message).to.eql(\"Successfully synced company call logs since \" + pm.collectionVariables.get(\"todaysDate\") +\"T00:00:00.0000000\");",
											"    pm.expect(jsonData.isSuccess).to.be.true;",
											"    pm.expect(jsonData.error).to.be.null;",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "No auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No Auth test\", () => {",
											"    pm.response.to.have.status(400);",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Incorrect account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Incorrect account test\", () => {",
											"    pm.response.to.have.status(401);",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "test",
											"type": "string"
										},
										{
											"key": "username",
											"value": "test",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hours ago",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Hours ago Test\", () => {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    const requestBody  = JSON.parse(pm.request.body);",
											"      const jsonData = pm.response.json();",
											"    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
											"    pm.expect(jsonData.isSuccess).to.be.true;",
											"    pm.expect(jsonData.error).to.be.null;",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Locked account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Locked account test\", () => {",
											"    pm.response.to.have.status(401);",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{LockedPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{LockedUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "New account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"New account test\", () => {",
											"    pm.response.to.have.status(401);",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{NewPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{NewUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync all logs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sync All logs Test\", () => {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    const requestBody  = JSON.parse(pm.request.body);",
											"      const jsonData = pm.response.json();",
											"    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \" + requestBody.dateFrom);",
											"    pm.expect(jsonData.isSuccess).to.be.true;",
											"    pm.expect(jsonData.error).to.be.null;",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "No access account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No access account test\", () => {",
											"    pm.response.to.have.status(403);",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{NoRolesPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{NoRolesUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Blank body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Blank body test\", () => {",
											"    pm.response.to.have.status(400);",
											"    ",
											"    ",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.response[0]).to.eql(\"A non-empty request body is required.\");",
											"    pm.expect(jsonData.isSuccess).to.be.false;",
											"    pm.expect(jsonData.error).to.be.null;",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative pagelimit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"negative page limit Test\", () => {",
											"    pm.response.to.have.status(500);",
											"    ",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.response).to.include(\"An unknown error occurred. Please contact support with the trace identifier included in this response\");",
											"    pm.expect(jsonData.isSuccess).to.be.false;",
											"    pm.expect(jsonData.error).to.not.be.empty;",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": \"2021-01-01\",\r\n  \"hours\": 0,\r\n  \"pageSize\": -100\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Blank date from",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Blank date field test\", () => {",
											"    pm.response.to.have.status(400);",
											"    ",
											"    ",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.response[0]).to.eql(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 16.\");",
											"    pm.expect(jsonData.isSuccess).to.be.false;",
											"    pm.expect(jsonData.error).to.be.null;",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": \"\",\r\n  \"hours\": 24,\r\n  \"pageSize\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Blank date hour",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Blank hours test\", () => {",
											"    pm.response.to.have.status(400);",
											"    ",
											"    ",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.response[0]).to.eql(\"',' is an invalid start of a value. Path: $.hours | LineNumber: 2 | BytePositionInLine: 11.\");",
											"    pm.expect(jsonData.isSuccess).to.be.false;",
											"    pm.expect(jsonData.error).to.be.null;",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": ,\r\n  \"pageSize\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative hours",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Negative Hours Test\", () => {",
											"    pm.response.to.have.status(200);",
											"    ",
											"   const requestBody  = JSON.parse(pm.request.body);",
											"   const jsonData = pm.response.json();",
											"    pm.expect(jsonData.response.message).to.include(\"Successfully synced company call logs since \");",
											"    pm.expect(jsonData.isSuccess).to.be.true;",
											"    pm.expect(jsonData.error).to.be.null;",
											"",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": null,\r\n  \"hours\": -24,\r\n  \"pageSize\": 100\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Blank date pagesize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Blank pagesize field Test\", () => {",
											"    pm.response.to.have.status(400);",
											"    ",
											"    ",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.response[0]).to.eql(\"'}' is an invalid start of a value. Path: $.pageSize | LineNumber: 4 | BytePositionInLine: 0.\");",
											"    pm.expect(jsonData.isSuccess).to.be.false;",
											"    pm.expect(jsonData.error).to.be.null;",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": \"{{todaysDate}}\",\r\n  \"hours\": 24,\r\n  \"pageSize\": \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Date From",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Date from Test\", () => {",
											"    pm.response.to.have.status(400);",
											"    ",
											"    const requestBody  = JSON.parse(pm.request.body);",
											"      const jsonData = pm.response.json();",
											"    pm.expect(jsonData.response).to.include(\"The JSON value could not be converted to System.Nullable`1[System.DateTime]. Path: $.dateFrom | LineNumber: 1 | BytePositionInLine: 26.\");",
											"    pm.expect(jsonData.isSuccess).to.be.false;",
											"    pm.expect(jsonData.error).to.be.null;",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dateFrom\": \"12-07-2021\",\r\n  \"hours\": 0,\r\n  \"pageSize\": 100\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ringcentral}}/api/CallLog/SyncCompanyCallLogs",
									"host": [
										"{{ringcentral}}"
									],
									"path": [
										"api",
										"CallLog",
										"SyncCompanyCallLogs"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const moment = require('moment');",
									"pm.collectionVariables.set(\"todaysDate\", moment().format(\"YYYY-MM-DD\"));",
									"",
									"pm.collectionVariables.set(\"todayiso\", moment().format(\"YYYY-MM-DDTHH:MM:SSZ\"));"
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{TestAutomation}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "TestAutomation",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "LGIA.Internal.Sonata.Helper.V2",
			"item": [
				{
					"name": "DigitalByDefault",
					"item": [
						{
							"name": "SubmitCurrentImportDataToSonata",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth Test\", () => {",
													"    pm.response.to.have.status(400);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/SubmitCurrentImportDataToSonata",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"SubmitCurrentImportDataToSonata"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth Test\", () => {",
													"    pm.response.to.have.status(401);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic ",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/SubmitCurrentImportDataToSonata",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"SubmitCurrentImportDataToSonata"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid Test\", () => {",
													"    pm.response.to.have.status(200);",
													"",
													"    const responsedata = pm.response.json();",
													"    ",
													"    pm.expect(responsedata).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/SubmitCurrentImportDataToSonata",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"SubmitCurrentImportDataToSonata"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ReduceCurrentImportDataRows",
							"item": [
								{
									"name": "No auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth Test\", () => {",
													"    pm.response.to.have.status(400);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ReduceCurrentImportDataRows?rowstoKeep=",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ReduceCurrentImportDataRows"
											],
											"query": [
												{
													"key": "rowstoKeep",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth Test\", () => {",
													"    pm.response.to.have.status(401);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ReduceCurrentImportDataRows?rowstoKeep=10",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ReduceCurrentImportDataRows"
											],
											"query": [
												{
													"key": "rowstoKeep",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect rows to keep test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect rows to keep test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.Message).to.include(\"The request is invalid.\")",
													"    ",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ReduceCurrentImportDataRows?rowstoKeep=wewetwetwt",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ReduceCurrentImportDataRows"
											],
											"query": [
												{
													"key": "rowstoKeep",
													"value": "wewetwetwt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Negative rows to keep test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Negative rows to keep test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData).to.be.false;",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ReduceCurrentImportDataRows?rowstoKeep=-10",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ReduceCurrentImportDataRows"
											],
											"query": [
												{
													"key": "rowstoKeep",
													"value": "-10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Big rows to keep test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Big rows to keep test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData).to.be.true;",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ReduceCurrentImportDataRows?rowstoKeep=100000000",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ReduceCurrentImportDataRows"
											],
											"query": [
												{
													"key": "rowstoKeep",
													"value": "100000000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Zero rows to keep test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Zero rows to keep test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData).to.be.true;",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ReduceCurrentImportDataRows?rowstoKeep=100000000",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ReduceCurrentImportDataRows"
											],
											"query": [
												{
													"key": "rowstoKeep",
													"value": "100000000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank rows to keep test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank rows to keep test\", () => {",
													"    pm.response.to.have.status(400);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.Message).to.include(\"The request is invalid.\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ReduceCurrentImportDataRows?rowstoKeep=",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ReduceCurrentImportDataRows"
											],
											"query": [
												{
													"key": "rowstoKeep",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No rows to keep test Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No rows to keep test\", () => {",
													"    pm.response.to.have.status(404);",
													"    ",
													"    const jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.Message).to.include(\"No HTTP resource was found that matches the request URI 'https://intg-mcro.internal.lgsuper.org/sonatahelper/ReduceCurrentImportDataRows'.\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ReduceCurrentImportDataRows",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ReduceCurrentImportDataRows"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ReduceCurrentImportDataRows?rowstoKeep=100",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ReduceCurrentImportDataRows"
											],
											"query": [
												{
													"key": "rowstoKeep",
													"value": "100"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ExecuteSPBulkImportData",
							"item": [
								{
									"name": "No Auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ExecuteSPBulkImportData",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ExecuteSPBulkImportData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Auth Key test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect Auth key test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic ",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ExecuteSPBulkImportData",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ExecuteSPBulkImportData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"    console.log(\"Length of records: \" + jsonData.length);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ExecuteSPBulkImportData",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ExecuteSPBulkImportData"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "apikey",
								"apikey": [
									{
										"key": "value",
										"value": "Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA==",
										"type": "string"
									},
									{
										"key": "key",
										"value": "Authorization",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "ExecuteSPDailyImportData",
							"item": [
								{
									"name": "No Auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ExecuteSPDailyImportData",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ExecuteSPDailyImportData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Auth Key test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect Auth key test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic ",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ExecuteSPBulkImportData",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ExecuteSPBulkImportData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"    console.log(\"Length of records: \" + jsonData.length);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ExecuteSPDailyImportData",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ExecuteSPDailyImportData"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "apikey",
								"apikey": [
									{
										"key": "value",
										"value": "Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA==",
										"type": "string"
									},
									{
										"key": "key",
										"value": "Authorization",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "SubmitBulkImportDataToSonata",
							"item": [
								{
									"name": "No Auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/SubmitBulkImportDataToSonata",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"SubmitBulkImportDataToSonata"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Auth Key test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect Auth key test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic ",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/SubmitBulkImportDataToSonata",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"SubmitBulkImportDataToSonata"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"    console.log(\"Length of records: \" + jsonData.length);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/SubmitBulkImportDataToSonata",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"SubmitBulkImportDataToSonata"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "apikey",
								"apikey": [
									{
										"key": "value",
										"value": "Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA==",
										"type": "string"
									},
									{
										"key": "key",
										"value": "Authorization",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "SubmitDailyImportDataToSonata",
							"item": [
								{
									"name": "No Auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/SubmitDailyImportDataToSonata",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"SubmitDailyImportDataToSonata"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Auth Key test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect Auth key test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic ",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/SubmitDailyImportDataToSonata",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"SubmitDailyImportDataToSonata"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.true;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/SubmitDailyImportDataToSonata",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"SubmitDailyImportDataToSonata"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "apikey",
								"apikey": [
									{
										"key": "value",
										"value": "Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA==",
										"type": "string"
									},
									{
										"key": "key",
										"value": "Authorization",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "GetCurrentImportData",
							"item": [
								{
									"name": "No Auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/GetCurrentImportData",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"GetCurrentImportData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Auth Key test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect Auth key test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic ",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/GetCurrentImportData",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"GetCurrentImportData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"    console.log(\"Length of records: \" + jsonData.length);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/GetCurrentImportData",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"GetCurrentImportData"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "apikey",
								"apikey": [
									{
										"key": "value",
										"value": "Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA==",
										"type": "string"
									},
									{
										"key": "key",
										"value": "Authorization",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "ClearImportData",
							"item": [
								{
									"name": "No Auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No Auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ClearImportData",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ClearImportData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Auth Key test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect Auth key test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ClearImportData",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ClearImportData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"    console.log(\"Length of records: \" + jsonData.length);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/ClearImportData",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"ClearImportData"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "apikey",
								"apikey": [
									{
										"key": "value",
										"value": "Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA==",
										"type": "string"
									},
									{
										"key": "key",
										"value": "Authorization",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "PmifInsurance",
					"item": [
						{
							"name": "PmifInsurance_SubmitPMIFOptInRequests",
							"item": [
								{
									"name": "No Auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", ()=> {\r",
													"        pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/SubmitPMIFOptInRequests",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"SubmitPMIFOptInRequests"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", ()=> {\r",
													"        pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/SubmitPMIFOptInRequests",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"SubmitPMIFOptInRequests"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"valid test test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"        \r",
													"        const jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.Success).to.be.true;\r",
													"        pm.expect(jsonData.Message).to.be.not.empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/SubmitPMIFOptInRequests",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"SubmitPMIFOptInRequests"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PmifInsurance_DeletePmifInsuranceOptIn",
							"item": [
								{
									"name": "No Auth test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", ()=> {\r",
													"        pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/3016",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"3016"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth key test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth key test\", ()=> {\r",
													"        pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic ",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/3016",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"3016"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {\r",
													"        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
													"                    SOURCE_SYSTEM: \"Web\",\r",
													"                    ACCOUNT_NUMBER: \"100001234\",\r",
													"                    STATUS: \"SUBMITTED\"\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        pm.variables.set(\"optInId\", response.json().Id);\r",
													"        console.log(\"Create insurance record\", error ? error : response.json());\r",
													"        \r",
													"        });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"        const jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.Success).to.be.true;\r",
													"        pm.expect(jsonData.Message).to.include(\"1 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/{{optInId}}",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"{{optInId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Special characters ID test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Special characters ID test\", ()=> {\r",
													"        pm.response.to.have.status(400);\r",
													"        const jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.Message).to.include(\"The request is invalid.\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/@#@$",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"@"
											],
											"hash": "@$"
										}
									},
									"response": []
								},
								{
									"name": "Non-existent ID test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Non existent ID test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"        const jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.Success).to.be.false;\r",
													"        pm.expect(jsonData.Message).to.be.not.empty;\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/0001",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"0001"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PmifInsurance_GetPmifInsuranceOptIn",
							"item": [
								{
									"name": "No auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", ()=> {\r",
													"        pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/154176",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"154176"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth key test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth key test\", ()=> {\r",
													"        pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/154176",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"154176"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid ID test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth key test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"        const jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.Success).to.be.true;\r",
													"        pm.expect(jsonData.OptInRecords).to.be.null;\r",
													"        \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/0001",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"0001"
											]
										}
									},
									"response": []
								},
								{
									"name": "Non-existent ID test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Non-existent ID test\", ()=> {\r",
													"        pm.response.to.have.status(400);\r",
													"        const jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.Message).to.include(\"The request is invalid.\")\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/!1!1",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"!1!1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"        const jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.OptInRecords).to.have.length(1);\r",
													"        pm.expect(jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID).to.eql(pm.variables.get('optInId'));\r",
													"        pm.expect(jsonData.Success).to.be.true;\r",
													"\r",
													"});\r",
													"\r",
													"const deleteRequest = {\r",
													"        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(deleteRequest, (error, response) => {\r",
													"        pm.variables.set(\"optInId\", response.json().Id);\r",
													"        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
													"        \r",
													"        });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {\r",
													"        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
													"                    SOURCE_SYSTEM: \"Web\",\r",
													"                    ACCOUNT_NUMBER: \"100001234\",\r",
													"                    STATUS: \"SUBMITTED\"\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        pm.variables.set(\"optInId\", response.json().Id);\r",
													"        console.log(\"Created insurance opt in record\", error ? error : response.json());\r",
													"        \r",
													"        });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/{{optInId}}",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"{{optInId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PmifInsurance_GetPMIFInsuranceAll",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('limit', 10);\r",
													"pm.variables.set('asc?', true)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", ()=> {\r",
													"        pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/PMIFInsuranceAll/{{limit}}/{{asc?}}",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"PMIFInsuranceAll",
												"{{limit}}",
												"{{asc?}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Auth key test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('limit', 10);\r",
													"pm.variables.set('asc?', true)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", ()=> {\r",
													"        pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/PMIFInsuranceAll/{{limit}}/{{asc?}}",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"PMIFInsuranceAll",
												"{{limit}}",
												"{{asc?}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid asc test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('limit', 10);\r",
													"pm.variables.set('asc?', true)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"        const jsonData = pm.response.json();\r",
													"        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
													"        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
													"        console.log(\"The number of records are in the range: \" + result) ;\r",
													"        const lengthOfRecords = jsonData.OptInRecords.length\r",
													"        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
													"        if(sequence) {\r",
													"            console.log(\"Sequence is ASC\");\r",
													"        } else {\r",
													"            console.log(\"Sequence is DESC\");\r",
													"        }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/PMIFInsuranceAll/{{limit}}/{{asc?}}",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"PMIFInsuranceAll",
												"{{limit}}",
												"{{asc?}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid desc test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('limit', 10);\r",
													"pm.variables.set('asc?', false)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"        const jsonData = pm.response.json();\r",
													"        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
													"        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
													"        console.log(\"The number of records are in the range: \" + result) ;\r",
													"        const lengthOfRecords = jsonData.OptInRecords.length\r",
													"        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
													"        if(sequence) {\r",
													"            console.log(\"Sequence is ASC\");\r",
													"        } else {\r",
													"            console.log(\"Sequence is DESC\");\r",
													"        }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/PMIFInsuranceAll/{{limit}}/{{asc?}}",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"PMIFInsuranceAll",
												"{{limit}}",
												"{{asc?}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid one record test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('limit', 1);\r",
													"pm.variables.set('asc?', true)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"        const jsonData = pm.response.json();\r",
													"        const result = pm.variables.get('limit') >= jsonData.OptInRecords.length;\r",
													"        console.log(\"The number of records displayed is \" + (jsonData.OptInRecords).length);\r",
													"        console.log(\"The number of records are in the range: \" + result) ;\r",
													"        const lengthOfRecords = jsonData.OptInRecords.length\r",
													"        const sequence = jsonData.OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID <= jsonData.OptInRecords[lengthOfRecords-1].PMIF_INSURANCE_OPT_IN_ID;\r",
													"        \r",
													"        if(sequence) {\r",
													"            console.log(\"Sequence is ASC\");\r",
													"        } else {\r",
													"            console.log(\"Sequence is DESC\");\r",
													"        } \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance/PMIFInsuranceAll/{{limit}}/{{asc?}}",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance",
												"PMIFInsuranceAll",
												"{{limit}}",
												"{{asc?}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PmifInsurance_UpdatePmifInsuranceOptIn",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", ()=> {\r",
													"        pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Auth key test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", ()=> {\r",
													"        pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"        const jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.Success).to.be.true;\r",
													"        pm.expect(jsonData.Message).to.include(\"1 row updated\");\r",
													"\r",
													"        const getRequest = {\r",
													"        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(getRequest, (error, response) => {\r",
													"        console.log(\"Record fetched\", error ? error : response.json());\r",
													"        const resultId = response.json().OptInRecords[0].PMIF_INSURANCE_OPT_IN_ID;\r",
													"        if(pm.expect(resultId).to.eql(pm.variables.get('optInId'))){\r",
													"             console.log(\"Records updated correctly\");\r",
													"         } else {\r",
													"            console.log(\"Records failed to update\");\r",
													"         }\r",
													"\r",
													"        });\r",
													"});\r",
													"const deleteRequest = {\r",
													"        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(deleteRequest, (error, response) => {\r",
													"        pm.variables.set(\"optInId\", response.json().Id);\r",
													"        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
													"        \r",
													"        });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {\r",
													"        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    PMIF_INSURANCE_OPT_IN_ID: 1111,\r",
													"                    SOURCE_SYSTEM: \"Web\",\r",
													"                    ACCOUNT_NUMBER: \"100001234\",\r",
													"                    STATUS: \"SUBMITTED\"\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        pm.variables.set(\"optInId\", response.json().Id);\r",
													"        console.log(\"Create insurance record\", error ? error : response.json());\r",
													"        \r",
													"        });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": {{optInId}},\r\n  \"ACCOUNT_NUMBER\": \"100002222\",\r\n  \"SOURCE_SYSTEM\": \"CCM\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PmifInsurance_DeleteAgedPmifInsuranceOptIn",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", ()=> {\r",
													"        pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/AgedPMIFInsuranceOptinRecords?olderThanDay=100",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"AgedPMIFInsuranceOptinRecords"
											],
											"query": [
												{
													"key": "olderThanDay",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid auth key test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", ()=> {\r",
													"        pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/AgedPMIFInsuranceOptinRecords?olderThanDay=100",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"AgedPMIFInsuranceOptinRecords"
											],
											"query": [
												{
													"key": "olderThanDay",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invalid auth key test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"        const jsonData = pm.response.json();\r",
													"\r",
													"        pm.expect(jsonData.Success).to.be.true;\r",
													"        pm.expect(jsonData.Message).to.include(\"0 PMIF_INSURANCE_OPT_IN record(s) deleted; 0 PMIF_INSURANCE_OPT_IN_ERROR record(s) deleted\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('days', 100);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/AgedPMIFInsuranceOptinRecords?olderThanDay={{days}}",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"AgedPMIFInsuranceOptinRecords"
											],
											"query": [
												{
													"key": "olderThanDay",
													"value": "{{days}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PmifInsurance_RecordPmifInsuranceOptIn",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", ()=> {\r",
													"        pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", ()=> {\r",
													"        pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"\r",
													"        const jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.Success).to.be.true;\r",
													"        pm.expect(jsonData.Message).to.include(\"1 row inserted\");\r",
													"});\r",
													"\r",
													"const deleteRequest = {\r",
													"        url: pm.environment.get(\"LGIA.Internal.Sonata.Helper.V2\") + '/PMIFInsurance/'+ pm.variables.get('optInId'),\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(deleteRequest, (error, response) => {\r",
													"        pm.variables.set(\"optInId\", response.json().Id);\r",
													"        console.log(\"Created insurance record deleted after test\", error ? error : response.json());\r",
													"        \r",
													"        });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"PMIF_INSURANCE_OPT_IN_ID\": 1111,\r\n  \"ACCOUNT_NUMBER\": \"100001234\",\r\n  \"SOURCE_SYSTEM\": \"WEB\",\r\n  \"STATUS\": \"Submitted\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/PMIFInsurance",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"PMIFInsurance"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PysInsurance",
					"item": [
						{
							"name": "PysInsurance_RecordInsuranceOptIn",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", ()=> {\r",
													"        pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/RecordInsuranceOptIn?accountNumber=100001234&sourceSystem=Web",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"RecordInsuranceOptIn"
											],
											"query": [
												{
													"key": "accountNumber",
													"value": "100001234"
												},
												{
													"key": "sourceSystem",
													"value": "Web"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth key test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", ()=> {\r",
													"        pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/RecordInsuranceOptIn?accountNumber=100001234&sourceSystem=Web",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"RecordInsuranceOptIn"
											],
											"query": [
												{
													"key": "accountNumber",
													"value": "100001234"
												},
												{
													"key": "sourceSystem",
													"value": "Web"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"\r",
													"        pm.expect(pm.response.json()).to.eql('true');\r",
													"        \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/RecordInsuranceOptIn?accountNumber=100001234&sourceSystem=Web",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"RecordInsuranceOptIn"
											],
											"query": [
												{
													"key": "accountNumber",
													"value": "100001234"
												},
												{
													"key": "sourceSystem",
													"value": "Web"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PysInsurance_SubmitOptInRequests",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", ()=> {\r",
													"        pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/SubmitOptInRequests",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"SubmitOptInRequests"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth key test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", ()=> {\r",
													"        pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/SubmitOptInRequests",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"SubmitOptInRequests"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"\r",
													"        const jsonData = pm.response.json();\r",
													"\r",
													"        pm.expect(jsonData.Success).to.be.true;\r",
													"        pm.expect(jsonData.Message).to.include(\"0 rows processed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/SubmitOptInRequests",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"SubmitOptInRequests"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PysInsurance_GetAccountsForPYSInsuranceCancel",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", ()=> {\r",
													"        pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/GetAccountsForPYSInsuranceCancel",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"GetAccountsForPYSInsuranceCancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth key test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", ()=> {\r",
													"        pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/GetAccountsForPYSInsuranceCancel",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"GetAccountsForPYSInsuranceCancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"\r",
													"        const jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.Success).to.be.true;\r",
													"        pm.expect(jsonData.Message).to.be.not.empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/GetAccountsForPYSInsuranceCancel",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"GetAccountsForPYSInsuranceCancel"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PysInsurance_GetOptInDetails",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", ()=> {\r",
													"        pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/GetOptInDetails?accountNumber=100001234",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"GetOptInDetails"
											],
											"query": [
												{
													"key": "accountNumber",
													"value": "100001234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth key test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", ()=> {\r",
													"        pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/GetOptInDetails?accountNumber=100001234",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"GetOptInDetails"
											],
											"query": [
												{
													"key": "accountNumber",
													"value": "100001234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", ()=> {\r",
													"        pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/GetOptInDetails?accountNumber=162577",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"GetOptInDetails"
											],
											"query": [
												{
													"key": "accountNumber",
													"value": "162577"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PysInsurance_UpdateInsuranceOptIn",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () =>{\r",
													"     pm.response.to.have.status(400);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/InsuranceOptIn?pysInsuranceOptInId=4430&accountNumber=100001234&sourceSystem=Web&status=Submitted",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"InsuranceOptIn"
											],
											"query": [
												{
													"key": "pysInsuranceOptInId",
													"value": "4430"
												},
												{
													"key": "accountNumber",
													"value": "100001234"
												},
												{
													"key": "sourceSystem",
													"value": "Web"
												},
												{
													"key": "status",
													"value": "Submitted"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth key test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () =>{\r",
													"     pm.response.to.have.status(401);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/InsuranceOptIn?pysInsuranceOptInId=4430&accountNumber=100001234&sourceSystem=Web&status=Submitted",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"InsuranceOptIn"
											],
											"query": [
												{
													"key": "pysInsuranceOptInId",
													"value": "4430"
												},
												{
													"key": "accountNumber",
													"value": "100001234"
												},
												{
													"key": "sourceSystem",
													"value": "Web"
												},
												{
													"key": "status",
													"value": "Submitted"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () =>{\r",
													"     pm.response.to.have.status(200);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/InsuranceOptIn?pysInsuranceOptInId=4442&accountNumber=100001234&sourceSystem=Web&status=Submitted",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"InsuranceOptIn"
											],
											"query": [
												{
													"key": "pysInsuranceOptInId",
													"value": "4442"
												},
												{
													"key": "accountNumber",
													"value": "100001234"
												},
												{
													"key": "sourceSystem",
													"value": "Web"
												},
												{
													"key": "status",
													"value": "Submitted"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PysInsurance_DeleteInsuranceOptInRecord",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () =>{\r",
													"     pm.response.to.have.status(400);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/InsuranceOptInRecords?pysInsuranceOptInId=4444",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"InsuranceOptInRecords"
											],
											"query": [
												{
													"key": "pysInsuranceOptInId",
													"value": "4444"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () =>{\r",
													"     pm.response.to.have.status(401);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/InsuranceOptInRecords?pysInsuranceOptInId=4444",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"InsuranceOptInRecords"
											],
											"query": [
												{
													"key": "pysInsuranceOptInId",
													"value": "4444"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PysInsurance_DeleteAgedInsuranceOptInRecords",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () =>{\r",
													"     pm.response.to.have.status(400);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/AgedInsuranceOptinRecords?olderThan=365",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"AgedInsuranceOptinRecords"
											],
											"query": [
												{
													"key": "olderThan",
													"value": "365"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () =>{\r",
													"     pm.response.to.have.status(401);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{LGIA.Internal.Sonata.Helper.V2}}/AgedInsuranceOptinRecords?olderThan=365",
											"host": [
												"{{LGIA.Internal.Sonata.Helper.V2}}"
											],
											"path": [
												"AgedInsuranceOptinRecords"
											],
											"query": [
												{
													"key": "olderThan",
													"value": "365"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA==",
						"type": "string"
					},
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "LGIA.External.Tal.Helper",
			"item": [
				{
					"name": "TalClientInsurance",
					"item": [
						{
							"name": "GetClient",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth Test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://intg-mcro.internal.lgsuper.org/moltalexternal/GetClient?clientId=101004487",
											"protocol": "https",
											"host": [
												"intg-mcro",
												"internal",
												"lgsuper",
												"org"
											],
											"path": [
												"moltalexternal",
												"GetClient"
											],
											"query": [
												{
													"key": "clientId",
													"value": "101004487"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth Test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Basic",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://intg-mcro.internal.lgsuper.org/moltalexternal/GetClient?clientId=101004487",
											"protocol": "https",
											"host": [
												"intg-mcro",
												"internal",
												"lgsuper",
												"org"
											],
											"path": [
												"moltalexternal",
												"GetClient"
											],
											"query": [
												{
													"key": "clientId",
													"value": "101004487"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid Test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://intg-mcro.internal.lgsuper.org/moltalexternal/GetClient?clientId=101004487",
											"protocol": "https",
											"host": [
												"intg-mcro",
												"internal",
												"lgsuper",
												"org"
											],
											"path": [
												"moltalexternal",
												"GetClient"
											],
											"query": [
												{
													"key": "clientId",
													"value": "101004487"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "GetPmifDefInsuranceValuesAPI",
			"item": [
				{
					"name": "DefaultInsurance",
					"item": [
						{
							"name": "GetInsurancesDataFromClientId",
							"item": [
								{
									"name": "Blank clientId test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('clientId', );\r",
													"pm.variables.set('accountNo', 100006032);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank client Id test\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance/{{clientId}}/{accountNumber}?accountNumber={{accountNo}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance",
												"{{clientId}}",
												"{accountNumber}"
											],
											"query": [
												{
													"key": "accountNumber",
													"value": "{{accountNo}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect authentication test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('clientId',101004749 );\r",
													"pm.variables.set('accountNo', 100006032);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance/{{clientId}}/{accountNumber}?accountNumber={{accountNo}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance",
												"{{clientId}}",
												"{accountNumber}"
											],
											"query": [
												{
													"key": "accountNumber",
													"value": "{{accountNo}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('clientId',101004749 );\r",
													"pm.variables.set('accountNo', 100006032);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No roles test\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance/{{clientId}}/{accountNumber}?accountNumber={{accountNo}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance",
												"{{clientId}}",
												"{accountNumber}"
											],
											"query": [
												{
													"key": "accountNumber",
													"value": "{{accountNo}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked User test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('clientId',101004749 );\r",
													"pm.variables.set('accountNo', 100006032);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance/{{clientId}}/{accountNumber}?accountNumber={{accountNo}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance",
												"{{clientId}}",
												"{accountNumber}"
											],
											"query": [
												{
													"key": "accountNumber",
													"value": "{{accountNo}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New Users test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('clientId',101004749 );\r",
													"pm.variables.set('accountNo', 100006032);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New Users test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance/{{clientId}}/{accountNumber}?accountNumber={{accountNo}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance",
												"{{clientId}}",
												"{accountNumber}"
											],
											"query": [
												{
													"key": "accountNumber",
													"value": "{{accountNo}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "authenticated valid  test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('clientId',101004749 );\r",
													"pm.variables.set('accountNo', 100006032);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authenticated user test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{TestAutomation}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "TestAutomation",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance/{{clientId}}/{accountNumber}?accountNumber={{accountNo}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance",
												"{{clientId}}",
												"{accountNumber}"
											],
											"query": [
												{
													"key": "accountNumber",
													"value": "{{accountNo}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No account number test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('clientId', 101004749);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No account number test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance/{{clientId}}/{accountNumber}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance",
												"{{clientId}}",
												"{accountNumber}"
											]
										}
									},
									"response": []
								},
								{
									"name": "No auth Valid test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('clientId', 101004749);\r",
													"pm.variables.set('accountNo', 100006032);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.message).to.include(\"Member does not have accumulation account.\");\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance/{{clientId}}/{accountNumber}?accountNumber={{accountNo}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance",
												"{{clientId}}",
												"{accountNumber}"
											],
											"query": [
												{
													"key": "accountNumber",
													"value": "{{accountNo}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PostInsurancesDataFromClientIds",
							"item": [
								{
									"name": "New User test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.variables.set('clientIds1', 101004487);\r",
													"pm.variables.set('clientIds2', 101005991);\r",
													"pm.variables.set('clientIds3', 101008226);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance?clientIds={{clientIds1}},{{clientIds2}},{{clientIds3}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance"
											],
											"query": [
												{
													"key": "clientIds",
													"value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.variables.set('clientIds1', 101004487);\r",
													"pm.variables.set('clientIds2', 101005991);\r",
													"pm.variables.set('clientIds3', 101008226);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance?clientIds={{clientIds1}},{{clientIds2}},{{clientIds3}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance"
											],
											"query": [
												{
													"key": "clientIds",
													"value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles user test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.variables.set('clientIds1', 101004487);\r",
													"pm.variables.set('clientIds2', 101005991);\r",
													"pm.variables.set('clientIds3', 101008226);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No roles test\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance?clientIds={{clientIds1}},{{clientIds2}},{{clientIds3}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance"
											],
											"query": [
												{
													"key": "clientIds",
													"value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.variables.set('clientIds1', 101004487);\r",
													"pm.variables.set('clientIds2', 101005991);\r",
													"pm.variables.set('clientIds3', 101008226);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance?clientIds={{clientIds1}},{{clientIds2}},{{clientIds3}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance"
											],
											"query": [
												{
													"key": "clientIds",
													"value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "authenticated valid test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.variables.set('clientIds1', 101004487);\r",
													"pm.variables.set('clientIds2', 101005991);\r",
													"pm.variables.set('clientIds3', 101008226);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authenticated valid  test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"\r",
													"    pm.expect(jsonData.data).length === 3;\r",
													"    pm.expect(jsonData.data[0]) === pm.variables.get('clientIds1');\r",
													"    pm.expect(jsonData.data[1]) === pm.variables.get('clientIds2');\r",
													"    pm.expect(jsonData.data[2]) === pm.variables.get('clientIds3');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{TestAutomation}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "TestAutomation",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance?clientIds={{clientIds1}},{{clientIds2}},{{clientIds3}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance"
											],
											"query": [
												{
													"key": "clientIds",
													"value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No auth Multiple clientIds test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.variables.set('clientIds1', 101004487);\r",
													"pm.variables.set('clientIds2', 101005991);\r",
													"pm.variables.set('clientIds3', 101008226);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Multiple client Id test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"\r",
													"    pm.expect(jsonData.data).length === 3;\r",
													"    pm.expect(jsonData.data[0]) === pm.variables.get('clientIds1');\r",
													"    pm.expect(jsonData.data[1]) === pm.variables.get('clientIds2');\r",
													"    pm.expect(jsonData.data[2]) === pm.variables.get('clientIds3');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance?clientIds={{clientIds1}},{{clientIds2}},{{clientIds3}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance"
											],
											"query": [
												{
													"key": "clientIds",
													"value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No auth Multiple clientIds with duplicate test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.variables.set('clientIds1', 101004487);\r",
													"pm.variables.set('clientIds2', 101004487);\r",
													"pm.variables.set('clientIds3', 101004487);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Multiple client Id with duplicates test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.isSuccess).to.be.false;\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{GetPmifDefaultInsuranceValues}}/api/DefaultInsurance?clientIds={{clientIds1}},{{clientIds2}},{{clientIds3}}",
											"host": [
												"{{GetPmifDefaultInsuranceValues}}"
											],
											"path": [
												"api",
												"DefaultInsurance"
											],
											"query": [
												{
													"key": "clientIds",
													"value": "{{clientIds1}},{{clientIds2}},{{clientIds3}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "VaultClientServiceApi",
			"item": [
				{
					"name": "Database",
					"item": [
						{
							"name": "AddGovernanceRecord",
							"item": [
								{
									"name": "No Auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": {{templateName}},\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": {{templateName}},\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": {{templateName}},\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "New User test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": {{templateName}},\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No roles user test\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": {{templateName}},\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/AddTemplateRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    templateId: pm.collectionVariables.get('templateName')\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Created new template ID: \" + pm.collectionVariables.get('templateName'), error ? error : response.json());\r",
													"        pm.collectionVariables.set('recordID', response.json().messages[0].split(' ')[1]);\r",
													"        console.log(\"Original record templateId: \", pm.collectionVariables.get('templateName'));\r",
													"        console.log(\"Original recordId: \", pm.collectionVariables.get('recordID'));\r",
													"        });\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"    console.log(\"New updated record templateId: \", pm.collectionVariables.get('NewTemplateName'));\r",
													"    console.log(\"Updated recordId: \", jsonData.messages[0].split(' ')[1]);\r",
													"    pm.collectionVariables.set('governanceRecordID', jsonData.messages[0].split(' ')[1])\r",
													"});\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/DeleteGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    governanceRecordId: parseInt(pm.collectionVariables.get('governanceRecordID'))\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Record deleted. \", error ? error : response.json());\r",
													"        });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"{{templateName}}\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "All fields blank test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All fields blank test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Template is required\");\r",
													"    pm.expect(jsonData.messages[1]).to.include(\"Value  is not allowed for Template\");\r",
													"    pm.expect(jsonData.messages[2]).to.include(\"Display system is required\");\r",
													"    pm.expect(jsonData.messages[3]).to.include(\"Value  is not allowed for Display System\");\r",
													"    pm.expect(jsonData.messages[4]).to.include(\"Sending system is required\");\r",
													"    pm.expect(jsonData.messages[5]).to.include(\"Value  is not allowed for Sending System\");\r",
													"    pm.expect(jsonData.messages[6]).to.include(\"Template title is required\");\r",
													"    pm.expect(jsonData.messages[7]).to.include(\"Governance Rule is required\");\r",
													"    pm.expect(jsonData.messages[8]).to.include(\"Value  is not allowed for Governance Rule\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"\",\r\n  \"sendingSystem\": \"\",\r\n  \"template\": \"\",\r\n  \"governanceRule\": \"\",\r\n  \"templateTitle\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank display system test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All fields blank test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Display system is required\");\r",
													"    pm.expect(jsonData.messages[1]).to.include(\"Value  is not allowed for Display System\");\r",
													"   \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank sending system test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All fields blank test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Sending system is required\");\r",
													"    pm.expect(jsonData.messages[1]).to.include(\"Value  is not allowed for Sending System\");\r",
													"   \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank templateId test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All fields blank test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Template is required\");\r",
													"    pm.expect(jsonData.messages[1]).to.include(\"Value  is not allowed for Template\");\r",
													"   \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank governanceRule test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All fields blank test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Governance Rule is required\");\r",
													"    pm.expect(jsonData.messages[1]).to.include(\"Value  is not allowed for Governance Rule\");\r",
													"   \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank templateTitle test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All fields blank test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Template title is required\");\r",
													"   \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Same display and Sending system test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Same display and Sending system test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Value Sonata is not allowed for Display System\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Sonata\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Test123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Existing record test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Existing record test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Record already exists in table - \");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "blank body test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"blank body test\", () => {\r",
													"    pm.response.to.have.status(415);\r",
													"    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddGovernanceRecord"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "UpdateGovernanceRecord",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "New User test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No roles test\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    console.log(\"Updated recordId: \", jsonData.messages[0].split(' ')[1]);\r",
													"    pm.expect(jsonData.messages).to.include(\"Record \" + pm.collectionVariables.get('governanceRecordID') + \" successfully updated\")\r",
													"});\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/DeleteGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    governanceRecordId: parseInt(pm.collectionVariables.get('governanceRecordID'))\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Record deleted. \", error ? error : response.json());\r",
													"        });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postAddTemplateRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/AddTemplateRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    templateId: pm.collectionVariables.get('templateName')\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"const postAddGovernanceRecordRequest = {\r",
													"        url: 'https://intg-mcro.internal.lgsuper.org/vaultclient/AddGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    displaySystem: 'Salesforce',\r",
													"                    sendingSystem: 'Sonata',\r",
													"                    template: pm.collectionVariables.get('templateName'),\r",
													"                    governanceRule: 'display',\r",
													"                    templateTitle: 'Test'\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"    pm.sendRequest(postAddTemplateRequest, (error, response) => {\r",
													"        console.log(\"Created new template ID: \" + pm.collectionVariables.get('templateName'), error ? error : response.json());\r",
													"        pm.collectionVariables.set('recordID', response.json().messages[0].split(' ')[1]);\r",
													"        pm.sendRequest(postAddGovernanceRecordRequest,(error, response) => {\r",
													"        console.log(\"Governance record added: \" + response.json().messages[0].split(' ')[1], error ? error : response.json());\r",
													"        var id = response.json().messages[0].split(' ')[1];\r",
													"        pm.collectionVariables.set('governanceRecordID', id);\r",
													"        });\r",
													"    });\r",
													"\r",
													"           \r",
													"        \r",
													"   \r",
													"    \r",
													"        \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordID\": {{governanceRecordID}},\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"{{templateName}}\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Test changed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only governance id test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Only governance id test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"    pm.expect(jsonData.messages).to.include(\"At least one field must be selected\")\r",
													"});\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/DeleteGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    governanceRecordId: parseInt(pm.collectionVariables.get('governanceRecordID'))\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Record deleted. \", error ? error : response.json());\r",
													"        });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postAddTemplateRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/AddTemplateRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    templateId: pm.collectionVariables.get('templateName')\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"const postAddGovernanceRecordRequest = {\r",
													"        url: 'https://intg-mcro.internal.lgsuper.org/vaultclient/AddGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    displaySystem: 'Salesforce',\r",
													"                    sendingSystem: 'Sonata',\r",
													"                    template: pm.collectionVariables.get('templateName'),\r",
													"                    governanceRule: 'display',\r",
													"                    templateTitle: 'Test'\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"    pm.sendRequest(postAddTemplateRequest, (error, response) => {\r",
													"        console.log(\"Created new template ID: \" + pm.collectionVariables.get('templateName'), error ? error : response.json());\r",
													"        pm.collectionVariables.set('recordID', response.json().messages[0].split(' ')[1]);\r",
													"        pm.sendRequest(postAddGovernanceRecordRequest,(error, response) => {\r",
													"        console.log(\"Governance record added: \" + response.json().messages[0].split(' ')[1], error ? error : response.json());\r",
													"        var id = response.json().messages[0].split(' ')[1];\r",
													"        pm.collectionVariables.set('governanceRecordID', id);\r",
													"        });\r",
													"    });\r",
													"\r",
													"           \r",
													"        \r",
													"   \r",
													"    \r",
													"        \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordID\": {{governanceRecordID}}\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank template title test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank template title test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages).to.include(\"Record already exists in table - ID \" + pm.collectionVariables.get('governanceRecordID'))\r",
													"});\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/DeleteGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    governanceRecordId: parseInt(pm.collectionVariables.get('governanceRecordID'))\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Record deleted. \", error ? error : response.json());\r",
													"        });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postAddTemplateRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/AddTemplateRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    templateId: pm.collectionVariables.get('templateName')\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"const postAddGovernanceRecordRequest = {\r",
													"        url: 'https://intg-mcro.internal.lgsuper.org/vaultclient/AddGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    displaySystem: 'Salesforce',\r",
													"                    sendingSystem: 'Sonata',\r",
													"                    template: pm.collectionVariables.get('templateName'),\r",
													"                    governanceRule: 'display',\r",
													"                    templateTitle: 'Test'\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"    pm.sendRequest(postAddTemplateRequest, (error, response) => {\r",
													"        console.log(\"Created new template ID: \" + pm.collectionVariables.get('templateName'), error ? error : response.json());\r",
													"        pm.collectionVariables.set('recordID', response.json().messages[0].split(' ')[1]);\r",
													"        pm.sendRequest(postAddGovernanceRecordRequest,(error, response) => {\r",
													"        console.log(\"Governance record added: \" + response.json().messages[0].split(' ')[1], error ? error : response.json());\r",
													"        var id = response.json().messages[0].split(' ')[1];\r",
													"        pm.collectionVariables.set('governanceRecordID', id);\r",
													"        });\r",
													"    });\r",
													"\r",
													"           \r",
													"        \r",
													"   \r",
													"    \r",
													"        \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordID\": {{governanceRecordID}},\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"{{templateName}}\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank governance rule test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank governance rule test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    console.log(\"Updated recordId: \", jsonData.messages[0].split(' ')[1]);\r",
													"    pm.expect(jsonData.messages).to.include(\"Record \" + pm.collectionVariables.get('governanceRecordID') + \" successfully updated\")\r",
													"});\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/DeleteGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    governanceRecordId: parseInt(pm.collectionVariables.get('governanceRecordID'))\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Record deleted. \", error ? error : response.json());\r",
													"        });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postAddTemplateRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/AddTemplateRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    templateId: pm.collectionVariables.get('templateName')\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"const postAddGovernanceRecordRequest = {\r",
													"        url: 'https://intg-mcro.internal.lgsuper.org/vaultclient/AddGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    displaySystem: 'Salesforce',\r",
													"                    sendingSystem: 'Sonata',\r",
													"                    template: pm.collectionVariables.get('templateName'),\r",
													"                    governanceRule: 'display',\r",
													"                    templateTitle: 'Test'\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"    pm.sendRequest(postAddTemplateRequest, (error, response) => {\r",
													"        console.log(\"Created new template ID: \" + pm.collectionVariables.get('templateName'), error ? error : response.json());\r",
													"        pm.collectionVariables.set('recordID', response.json().messages[0].split(' ')[1]);\r",
													"        pm.sendRequest(postAddGovernanceRecordRequest,(error, response) => {\r",
													"        console.log(\"Governance record added: \" + response.json().messages[0].split(' ')[1], error ? error : response.json());\r",
													"        var id = response.json().messages[0].split(' ')[1];\r",
													"        pm.collectionVariables.set('governanceRecordID', id);\r",
													"        });\r",
													"    });\r",
													"\r",
													"           \r",
													"        \r",
													"   \r",
													"    \r",
													"        \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordID\": {{governanceRecordID}},\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"{{templateName}}\",\r\n  \"governanceRule\": \"\",\r\n  \"templateTitle\": \"Test changed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank template id test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank template id test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    console.log(\"Updated recordId: \", jsonData.messages[0].split(' ')[1]);\r",
													"    pm.expect(jsonData.messages).to.include(\"Record \" + pm.collectionVariables.get('governanceRecordID') + \" successfully updated\")\r",
													"});\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/DeleteGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    governanceRecordId: parseInt(pm.collectionVariables.get('governanceRecordID'))\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Record deleted. \", error ? error : response.json());\r",
													"        });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postAddTemplateRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/AddTemplateRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    templateId: pm.collectionVariables.get('templateName')\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"const postAddGovernanceRecordRequest = {\r",
													"        url: 'https://intg-mcro.internal.lgsuper.org/vaultclient/AddGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    displaySystem: 'Salesforce',\r",
													"                    sendingSystem: 'Sonata',\r",
													"                    template: pm.collectionVariables.get('templateName'),\r",
													"                    governanceRule: 'display',\r",
													"                    templateTitle: 'Test'\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"    pm.sendRequest(postAddTemplateRequest, (error, response) => {\r",
													"        console.log(\"Created new template ID: \" + pm.collectionVariables.get('templateName'), error ? error : response.json());\r",
													"        pm.collectionVariables.set('recordID', response.json().messages[0].split(' ')[1]);\r",
													"        pm.sendRequest(postAddGovernanceRecordRequest,(error, response) => {\r",
													"        console.log(\"Governance record added: \" + response.json().messages[0].split(' ')[1], error ? error : response.json());\r",
													"        var id = response.json().messages[0].split(' ')[1];\r",
													"        pm.collectionVariables.set('governanceRecordID', id);\r",
													"        });\r",
													"    });\r",
													"\r",
													"           \r",
													"        \r",
													"   \r",
													"    \r",
													"        \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordID\": {{governanceRecordID}},\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Test changed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank sending system test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank sending system test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    console.log(\"Updated recordId: \", jsonData.messages[0].split(' ')[1]);\r",
													"    pm.expect(jsonData.messages).to.include(\"Record \" + pm.collectionVariables.get('governanceRecordID') + \" successfully updated\")\r",
													"});\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/DeleteGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    governanceRecordId: parseInt(pm.collectionVariables.get('governanceRecordID'))\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Record deleted. \", error ? error : response.json());\r",
													"        });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postAddTemplateRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/AddTemplateRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    templateId: pm.collectionVariables.get('templateName')\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"const postAddGovernanceRecordRequest = {\r",
													"        url: 'https://intg-mcro.internal.lgsuper.org/vaultclient/AddGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    displaySystem: 'Salesforce',\r",
													"                    sendingSystem: 'Sonata',\r",
													"                    template: pm.collectionVariables.get('templateName'),\r",
													"                    governanceRule: 'display',\r",
													"                    templateTitle: 'Test'\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"    pm.sendRequest(postAddTemplateRequest, (error, response) => {\r",
													"        console.log(\"Created new template ID: \" + pm.collectionVariables.get('templateName'), error ? error : response.json());\r",
													"        pm.collectionVariables.set('recordID', response.json().messages[0].split(' ')[1]);\r",
													"        pm.sendRequest(postAddGovernanceRecordRequest,(error, response) => {\r",
													"        console.log(\"Governance record added: \" + response.json().messages[0].split(' ')[1], error ? error : response.json());\r",
													"        var id = response.json().messages[0].split(' ')[1];\r",
													"        pm.collectionVariables.set('governanceRecordID', id);\r",
													"        });\r",
													"    });\r",
													"\r",
													"           \r",
													"        \r",
													"   \r",
													"    \r",
													"        \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordID\": {{governanceRecordID}},\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"\",\r\n  \"template\": \"{{templateName}}\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Test changed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank display system test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank display system test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    console.log(\"Updated recordId: \", jsonData.messages[0].split(' ')[1]);\r",
													"    pm.expect(jsonData.messages).to.include(\"Record \" + pm.collectionVariables.get('governanceRecordID') + \" successfully updated\")\r",
													"    \r",
													"});\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/DeleteGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    governanceRecordId: parseInt(pm.collectionVariables.get('governanceRecordID'))\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Record deleted. \", error ? error : response.json());\r",
													"        });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postAddTemplateRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/AddTemplateRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    templateId: pm.collectionVariables.get('templateName')\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"const postAddGovernanceRecordRequest = {\r",
													"        url: 'https://intg-mcro.internal.lgsuper.org/vaultclient/AddGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    displaySystem: 'Salesforce',\r",
													"                    sendingSystem: 'Sonata',\r",
													"                    template: pm.collectionVariables.get('templateName'),\r",
													"                    governanceRule: 'display',\r",
													"                    templateTitle: 'Test'\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"    pm.sendRequest(postAddTemplateRequest, (error, response) => {\r",
													"        console.log(\"Created new template ID: \" + pm.collectionVariables.get('templateName'), error ? error : response.json());\r",
													"        pm.collectionVariables.set('recordID', response.json().messages[0].split(' ')[1]);\r",
													"        pm.sendRequest(postAddGovernanceRecordRequest,(error, response) => {\r",
													"        console.log(\"Governance record added: \" + response.json().messages[0].split(' ')[1], error ? error : response.json());\r",
													"        var id = response.json().messages[0].split(' ')[1];\r",
													"        pm.collectionVariables.set('governanceRecordID', id);\r",
													"        });\r",
													"    });\r",
													"\r",
													"           \r",
													"        \r",
													"   \r",
													"    \r",
													"        \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordID\": {{governanceRecordID}},\r\n  \"displaySystem\": \"\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"{{templateName}}\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Test changed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Governance Id test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank governance id test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages).to.include(\"Governance record ID is required\")\r",
													"});\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/DeleteGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    governanceRecordId: parseInt(pm.collectionVariables.get('governanceRecordID'))\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Record deleted. \", error ? error : response.json());\r",
													"        });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postAddTemplateRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/AddTemplateRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    templateId: pm.collectionVariables.get('templateName')\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"const postAddGovernanceRecordRequest = {\r",
													"        url: 'https://intg-mcro.internal.lgsuper.org/vaultclient/AddGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    displaySystem: 'Salesforce',\r",
													"                    sendingSystem: 'Sonata',\r",
													"                    template: pm.collectionVariables.get('templateName'),\r",
													"                    governanceRule: 'display',\r",
													"                    templateTitle: 'Test'\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"    pm.sendRequest(postAddTemplateRequest, (error, response) => {\r",
													"        console.log(\"Created new template ID: \" + pm.collectionVariables.get('templateName'), error ? error : response.json());\r",
													"        pm.collectionVariables.set('recordID', response.json().messages[0].split(' ')[1]);\r",
													"        pm.sendRequest(postAddGovernanceRecordRequest,(error, response) => {\r",
													"        console.log(\"Governance record added: \" + response.json().messages[0].split(' ')[1], error ? error : response.json());\r",
													"        var id = response.json().messages[0].split(' ')[1];\r",
													"        pm.collectionVariables.set('governanceRecordID', id);\r",
													"        });\r",
													"    });\r",
													"\r",
													"           \r",
													"        \r",
													"   \r",
													"    \r",
													"        \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordID\": 0,\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"{{templateName}}\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Test changed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "All fields blank test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All fields blank test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"At least one field must be selected\");\r",
													"    pm.expect(jsonData.messages[1]).to.include(\"Governance record ID is required\");\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordID\": 0,\r\n  \"displaySystem\": \"\",\r\n  \"sendingSystem\": \"\",\r\n  \"template\": \"\",\r\n  \"governanceRule\": \"\",\r\n  \"templateTitle\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank body test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank body test\", () => {\r",
													"    pm.response.to.have.status(415);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "No fields test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All fields blank test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"At least one field must be selected\");\r",
													"    pm.expect(jsonData.messages[1]).to.include(\"Governance record ID is required\");\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateGovernanceRecord"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DeleteGovernanceRecord",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/DeleteGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"DeleteGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/DeleteGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"DeleteGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/DeleteGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"DeleteGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "New User test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/DeleteGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"DeleteGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No roles test\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/DeleteGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"DeleteGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages).to.include(\"Record \" + pm.collectionVariables.get('governanceRecordID') + \" successfully deleted\")\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postAddTemplateRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/AddTemplateRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    templateId: pm.collectionVariables.get('templateName')\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"const postAddGovernanceRecordRequest = {\r",
													"        url: 'https://intg-mcro.internal.lgsuper.org/vaultclient/AddGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    displaySystem: 'Salesforce',\r",
													"                    sendingSystem: 'Sonata',\r",
													"                    template: pm.collectionVariables.get('templateName'),\r",
													"                    governanceRule: 'display',\r",
													"                    templateTitle: 'Test'\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"    pm.sendRequest(postAddTemplateRequest, (error, response) => {\r",
													"        console.log(\"Created new template ID: \" + pm.collectionVariables.get('templateName'), error ? error : response.json());\r",
													"        pm.collectionVariables.set('recordID', response.json().messages[0].split(' ')[1]);\r",
													"        pm.sendRequest(postAddGovernanceRecordRequest,(error, response) => {\r",
													"        console.log(\"Governance record added: \" + response.json().messages[0].split(' ')[1], error ? error : response.json());\r",
													"        var id = response.json().messages[0].split(' ')[1];\r",
													"        pm.collectionVariables.set('governanceRecordID', id);\r",
													"        });\r",
													"    });\r",
													"\r",
													"           \r",
													"        \r",
													"   \r",
													"    \r",
													"        \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": {{governanceRecordID}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/DeleteGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"DeleteGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "No body test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No body test\", () => {\r",
													"    pm.response.to.have.status(415);\r",
													"\r",
													"   \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/DeleteGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"DeleteGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank governance id test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank governance id test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages).to.include(\"Governance record ID is required\")\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/DeleteGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"DeleteGovernanceRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "No field test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank governance id test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages).to.include(\"Governance record ID is required\")\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/DeleteGovernanceRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"DeleteGovernanceRecord"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "RetrieveGovernanceRecord",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": 10001,\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": 10001,\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": 10001,\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "New User test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": 10001,\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No roles test\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": 10001,\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    const req = JSON.parse(pm.request.body);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    pm.expect(jsonData.data[0].governanceRecordId).to.eql(parseInt(req.governanceRecordId));\r",
													"    pm.expect(jsonData.data[0].displaySystem).to.eql(req.displaySystem);\r",
													"    pm.expect(jsonData.data[0].sendingSystem).to.eql(req.sendingSystem);\r",
													"    pm.expect(jsonData.data[0].template).to.eql(req.template);\r",
													"    pm.expect(jsonData.data[0].governanceRule).to.eql(req.governanceRule);\r",
													"    pm.expect(jsonData.data[0].templateTitle).to.eql(req.templateTitle);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": 10001,\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"AM02\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Investment switch\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid newly created records test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid newly created records test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    const req = JSON.parse(pm.request.body);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    pm.expect(jsonData.data[0].governanceRecordId).to.eql(parseInt(req.governanceRecordId));\r",
													"    pm.expect(jsonData.data[0].displaySystem).to.eql(req.displaySystem);\r",
													"    pm.expect(jsonData.data[0].sendingSystem).to.eql(req.sendingSystem);\r",
													"    pm.expect(jsonData.data[0].template).to.eql(req.template);\r",
													"    pm.expect(jsonData.data[0].governanceRule).to.eql(req.governanceRule);\r",
													"    pm.expect(jsonData.data[0].templateTitle).to.eql(req.templateTitle);\r",
													"});\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/DeleteGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    governanceRecordId: parseInt(pm.collectionVariables.get('governanceRecordID'))\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Record deleted. \", error ? error : response.json());\r",
													"        });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postAddTemplateRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/AddTemplateRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    templateId: pm.collectionVariables.get('templateName')\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"const postAddGovernanceRecordRequest = {\r",
													"        url: 'https://intg-mcro.internal.lgsuper.org/vaultclient/AddGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    displaySystem: 'Salesforce',\r",
													"                    sendingSystem: 'Sonata',\r",
													"                    template: pm.collectionVariables.get('templateName'),\r",
													"                    governanceRule: 'display',\r",
													"                    templateTitle: 'Test'\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"    pm.sendRequest(postAddTemplateRequest, (error, response) => {\r",
													"        console.log(\"Created new template ID: \" + pm.collectionVariables.get('templateName'), error ? error : response.json());\r",
													"        pm.collectionVariables.set('recordID', response.json().messages[0].split(' ')[1]);\r",
													"        pm.sendRequest(postAddGovernanceRecordRequest,(error, response) => {\r",
													"        console.log(\"Governance record added: \" + response.json().messages[0].split(' ')[1], error ? error : response.json());\r",
													"        var id = response.json().messages[0].split(' ')[1];\r",
													"        pm.collectionVariables.set('governanceRecordID', id);\r",
													"        });\r",
													"    });\r",
													"\r",
													"           \r",
													"        \r",
													"   \r",
													"    \r",
													"        \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": {{governanceRecordID}},\r\n  \"displaySystem\": \"Salesforce\",\r\n  \"sendingSystem\": \"Sonata\",\r\n  \"template\": \"{{templateName}}\",\r\n  \"governanceRule\": \"display\",\r\n  \"templateTitle\": \"Test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "All blank fields test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"all blank fields test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    const req = JSON.parse(pm.request.body);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    console.log(\"Total Records displayed: \" + jsonData.data.length);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": 0,\r\n  \"displaySystem\": \"\",\r\n  \"sendingSystem\": \"\",\r\n  \"template\": \"\",\r\n  \"governanceRule\": \"\",\r\n  \"templateTitle\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "No fields test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No fields test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"   \r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    console.log(\"Total Records displayed: \" + jsonData.data.length);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "No body test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No fields test\", () => {\r",
													"    pm.response.to.have.status(415);\r",
													"    \r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only governance id test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Only governance id test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    const req = JSON.parse(pm.request.body);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    pm.expect(jsonData.data[0].governanceRecordId).to.eql(parseInt(req.governanceRecordId));\r",
													"    pm.expect(jsonData.data[0].displaySystem).to.eql(\"Salesforce\");\r",
													"    pm.expect(jsonData.data[0].sendingSystem).to.eql(\"Sonata\");\r",
													"    pm.expect(jsonData.data[0].template).to.eql(pm.collectionVariables.get('templateName'));\r",
													"    pm.expect(jsonData.data[0].governanceRule).to.eql(\"display\");\r",
													"    pm.expect(jsonData.data[0].templateTitle).to.eql(\"Test\");\r",
													"});\r",
													"\r",
													"const postRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/DeleteGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    governanceRecordId: parseInt(pm.collectionVariables.get('governanceRecordID'))\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Record deleted. \", error ? error : response.json());\r",
													"        });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postAddTemplateRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/AddTemplateRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    templateId: pm.collectionVariables.get('templateName')\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"const postAddGovernanceRecordRequest = {\r",
													"        url: 'https://intg-mcro.internal.lgsuper.org/vaultclient/AddGovernanceRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    displaySystem: 'Salesforce',\r",
													"                    sendingSystem: 'Sonata',\r",
													"                    template: pm.collectionVariables.get('templateName'),\r",
													"                    governanceRule: 'display',\r",
													"                    templateTitle: 'Test'\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"    pm.sendRequest(postAddTemplateRequest, (error, response) => {\r",
													"        console.log(\"Created new template ID: \" + pm.collectionVariables.get('templateName'), error ? error : response.json());\r",
													"        pm.collectionVariables.set('recordID', response.json().messages[0].split(' ')[1]);\r",
													"        pm.sendRequest(postAddGovernanceRecordRequest,(error, response) => {\r",
													"        console.log(\"Governance record added: \" + response.json().messages[0].split(' ')[1], error ? error : response.json());\r",
													"        var id = response.json().messages[0].split(' ')[1];\r",
													"        pm.collectionVariables.set('governanceRecordID', id);\r",
													"        });\r",
													"    });\r",
													"\r",
													"           \r",
													"        \r",
													"   \r",
													"    \r",
													"        \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"governanceRecordId\": {{governanceRecordID}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only display system test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Only display system test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    const req = JSON.parse(pm.request.body);\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    console.log(\"Total Records displayed: \" + jsonData.data.length);\r",
													"    for(var i=0; i<jsonData.data.length; i++) {\r",
													"        pm.expect(jsonData.data[i].displaySystem).to.eql(req.displaySystem);\r",
													"        console.log(\"Record \" + i + \" verified\");\r",
													"    }\r",
													"    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"displaySystem\": \"Salesforce\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only sending system test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Only sending system test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    const req = JSON.parse(pm.request.body);\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    console.log(\"Total Records displayed: \" + jsonData.data.length);\r",
													"    for(var i=0; i<jsonData.data.length; i++) {\r",
													"        pm.expect(jsonData.data[i].sendingSystem).to.eql(req.sendingSystem);\r",
													"        console.log(\"Record \" + i + \" verified\");\r",
													"    }\r",
													"    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"sendingSystem\": \"Sonata\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only template id test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Only template id test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    \r",
													"    const req = JSON.parse(pm.request.body);\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    console.log(\"Total Records displayed: \" + jsonData.data.length);\r",
													"    for(var i=0; i<jsonData.data.length; i++) {\r",
													"        pm.expect(jsonData.data[i].template).to.eql(req.template);\r",
													"        console.log(\"Record \" + i + \" verified\");\r",
													"    }\r",
													"    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"template\": \"AM02\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only governance rule test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Only governance rule test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const req = JSON.parse(pm.request.body);\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    console.log(\"Total Records displayed: \" + jsonData.data.length);\r",
													"    for(var i=0; i<jsonData.data.length; i++) {\r",
													"        pm.expect(jsonData.data[i].governanceRule).to.eql(req.governanceRule);\r",
													"        console.log(\"Record \" + i + \" verified\");\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"governanceRule\": \"display\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only template title test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Only template title test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    \r",
													"    const req = JSON.parse(pm.request.body);\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    console.log(\"Total Records displayed: \" + jsonData.data.length);\r",
													"    for(var i=0; i<jsonData.data.length; i++) {\r",
													"        pm.expect(jsonData.data[i].templateTitle).to.eql(req.templateTitle);\r",
													"        console.log(\"Record \" + i + \" verified\");\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"templateTitle\": \"TTR to Pension\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveGovernanceRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveGovernanceRecords"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "AddTemplateRecord",
							"item": [
								{
									"name": "No Auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateId\": \"Test01\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect Auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect Auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateId\": \"Test01\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateId\": \"Test01\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "New user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateId\": \"Test01\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateId\": \"Test01\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set('recordID', jsonData.messages[0].split(' ')[1]);\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Record \" + pm.collectionVariables.get('recordID') + \" successfully added\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateId\": \"{{templateName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank template id test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank template Id test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Template ID is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateId\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank body test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank body test\", () => {\r",
													"    pm.response.to.have.status(415);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "No template Id field test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank body test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"     const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Template ID is required\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/AddTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"AddTemplateRecord"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "UpdateTemplateRecord",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/UpdateTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/UpdateTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "test",
													"type": "string"
												},
												{
													"key": "password",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/UpdateTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "New user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/UpdateTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"no roles test\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/UpdateTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"    console.log(\"New updated record templateId: \", pm.collectionVariables.get('NewTemplateName'));\r",
													"    console.log(\"Updated recordId: \", jsonData.messages[0].split(' ')[1]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {\r",
													"        url: pm.environment.get(\"vaultclient\") + '/AddTemplateRecord',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'accept': 'text/plain',\r",
													"            'content-Type': 'application/json',\r",
													"            'authorization': 'Basic VGVzdEF1dG9tYXRpb246Yi1WQmVkIUJ5N3N1dmVZQmJhTA=='\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify(\r",
													"                {\r",
													"                    templateId: pm.collectionVariables.get('templateName')\r",
													"                })\r",
													"            }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(postRequest, (error, response) => {\r",
													"        console.log(\"Created new template ID: \" + pm.collectionVariables.get('templateName'), error ? error : response.json());\r",
													"        pm.collectionVariables.set('recordID', response.json().messages[0].split(' ')[1]);\r",
													"        console.log(\"Original record templateId: \", pm.collectionVariables.get('templateName'));\r",
													"        console.log(\"Original recordId: \", pm.collectionVariables.get('recordID'));\r",
													"        });\r",
													"\r",
													"        pm.collectionVariables.set('NewTemplateName', 'Test' + Math.floor(Math.random() * 20000));\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": {{recordID}},\r\n  \"templateId\": \"{{NewTemplateName}}\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank body test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"blank body test\", () => {\r",
													"    pm.response.to.have.status(415);\r",
													" \r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "No fields specified test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No fields test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Template ID is required\");\r",
													"    pm.expect(jsonData.messages[1]).to.include(\"Template record ID is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only templateRecordID test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Only templateRecordId test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Template ID is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": {{recordID}}\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only templateID test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Only templateId test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Template record ID is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n  \"templateId\": \"{{NewTemplateName}}\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "blank template record id test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"blank templateRecordId test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Template record ID is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": 0,\r\n  \"templateId\": \"{{NewTemplateName}}\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "blank template id test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"blank templateId test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Template ID is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": {{recordID}},\r\n  \"templateId\": \"\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateTemplateRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Non-existent template record ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Non-existent template record ID test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    \r",
													"    pm.expect(jsonData.messages[0]).to.include(\"Template record ID 1000000 not found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": 1000000,\r\n  \"templateId\": \"Test NE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/UpdateTemplateRecord",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"UpdateTemplateRecord"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "RetrieveTemplateRecord",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": 1065,\r\n  \"templateId\": \"ML01\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveTemplateRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveTemplateRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": 1065,\r\n  \"templateId\": \"ML01\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveTemplateRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveTemplateRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": 1065,\r\n  \"templateId\": \"ML01\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveTemplateRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveTemplateRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "New user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": 1065,\r\n  \"templateId\": \"ML01\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveTemplateRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveTemplateRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No roles test\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": 1065,\r\n  \"templateId\": \"ML01\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveTemplateRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveTemplateRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    const req = pm.request.body;\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    pm.expect(jsonData.data[0].templateRecordId).to.eql(1001)\r",
													"    pm.expect(jsonData.data[0].templateId).to.eql(\"AM02\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": 1001,\r\n  \"templateId\": \"AM02\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveTemplateRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveTemplateRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only templateRecordId test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Only templateRecordId test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    const req = pm.request.body;\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    pm.expect(jsonData.data[0].templateRecordId).to.eql(1001)\r",
													"    pm.expect(jsonData.data[0].templateId).to.eql(\"AM02\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": 1001\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveTemplateRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveTemplateRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only templateId test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Only templateId test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    const req = pm.request.body;\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    pm.expect(jsonData.data[0].templateRecordId).to.eql(1001)\r",
													"    pm.expect(jsonData.data[0].templateId).to.eql(\"AM02\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateId\": \"AM02\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveTemplateRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveTemplateRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "blank body test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank body test\", () => {\r",
													"    pm.response.to.have.status(415);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveTemplateRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveTemplateRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank templateId test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank templateId test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    const req = pm.request.body;\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    pm.expect(jsonData.data[0].templateRecordId).to.eql(1001)\r",
													"    pm.expect(jsonData.data[0].templateId).to.eql(\"AM02\")\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": 1001,\r\n  \"templateId\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveTemplateRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveTemplateRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank templateRecordId test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank templateRecordId test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    const req = pm.request.body;\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    pm.expect(jsonData.data[0].templateRecordId).to.eql(1001)\r",
													"    pm.expect(jsonData.data[0].templateId).to.eql(\"AM02\")\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": 0,\r\n  \"templateId\": \"AM02\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveTemplateRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveTemplateRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Both fields empty test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Both fields empty test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    const req = pm.request.body;\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    console.log(\"Length of records: \" + jsonData.data.length);\r",
													"    pm.expect(jsonData.data.length) >= 1;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"templateRecordId\": 0,\r\n  \"templateId\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveTemplateRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveTemplateRecords"
											]
										}
									},
									"response": []
								},
								{
									"name": "Both fields not available test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Both fields empty test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    const req = pm.request.body;\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    console.log(\"Length of records: \" + jsonData.data.length);\r",
													"    pm.expect(jsonData.data.length) >= 1;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveTemplateRecords",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveTemplateRecords"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set('templateName', 'Test' + Math.floor(Math.random() * 20000));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "VaultClient",
					"item": [
						{
							"name": "GetVaultInfo",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/GetVaultInfo",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"GetVaultInfo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/GetVaultInfo",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"GetVaultInfo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/GetVaultInfo",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"GetVaultInfo"
											]
										}
									},
									"response": []
								},
								{
									"name": "New user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/GetVaultInfo",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"GetVaultInfo"
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No roles test\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/GetVaultInfo",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"GetVaultInfo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/GetVaultInfo",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"GetVaultInfo"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GetIndexInfo",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/GetIndexInfo?indexName=1",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"GetIndexInfo"
											],
											"query": [
												{
													"key": "indexName",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/GetIndexInfo?indexName=1",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"GetIndexInfo"
											],
											"query": [
												{
													"key": "indexName",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/GetIndexInfo?indexName=1",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"GetIndexInfo"
											],
											"query": [
												{
													"key": "indexName",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New user test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/GetIndexInfo?indexName=1",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"GetIndexInfo"
											],
											"query": [
												{
													"key": "indexName",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No roles test\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/GetIndexInfo?indexName=1",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"GetIndexInfo"
											],
											"query": [
												{
													"key": "indexName",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.variables.set('indexNo', Math.floor(Math.random() * 10))\r",
													"console.log(\"Index displayed for is: \" + pm.variables.get('indexNo'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/GetIndexInfo?indexName={{indexNo}}",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"GetIndexInfo"
											],
											"query": [
												{
													"key": "indexName",
													"value": "{{indexNo}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "RetrieveDocumentListAll",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": \"200062034\",\r\n  \"dateFrom\": \"2020/01/01\",\r\n  \"dateTo\": \"2021/07/01\",\r\n  \"requestingSystem\": \"Salesforce\",\r\n  \"includeAccounts\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAll",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAll"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": \"200062034\",\r\n  \"dateFrom\": \"2020/01/01\",\r\n  \"dateTo\": \"2021/07/01\",\r\n  \"requestingSystem\": \"Salesforce\",\r\n  \"includeAccounts\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAll",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAll"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": \"200062034\",\r\n  \"dateFrom\": \"2020/01/01\",\r\n  \"dateTo\": \"2021/07/01\",\r\n  \"requestingSystem\": \"Salesforce\",\r\n  \"includeAccounts\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAll",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAll"
											]
										}
									},
									"response": []
								},
								{
									"name": "New user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": \"200062034\",\r\n  \"dateFrom\": \"2020/01/01\",\r\n  \"dateTo\": \"2021/07/01\",\r\n  \"requestingSystem\": \"Salesforce\",\r\n  \"includeAccounts\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAll",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAll"
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No roles test\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": \"200062034\",\r\n  \"dateFrom\": \"2020/01/01\",\r\n  \"dateTo\": \"2021/07/01\",\r\n  \"requestingSystem\": \"Salesforce\",\r\n  \"includeAccounts\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAll",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAll"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    const requestData = JSON.parse(pm.request.body);\r",
													"\r",
													"    pm.expect(jsonData.isSuccess).to.be.true;\r",
													"    pm.expect(jsonData.data[0].clientId).to.eql(requestData.clientId);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": \"200062034\",\r\n  \"dateFrom\": \"2020/01/01\",\r\n  \"dateTo\": \"2021/07/01\",\r\n  \"requestingSystem\": \"Salesforce\",\r\n  \"includeAccounts\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAll",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAll"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only clientId provided test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Only clientId provided test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"   pm.expect(jsonData.messages[0]).to.eql(\"Date To is required\");\r",
													"   pm.expect(jsonData.messages[1]).to.eql(\"Date From is required\");\r",
													"   pm.expect(jsonData.messages[2]).to.eql(\"Requesting system is required\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": \"200062034\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAll",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAll"
											]
										}
									},
									"response": []
								},
								{
									"name": "No parameters test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No parameters test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"   \r",
													"   pm.expect(jsonData.messages[0]).to.eql(\"Date To is required\");\r",
													"   pm.expect(jsonData.messages[1]).to.eql(\"Client ID is required\");\r",
													"   pm.expect(jsonData.messages[2]).to.eql(\"Date From is required\");\r",
													"   pm.expect(jsonData.messages[3]).to.eql(\"Requesting system is required\");\r",
													"\r",
													"  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAll",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAll"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank parameters test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank parameters test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"   pm.expect(jsonData.messages[0]).to.eql(\"Date To is required\");\r",
													"   pm.expect(jsonData.messages[1]).to.eql(\"Client ID is required\");\r",
													"   pm.expect(jsonData.messages[2]).to.eql(\"Date From is required\");\r",
													"   pm.expect(jsonData.messages[3]).to.eql(\"Requesting system is required\");\r",
													"\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientId\": \"\",\r\n  \"dateFrom\": \"\",\r\n  \"dateTo\": \"\",\r\n  \"requestingSystem\": \"\",\r\n  \"includeAccounts\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAll",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAll"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank body test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(415);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAll",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAll"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "RetrieveDocumentListAccountLevel",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountNumber\": \"3913707\",\r\n  \"dateFrom\": \"2020/01/01\",\r\n  \"dateTo\": \"2021/07/21\",\r\n  \"requestingSystem\": \"Salesforce\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAccountLevel",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAccountLevel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "testr",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountNumber\": \"3913707\",\r\n  \"dateFrom\": \"2020/01/01\",\r\n  \"dateTo\": \"2021/07/21\",\r\n  \"requestingSystem\": \"Salesforce\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAccountLevel",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAccountLevel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountNumber\": \"3913707\",\r\n  \"dateFrom\": \"2020/01/01\",\r\n  \"dateTo\": \"2021/07/21\",\r\n  \"requestingSystem\": \"Salesforce\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAccountLevel",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAccountLevel"
											]
										}
									},
									"response": []
								},
								{
									"name": "New user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountNumber\": \"3913707\",\r\n  \"dateFrom\": \"2020/01/01\",\r\n  \"dateTo\": \"2021/07/21\",\r\n  \"requestingSystem\": \"Salesforce\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAccountLevel",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAccountLevel"
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No roles test\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountNumber\": \"3913707\",\r\n  \"dateFrom\": \"2020/01/01\",\r\n  \"dateTo\": \"2021/07/21\",\r\n  \"requestingSystem\": \"Salesforce\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAccountLevel",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAccountLevel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const req = JSON.parse(pm.request.body);\r",
													"    const res = pm.response.json();\r",
													"\r",
													"    pm.expect(res.isSuccess).to.be.true;\r",
													"    pm.expect(res.data[0].accountNumber).to.eql(req.accountNumber);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountNumber\": \"3913707\",\r\n  \"dateFrom\": \"2020/01/01\",\r\n  \"dateTo\": \"2021/07/21\",\r\n  \"requestingSystem\": \"Salesforce\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAccountLevel",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAccountLevel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Only account number provided test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Only account number provided test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const res = pm.response.json();\r",
													"    pm.expect(res.messages[0]).to.eql(\"Date To is required\");\r",
													"    pm.expect(res.messages[1]).to.eql(\"Date From is required\");\r",
													"    pm.expect(res.messages[2]).to.eql(\"Requesting system is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountNumber\": \"3913707\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAccountLevel",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAccountLevel"
											]
										}
									},
									"response": []
								},
								{
									"name": "No parameters test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No parameters test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"   \r",
													"    const res = pm.response.json();\r",
													"\r",
													"    pm.expect(res.messages[0]).to.eql(\"Date To is required\");\r",
													"    pm.expect(res.messages[1]).to.eql(\"Date From is required\");\r",
													"    pm.expect(res.messages[2]).to.eql(\"Account number is required\");\r",
													"    pm.expect(res.messages[3]).to.eql(\"Requesting system is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAccountLevel",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAccountLevel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank parameters test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank parameters test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const res = pm.response.json();\r",
													"\r",
													"    pm.expect(res.messages[0]).to.eql(\"Date To is required\");\r",
													"    pm.expect(res.messages[1]).to.eql(\"Date From is required\");\r",
													"    pm.expect(res.messages[2]).to.eql(\"Account number is required\");\r",
													"    pm.expect(res.messages[3]).to.eql(\"Requesting system is required\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountNumber\": \"\",\r\n  \"dateFrom\": \"\",\r\n  \"dateTo\": \"\",\r\n  \"requestingSystem\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAccountLevel",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAccountLevel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank body test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank body test\", () => {\r",
													"    pm.response.to.have.status(415);\r",
													"\r",
													"    \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{vaultclient}}/RetrieveDocumentListAccountLevel",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"RetrieveDocumentListAccountLevel"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "StreamDocumentById",
							"item": [
								{
									"name": "No auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No auth test\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/StreamDocumentById?documentId=100687044",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"StreamDocumentById"
											],
											"query": [
												{
													"key": "documentId",
													"value": "100687044"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect auth test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect auth test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "test",
													"type": "string"
												},
												{
													"key": "username",
													"value": "test",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/StreamDocumentById?documentId=100687044",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"StreamDocumentById"
											],
											"query": [
												{
													"key": "documentId",
													"value": "100687044"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Locked user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Locked user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{LockedPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{LockedUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/StreamDocumentById?documentId=100687044",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"StreamDocumentById"
											],
											"query": [
												{
													"key": "documentId",
													"value": "100687044"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New user test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"New user test\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NewPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NewUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/StreamDocumentById?documentId=100687044",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"StreamDocumentById"
											],
											"query": [
												{
													"key": "documentId",
													"value": "100687044"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No roles test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No roles test\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{NoRolesPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{NoRolesUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/StreamDocumentById?documentId=100687044",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"StreamDocumentById"
											],
											"query": [
												{
													"key": "documentId",
													"value": "100687044"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/StreamDocumentById?documentId=100687044",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"StreamDocumentById"
											],
											"query": [
												{
													"key": "documentId",
													"value": "100687044"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parameter test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invalid parameters test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const res = pm.response.json();\r",
													"\r",
													"    pm.expect(res.message).to.eql(\"Document not found\");\r",
													"    pm.expect(res.isSuccess).to.be.false;\r",
													"    pm.expect(res.data).to.be.empty;\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/StreamDocumentById?documentId=1006844",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"StreamDocumentById"
											],
											"query": [
												{
													"key": "documentId",
													"value": "1006844"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank parameters test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Blank parameters test\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    const res = pm.response.json();\r",
													"\r",
													"    pm.expect(res.message).to.eql(\"DocumentID required\");\r",
													"    pm.expect(res.isSuccess).to.be.false;\r",
													"    pm.expect(res.data).to.be.empty;\r",
													"\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{vaultclient}}/StreamDocumentById?documentId=",
											"host": [
												"{{vaultclient}}"
											],
											"path": [
												"StreamDocumentById"
											],
											"query": [
												{
													"key": "documentId",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{TestAutomation}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "TestAutomation",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{TestAutomation}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "TestAutomation",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "todayiso",
			"value": "2021-07-14T09:07:42+10:00"
		},
		{
			"key": "todaysDate",
			"value": "2021-07-14"
		},
		{
			"key": "futureDate",
			"value": "2021-07-24"
		},
		{
			"key": "now",
			"value": "2021-07-15"
		},
		{
			"key": "action",
			"value": "no client id"
		},
		{
			"key": "templateName",
			"value": ""
		},
		{
			"key": "recordID",
			"value": ""
		},
		{
			"key": "NewTemplateName",
			"value": ""
		},
		{
			"key": "governanceRecordID",
			"value": ""
		}
	]
}